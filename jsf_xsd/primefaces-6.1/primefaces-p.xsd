<?xml version="1.0" encoding="UTF-8"?><!-- Generated by TaglibToXSD XSLT modified by Dawid Pytel https://github.com/destin/jsf-goodies--><!-- Original XSLT created by + Mark A. Ziesemer, http://www.ziesemer.com + 2008-03-25 --><xs:schema version="1.0" xml:lang="en" elementFormDefault="qualified" targetNamespace="http://primefaces.org/ui" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:annotation>
<xs:documentation/>
<xs:documentation>tlib-version: 2.0</xs:documentation>
</xs:annotation>
<xs:element name="dataExporter">
<xs:annotation/>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="target" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Server side id of the datatable whose data would be exported.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Export type: "xls","pdf","csv", "xml".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="fileName">
<xs:annotation>
<xs:documentation><![CDATA[Filename of the generated export file, defaults to datatable server side id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="pageOnly">
<xs:annotation>
<xs:documentation><![CDATA[Exports only current page instead of whole dataset.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="preProcessor">
<xs:annotation>
<xs:documentation><![CDATA[PreProcessor for the exported document.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="postProcessor">
<xs:annotation>
<xs:documentation><![CDATA[PostProcessor for the exported document.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="encoding">
<xs:annotation>
<xs:documentation><![CDATA[Character encoding to use.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selectionOnly">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, only selection would be exported.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="repeat">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, dynamic datatables would be exported.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="options">
<xs:annotation>
<xs:documentation><![CDATA[Exports the header and cell content according to the option.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="fileDownload">
<xs:annotation/>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[A streamed content instance.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="contentDisposition">
<xs:annotation>
<xs:documentation><![CDATA[Specifies display mode, valid values are "attachment" (default) and "inline".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="monitorKey">
<xs:annotation>
<xs:documentation><![CDATA[Defines setting cookie key for monitorDownload method on client side.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="collector">
<xs:annotation/>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Value to be used in collection operation.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="addTo">
<xs:annotation>
<xs:documentation><![CDATA[Reference to the Collection instance.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="removeFrom">
<xs:annotation>
<xs:documentation><![CDATA[Reference to the Collection instance.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="unique" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Checks for duplicate items on addition, default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="ajax">
<xs:annotation/>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="listener">
<xs:annotation>
<xs:documentation><![CDATA[Method to process in partial request.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value that determines the phaseId to execute listener. Default is false meaning "Invoke Application" phase, when true
            phase is "Apply Request Values".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="async">
<xs:annotation>
<xs:documentation><![CDATA[When set to true, ajax requests are not queued.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="process">
<xs:annotation>
<xs:documentation><![CDATA[Component(s) to process in partial request. Defaults to @this.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="update">
<xs:annotation>
<xs:documentation><![CDATA[Component(s) to update with ajax.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onstart">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback execute before ajax request is begins.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="oncomplete">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback execute when ajax request is completed and dom is updated.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onerror">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback execute when ajax requests returns with error response.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onsuccess">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback execute before dom is updated.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="global">
<xs:annotation>
<xs:documentation><![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="delay">
<xs:annotation>
<xs:documentation><![CDATA[If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables ajax behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="event">
<xs:annotation>
<xs:documentation><![CDATA[Client side event to trigger ajax request.
            Default value is defined by parent ClientBehaviorHolder component the behavior is attached to.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmit">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, only values related to partially processed components would be serialized for ajax
            instead of whole form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resetValues">
<xs:annotation>
<xs:documentation><![CDATA[If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ignoreAutoUpdate">
<xs:annotation>
<xs:documentation><![CDATA[If true, components which autoUpdate="true" will not be updated for this request. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmitFilter">
<xs:annotation>
<xs:documentation><![CDATA[Selector to use when partial submit is on, default is ":input" to select all descendant inputs of a partially processed components.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="form">
<xs:annotation>
<xs:documentation><![CDATA[Form to serialize for an ajax request. Default is the enclosing form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="skipChildren">
<xs:annotation>
<xs:documentation><![CDATA[Some components skips processing of their children in certain events, setting skipChildren as false to disables this behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="printer">
<xs:annotation/>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="target">
<xs:annotation>
<xs:documentation><![CDATA[Id of the component to print.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="confirm">
<xs:annotation/>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="header">
<xs:annotation>
<xs:documentation><![CDATA[Header text of the confirmation dialog.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="message">
<xs:annotation>
<xs:documentation><![CDATA[Detail text of the confirmation dialog.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="icon">
<xs:annotation>
<xs:documentation><![CDATA[Icon to display inside the confirm dialog.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables confirm behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="resetInput">
<xs:annotation/>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="target" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Comma or white-space separated list of component ids.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="clearModel">
<xs:annotation>
<xs:documentation><![CDATA[Whether to assign null values to bound values as well.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="clientValidator">
<xs:annotation/>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="event">
<xs:annotation>
<xs:documentation><![CDATA[Event to trigger the validation.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables instant client validation for the attached input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="repeat">
<xs:annotation>
<xs:documentation>component-type: org.primefaces.component.UIRepeat</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[The name of a collection of items that this tag iterates over. The collection may be a List, array, java.sql.ResultSet, or an individual java Object. If the collection is null, this tag does nothing..]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Name of the exported scoped variable for the current item of the iteration. This scoped variable has nested visibility. Its type depends on the object of the underlying collection.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="varStatus">
<xs:annotation>
<xs:documentation><![CDATA[Name of the exported request scoped variable for the status of the iteration. Object is a POJO with the following read-only JavaBeans properties. This scoped variable has nested visibility..]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="offset">
<xs:annotation>
<xs:documentation><![CDATA[Read-write property setting the offset from the beginning of the collection from which to start the iteration. If not set, this offset is not considered and iteration will start at the beginning of the collection..]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="step">
<xs:annotation>
<xs:documentation><![CDATA[Iteration will only process every step items of the collection, starting with the first one..]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="size">
<xs:annotation>
<xs:documentation><![CDATA[Read-write property setting the size of the collection to iterate. If this value is less than the actual size of the collection, a FacesException must be thrown..]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="importConstants">
<xs:annotation>
<xs:documentation><![CDATA[Util tag to import constants.
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="type" use="required">
<xs:annotation>
<xs:documentation><![CDATA[The constants class.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[
                The EL variable which can be used to obtain the constants. Default value: Name of the class without package.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="importEnum">
<xs:annotation>
<xs:documentation><![CDATA[Util tag to import enums.
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="type" use="required">
<xs:annotation>
<xs:documentation><![CDATA[The enum class.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[
                The EL variable which can be used to obtain the enum values. Default value: Name of the class without package.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="allSuffix">
<xs:annotation>
<xs:documentation><![CDATA[
                The suffix mapping for a array with all enum values. Default value: ALL_VALUES.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="accordionPanel">
<xs:annotation>
<xs:documentation><![CDATA[AccordionPanel is a container component that displays content in stacked format.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.AccordionPanel</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.AccordionPanelRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="activeIndex">
<xs:annotation>
<xs:documentation><![CDATA[Index of the active tab or a comma separated string of indexes when multiple mode is on. Default is zero.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTabChange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a tab is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTabShow">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a tab is shown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTabClose">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a tab is closed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dynamic">
<xs:annotation>
<xs:documentation><![CDATA[Defines the toggle mode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cache">
<xs:annotation>
<xs:documentation><![CDATA[Defines if activating a dynamic tab should load the contents from server again.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of collection iterator to use in dynamic number of tabs.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[List to iterate to display dynamic number of tabs.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="multiple">
<xs:annotation>
<xs:documentation><![CDATA[Enables activating multiple tabs, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Defines text direction, valid values are "ltr" (default) and "rtl".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="prependId">
<xs:annotation>
<xs:documentation><![CDATA[AccordionPanel is a naming container thus prepends its id to its children by default, a false value turns this behavior off except for dynamic tabs.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the headers in the tabbing order. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabController">
<xs:annotation>
<xs:documentation><![CDATA[Method providing suggestions.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="ajaxExceptionHandler">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.AjaxExceptionHandler</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onexception">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute after a exception with this type occured.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="update">
<xs:annotation>
<xs:documentation><![CDATA[Components to update after a exception with this type occured.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Exception type to handle.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="ajaxStatus">
<xs:annotation>
<xs:documentation><![CDATA[AjaxStatus is a global notifier for ajax requests made by PrimeFaces components.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.AjaxStatus</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.AjaxStatusRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onstart">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute after ajax requests start.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="oncomplete">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute after ajax requests complete.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onsuccess">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute after ajax requests completed succesfully.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onerror">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when an ajax request fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="autoComplete">
<xs:annotation>
<xs:documentation><![CDATA[AutoComplete provides live suggestions while an input is being typed.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.AutoComplete</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.AutoCompleteRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key to transfer focus to the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate textual description of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autocomplete">
<xs:annotation>
<xs:documentation><![CDATA[Controls browser autocomplete behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the input element, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxlength">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of characters that may be entered in this field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus and its value has been modified since gaining focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved within input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved away from input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved onto input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onselect">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when text within input element is selected by user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Flag indicating that this input element will prevent changes by the user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="size">
<xs:annotation>
<xs:documentation><![CDATA[Number of characters used to determine the width of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="placeholder">
<xs:annotation>
<xs:documentation><![CDATA[The placeholder attribute specifies a short hint that describes the expected value of an input field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="completeMethod">
<xs:annotation>
<xs:documentation><![CDATA[Method providing suggestions.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the iterator used in pojo based suggestion.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of the item.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemValue">
<xs:annotation>
<xs:documentation><![CDATA[Value of the item.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxResults">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of results to be displayed. Default is unlimited.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minQueryLength">
<xs:annotation>
<xs:documentation><![CDATA[Number of characters to be typed before starting to query. Default is 1.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="queryDelay">
<xs:annotation>
<xs:documentation><![CDATA[Delay to wait in milliseconds before sending each query to the server. Default is 300.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="forceSelection">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, autoComplete only accepts input from the selection list. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollHeight">
<xs:annotation>
<xs:documentation><![CDATA[Defines the height of the viewport for autocomplete suggestions.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectDuration">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dropdown">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="panelStyle">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="panelStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="multiple">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemtipMyPosition">
<xs:annotation>
<xs:documentation><![CDATA[Position of itemtip with respect to item. Default is "left top".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemtipAtPosition">
<xs:annotation>
<xs:documentation><![CDATA[Position of item with respect to item. Default is "right bottom".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cache">
<xs:annotation>
<xs:documentation><![CDATA[When enabled autocomplete caches the searched result list.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cacheTimeout">
<xs:annotation>
<xs:documentation><![CDATA[Timeout value for cached results.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="emptyMessage">
<xs:annotation>
<xs:documentation><![CDATA[Text to display when there is no data to display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="appendTo">
<xs:annotation>
<xs:documentation><![CDATA[Appends the overlay to the element defined by search expression. Defaults to document body.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resultsMessage">
<xs:annotation>
<xs:documentation><![CDATA[Hint text for screen readers to provide information about the search results. Default is "{0} results found, use arrow keys to navigate".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="groupBy">
<xs:annotation>
<xs:documentation><![CDATA[Value to group items in categories.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="queryEvent">
<xs:annotation>
<xs:documentation><![CDATA[Event to initiate the query, valid values are "keyup" and "enter".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dropdownMode">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the behavior dropdown button. Default "blank" mode
            sends an empty string and "current" mode sends the input value.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoHighlight">
<xs:annotation>
<xs:documentation><![CDATA[Highlights the first suggested item automatically. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selectLimit">
<xs:annotation>
<xs:documentation><![CDATA[Limits the selection. Default is unlimited.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="inputStyle">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="inputStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="groupByTooltip">
<xs:annotation>
<xs:documentation><![CDATA[Tooltip to display on group headers.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="my">
<xs:annotation>
<xs:documentation><![CDATA[Position of panel with respect to input Default is "left top".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="at">
<xs:annotation>
<xs:documentation><![CDATA[Position of input with respect to panel Default is "left bottom".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="active">
<xs:annotation>
<xs:documentation><![CDATA[Defines if autocomplete functionality is enabled. Default is true and a false value simply turns the component into a simple inputtext.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Input field type. Default is text.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="moreText">
<xs:annotation>
<xs:documentation><![CDATA[The text shown in panel when the suggested list is greater than maxResults.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="barcode">
<xs:annotation>
<xs:documentation><![CDATA[Barcode component is used to display various barcode formats.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Barcode</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.BarcodeRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Type of the barcode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cache">
<xs:annotation>
<xs:documentation><![CDATA[Controls browser caching mode of the resource. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="format">
<xs:annotation>
<xs:documentation><![CDATA[Format of the generated barcode, valid values are png (default) and svg.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="orientation">
<xs:annotation>
<xs:documentation><![CDATA[The barcode orientation in terms of angle (0, 90, 180, 270).]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Binary data to stream or context relative path.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate text for the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[Width of the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[Height of the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Title of the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction of the text displayed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[Language code.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ismap">
<xs:annotation>
<xs:documentation><![CDATA[Specifies to use a server-side image map.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="usemap">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side map.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[onclick dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[ondblclick dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[onkeydown dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[onkeypress dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[onkeyup dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[onmousedown dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[onmousemove dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[onmouseout dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[onmouseover dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[onmouseup dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="blockUI">
<xs:annotation>
<xs:documentation><![CDATA[BlockUI blocks JSF components during ajax processing.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.BlockUI</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.BlockUIRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="trigger">
<xs:annotation>
<xs:documentation><![CDATA[Identifier of component(s) to bind the block UI.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="block">
<xs:annotation>
<xs:documentation><![CDATA[Component whose UI to block.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="blocked">
<xs:annotation>
<xs:documentation><![CDATA[Blocks the ui by default when enabled.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animate">
<xs:annotation>
<xs:documentation><![CDATA[When disabled, Displays block without animation effect]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="breadCrumb">
<xs:annotation>
<xs:documentation><![CDATA[Breadcrumb is a navigation component that provides contextual information about page hierarchy in the workflow.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.BreadCrumb</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.BreadCrumbRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[MenuModel instance to create menus programmatically.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="homeDisplay">
<xs:annotation>
<xs:documentation><![CDATA[Defines display mode of root link, valid values are "icon" default and "text".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="button">
<xs:annotation>
<xs:documentation><![CDATA[Button is an extension to the standard h:button component with skinning capabilities.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Button</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ButtonRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component than can be either an EL expression of a literal text.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="outcome">
<xs:annotation>
<xs:documentation><![CDATA[Used to resolve a navigation case.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="includeViewParams">
<xs:annotation>
<xs:documentation><![CDATA[Whether to include page parameters in target URI. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="fragment">
<xs:annotation>
<xs:documentation><![CDATA[Identifier of the target page which should be scrolled to.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key that when pressed transfers focus to button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate textual description.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="image">
<xs:annotation>
<xs:documentation><![CDATA[Style class for button icon.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[Code describing the language used in the generated markup for this component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip informaton.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Makes button read only.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button loses focus and its value has been modified since gaining focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is pressed down over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved within button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved away from button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved onto button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is released over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="icon">
<xs:annotation>
<xs:documentation><![CDATA[Icon of the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="iconPos">
<xs:annotation>
<xs:documentation><![CDATA[Position of the icon, default value is left.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="href">
<xs:annotation>
<xs:documentation><![CDATA[Resource to link to.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="target">
<xs:annotation>
<xs:documentation><![CDATA[The window target. Default _self.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="escape">
<xs:annotation>
<xs:documentation><![CDATA[Defines if label of the component is escaped or not.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="inline">
<xs:annotation>
<xs:documentation><![CDATA[Displays button inline instead of fitting the content width, only used by mobile.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disableClientWindow">
<xs:annotation>
<xs:documentation><![CDATA[Disable appending the 
             on the rendering of this element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="cache">
<xs:annotation>
<xs:documentation><![CDATA[Cache component is used to reduce page load time by caching the content after initial rendering.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Cache</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.UICacheRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables caching.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="region">
<xs:annotation>
<xs:documentation><![CDATA[Unique id of the cache region, defaults to view id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="key">
<xs:annotation>
<xs:documentation><![CDATA[Unique id of the cache entry in region, defaults to client id of component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="processEvents">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, lifecycle events such as button actions are executed. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="calendar">
<xs:annotation>
<xs:documentation><![CDATA[Calendar is an input component used to provide a date. Other than basic features calendar supports paging, localization, ajax selection and more.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Calendar</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.CalendarRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key to transfer focus to the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate textual description of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autocomplete">
<xs:annotation>
<xs:documentation><![CDATA[Controls browser autocomplete behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the input element, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxlength">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of characters that may be entered in this field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus and its value has been modified since gaining focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved within input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved away from input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved onto input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onselect">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when text within input element is selected by user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Flag indicating that this input element will prevent changes by the user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="size">
<xs:annotation>
<xs:documentation><![CDATA[Number of characters used to determine the width of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="placeholder">
<xs:annotation>
<xs:documentation><![CDATA[The placeholder attribute specifies a short hint that describes the expected value of an input field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="mindate">
<xs:annotation>
<xs:documentation><![CDATA[Sets calendar's minimum visible date.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxdate">
<xs:annotation>
<xs:documentation><![CDATA[Sets calendar's maximum visible date.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="pages">
<xs:annotation>
<xs:documentation><![CDATA[Enables multiple page rendering.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="mode">
<xs:annotation>
<xs:documentation><![CDATA[Defines how the calendar will be displayed. Default is popup]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="pattern">
<xs:annotation>
<xs:documentation><![CDATA[DateFormat pattern for localization.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="locale">
<xs:annotation>
<xs:documentation><![CDATA[Locale to be used for labels and conversion.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="navigator">
<xs:annotation>
<xs:documentation><![CDATA[Enables month/year navigator. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeZone">
<xs:annotation>
<xs:documentation><![CDATA[String or a java.util.TimeZone instance to specify the timezone used for date conversion, defaults to TimeZone.getDefault()]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonlyInput">
<xs:annotation>
<xs:documentation><![CDATA[Makes input text of a popup calendar readonly. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showButtonPanel">
<xs:annotation>
<xs:documentation><![CDATA[Visibility of button panel containing today and done buttons. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[Effect to use when displaying and showing the popup calendar.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectDuration">
<xs:annotation>
<xs:documentation><![CDATA[Duration of the effect. Default is normal.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showOn">
<xs:annotation>
<xs:documentation><![CDATA[Client side event that displays the popup calendar.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showWeek">
<xs:annotation>
<xs:documentation><![CDATA[Displays the week number next to each week. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabledWeekends">
<xs:annotation>
<xs:documentation><![CDATA[Disables weekend columns. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showOtherMonths">
<xs:annotation>
<xs:documentation><![CDATA[Displays days belonging to other months. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selectOtherMonths">
<xs:annotation>
<xs:documentation><![CDATA[Enables selection of days belonging to other months. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="yearRange">
<xs:annotation>
<xs:documentation><![CDATA[Year range for the navigator, default is "c-10:c+10"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeOnly">
<xs:annotation>
<xs:documentation><![CDATA[Shows only time picker without date.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stepHour">
<xs:annotation>
<xs:documentation><![CDATA[Hour steps, default is 1.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stepMinute">
<xs:annotation>
<xs:documentation><![CDATA[Minute steps, default is 1.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stepSecond">
<xs:annotation>
<xs:documentation><![CDATA[Second steps, default is 1.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minHour">
<xs:annotation>
<xs:documentation><![CDATA[Minimum boundary for hour selection. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxHour">
<xs:annotation>
<xs:documentation><![CDATA[Maximum boundary for hour selection. Default is 23.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minMinute">
<xs:annotation>
<xs:documentation><![CDATA[Minimum boundary for minute selection. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxMinute">
<xs:annotation>
<xs:documentation><![CDATA[Maximum boundary for minute selection. Default is 59.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minSecond">
<xs:annotation>
<xs:documentation><![CDATA[Minimum boundary for second selection. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxSecond">
<xs:annotation>
<xs:documentation><![CDATA[Maximum boundary for second selection. Default is 59.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="pagedate">
<xs:annotation>
<xs:documentation><![CDATA[Sets the initial date when value is not populated.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="beforeShowDay">
<xs:annotation>
<xs:documentation><![CDATA[Callback to execute before displaying a date, used to customize date display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="mask">
<xs:annotation>
<xs:documentation><![CDATA[Defines if a mask should be applied to the input field. Default value is "false" and valid values to enable are "true" that uses the pattern as the mask or a custom template. Refer to
            inputMask component for more information about custom templates.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeControlType">
<xs:annotation>
<xs:documentation><![CDATA[Defines the type of element to use for time picker, valid values are "slider" , "select" and "custom"(with "timeControlObject" attribute).]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="beforeShow">
<xs:annotation>
<xs:documentation><![CDATA[Callback to execute before displaying calendar, element and calendar instance are passed as parameters.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maskSlotChar">
<xs:annotation>
<xs:documentation><![CDATA[PlaceHolder in mask template.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maskAutoClear">
<xs:annotation>
<xs:documentation><![CDATA[Clears the field on blur when incomplete input is entered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeControlObject">
<xs:annotation>
<xs:documentation><![CDATA[Client side object to use in custom timeControlType.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeInput">
<xs:annotation>
<xs:documentation><![CDATA[Allows direct input in time field. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showHour">
<xs:annotation>
<xs:documentation><![CDATA[Whether to show the hour control, valid values are "true" and "false".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showMinute">
<xs:annotation>
<xs:documentation><![CDATA[Whether to show the minute control, valid values are "true" and "false".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showSecond">
<xs:annotation>
<xs:documentation><![CDATA[Whether to show the second control, valid values are "true" and "false".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showMillisec">
<xs:annotation>
<xs:documentation><![CDATA[Whether to show the millisecond control, valid values are "true" and "false".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showTodayButton">
<xs:annotation>
<xs:documentation><![CDATA[Whether to show the "Current Date" button if showButtonPanel is rendered. Default is "true".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="buttonTabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the button in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="inputStyle">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the input element. Used when mode is popup.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="inputStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the input element. Used when mode is popup.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="captcha">
<xs:annotation>
<xs:documentation><![CDATA[Captcha is a form validation component based on Recaptcha API.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Captcha</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.CaptchaRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="theme">
<xs:annotation>
<xs:documentation><![CDATA[Theme of the captcha. Default is light.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="language">
<xs:annotation>
<xs:documentation><![CDATA[Key of the supported languages. Default is "en".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the input element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="callback">
<xs:annotation>
<xs:documentation><![CDATA[Callback executed when the user submits a successful captcha response.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="expired">
<xs:annotation>
<xs:documentation><![CDATA[Callback executed when the captcha response expires and the user needs to solve a new captcha.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="carousel">
<xs:annotation>
<xs:documentation><![CDATA[Carousel is a multi purpose component to display a set of data or general content with slide effects.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Carousel</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.CarouselRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Datasource of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the iterator variable used to refer each data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="firstVisible">
<xs:annotation>
<xs:documentation><![CDATA[Index of the first visible item.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="numVisible">
<xs:annotation>
<xs:documentation><![CDATA[Number of visible items per page. Default is 3.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="circular">
<xs:annotation>
<xs:documentation><![CDATA[Sets continuous scrolling. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="vertical">
<xs:annotation>
<xs:documentation><![CDATA[Sets vertical scrolling. Default is false]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoPlayInterval">
<xs:annotation>
<xs:documentation><![CDATA[Sets the time in milliseconds to have Carousel start scrolling automatically after being initialized. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="pageLinks">
<xs:annotation>
<xs:documentation><![CDATA[Defines number of pageLinks of paginator.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[Name of the animation effect slide or fade. Default is slide.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="easing">
<xs:annotation>
<xs:documentation><![CDATA[Name of the animation effect. Default is easeInOutCirc.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectDuration">
<xs:annotation>
<xs:documentation><![CDATA[Sets the speed of the scrolling animation in milliseconds. Default is 500.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dropdownTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Text format of the pager dropdown elements. Default is "{page}".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemStyle">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of each item container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of each item container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="headerText">
<xs:annotation>
<xs:documentation><![CDATA[Shortcut for header facet.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="footerText">
<xs:annotation>
<xs:documentation><![CDATA[Shortcut for footer facet.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="responsive">
<xs:annotation>
<xs:documentation><![CDATA[In responsive mode, carousel adjusts its content based on screen size.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="breakpoint">
<xs:annotation>
<xs:documentation><![CDATA[Breakpoint value in pixels to switch between small and large viewport. Default is 640]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="cellEditor">
<xs:annotation>
<xs:documentation><![CDATA[CellEditor is a helper component of datatable used for incell editing.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.CellEditor</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.CellEditorRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="chart">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Chart</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ChartRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Type of the chart.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[Model of the chart.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="responsive">
<xs:annotation>
<xs:documentation><![CDATA[In responsive mode, chart is redrawn when window is resized.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="checkbox">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Checkbox</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.CheckboxRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemIndex">
<xs:annotation>
<xs:documentation><![CDATA[Index of the selectItem of the SelectManyCheckbox.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute on state change.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Id of the SelectManyCheckbox component to attach to.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[The tabindex attribute specifies the tab order of an element when the "tab" button is used for navigating.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="chips">
<xs:annotation>
<xs:documentation><![CDATA[Chips is used to enter multiple values on an inputfield.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Chips</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ChipsRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key to transfer focus to the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate textual description of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autocomplete">
<xs:annotation>
<xs:documentation><![CDATA[Controls browser autocomplete behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the input element, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxlength">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of characters that may be entered in this field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus and its value has been modified since gaining focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved within input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved away from input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved onto input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onselect">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when text within input element is selected by user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Flag indicating that this input element will prevent changes by the user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="size">
<xs:annotation>
<xs:documentation><![CDATA[Number of characters used to determine the width of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="placeholder">
<xs:annotation>
<xs:documentation><![CDATA[The placeholder attribute specifies a short hint that describes the expected value of an input field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="max">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of entries allowed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="clock">
<xs:annotation>
<xs:documentation><![CDATA[Clock displays server or client datetime live.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Clock</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ClockRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="pattern">
<xs:annotation>
<xs:documentation><![CDATA[Datetime format.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="mode">
<xs:annotation>
<xs:documentation><![CDATA[Mode of the client, valid values are client and server.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoSync">
<xs:annotation>
<xs:documentation><![CDATA[Syncs time periodically in server mode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="syncInterval">
<xs:annotation>
<xs:documentation><![CDATA[Defines the sync interval in autoSync mode, default is 60000 milliseconds.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeZone">
<xs:annotation>
<xs:documentation><![CDATA[String or a java.util.TimeZone instance to specify the timezone used for date conversion, defaults to TimeZone.getDefault()]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="colorPicker">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.ColorPicker</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ColorPickerRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="mode">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="column">
<xs:annotation>
<xs:documentation><![CDATA[Column is an extended version of the standard column used by various PrimeFaces components like datatable, treetable and more.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Column</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ColumnRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortBy">
<xs:annotation>
<xs:documentation><![CDATA[Property to be used for sorting.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the column.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the column.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortFunction">
<xs:annotation>
<xs:documentation><![CDATA[Custom pluggable sortFunction.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterBy">
<xs:annotation>
<xs:documentation><![CDATA[Property to be used for filtering.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterStyle">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the filter element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the filter element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterOptions">
<xs:annotation>
<xs:documentation><![CDATA[A collection of selectitems for filter dropdown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterMatchMode">
<xs:annotation>
<xs:documentation><![CDATA[Match mode for filtering.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterPosition">
<xs:annotation>
<xs:documentation><![CDATA[Location of the column filter with respect to header content. Options are 'bottom'(default) and 'top'.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowspan">
<xs:annotation>
<xs:documentation><![CDATA[Defines the number of rows the column spans.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="colspan">
<xs:annotation>
<xs:documentation><![CDATA[Defines the number of columns the column spans.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="headerText">
<xs:annotation>
<xs:documentation><![CDATA[Shortcut for header facet.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="footerText">
<xs:annotation>
<xs:documentation><![CDATA[Shortcut for footer facet.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selectionMode">
<xs:annotation>
<xs:documentation><![CDATA[Enables selection mode, valid values are "single" and "multiple".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterMaxLength">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of characters for an input filter.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resizable">
<xs:annotation>
<xs:documentation><![CDATA[Specifies resizable feature at column level. Datatable's resizableColumns must be enabled to use this option.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="exportable">
<xs:annotation>
<xs:documentation><![CDATA[Defines if the column should be exported by dataexporter.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterValue">
<xs:annotation>
<xs:documentation><![CDATA[Value of the filter field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[Width of the column in pixels or percentage.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="toggleable">
<xs:annotation>
<xs:documentation><![CDATA[Defines if panel is toggleable by columnToggler component. Default value is true and a false value marks the column as static.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterFunction">
<xs:annotation>
<xs:documentation><![CDATA[Custom implementation to filter a value against a constraint.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="field">
<xs:annotation>
<xs:documentation><![CDATA[Name of the field to pass lazy load method for filtering and sorting. If not specified, filterBy-sortBy values are used to identify the field name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="priority">
<xs:annotation>
<xs:documentation><![CDATA[Priority of the column defined as an integer, lower values have more priority.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortable">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to mark column as sortable.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterable">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to mark column as filterable.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible">
<xs:annotation>
<xs:documentation><![CDATA[Controls the visibilty of the column, default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selectRow">
<xs:annotation>
<xs:documentation><![CDATA[Whether clicking the column selects the row when datatable has row selection enabled, default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ariaHeaderText">
<xs:annotation>
<xs:documentation><![CDATA[Label to read by screen readers, when not specified headerText is used.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="exportFunction">
<xs:annotation>
<xs:documentation><![CDATA[Custom pluggable exportFunction.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="groupRow">
<xs:annotation>
<xs:documentation><![CDATA[Speficies whether to group rows based on the column data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="columnGroup">
<xs:annotation>
<xs:documentation><![CDATA[ColumnGroup is used by datatable for grouping.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.ColumnGroup</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Type of group, valid values are header and footer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="columns">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Columns</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var" use="required">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortBy">
<xs:annotation>
<xs:documentation><![CDATA[Property to be used for sorting.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the column.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the column.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortFunction">
<xs:annotation>
<xs:documentation><![CDATA[Custom pluggable sortFunction.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterBy">
<xs:annotation>
<xs:documentation><![CDATA[Property to be used for filtering.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterStyle">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the filter element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the filter element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterOptions">
<xs:annotation>
<xs:documentation><![CDATA[A collection of selectitems for filter dropdown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterMatchMode">
<xs:annotation>
<xs:documentation><![CDATA[Match mode for filtering.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterPosition">
<xs:annotation>
<xs:documentation><![CDATA[Location of the column filter with respect to header content. Options are 'bottom'(default) and 'top'.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterValue">
<xs:annotation>
<xs:documentation><![CDATA[Value of the filter field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowspan">
<xs:annotation>
<xs:documentation><![CDATA[Defines the number of rows the column spans.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="colspan">
<xs:annotation>
<xs:documentation><![CDATA[Defines the number of columns the column spans.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="headerText">
<xs:annotation>
<xs:documentation><![CDATA[Shortcut for header facet.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="footerText">
<xs:annotation>
<xs:documentation><![CDATA[Shortcut for footer facet.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterMaxLength">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of characters for an input filter.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resizable">
<xs:annotation>
<xs:documentation><![CDATA[Specifies resizable feature at column level. Datatable's resizableColumns must be enabled to use this option.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="exportable">
<xs:annotation>
<xs:documentation><![CDATA[Defines if the column should be exported by dataexporter.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="columnIndexVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of iterator to refer each row index.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[Width of the column in pixels or percentage.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="toggleable">
<xs:annotation>
<xs:documentation><![CDATA[Defines if panel is toggleable by columnToggler component. Default value is true and a false value marks the column as static.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterFunction">
<xs:annotation>
<xs:documentation><![CDATA[Custom implementation to filter a value against a constraint.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="field">
<xs:annotation>
<xs:documentation><![CDATA[Name of the field to pass lazy load method for filtering and sorting. If not specified, filterBy-sortBy values are used to identify the field name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="priority">
<xs:annotation>
<xs:documentation><![CDATA[Priority of the column defined as an integer, lower values have more priority.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortable">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to mark column as sortable.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterable">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to mark column as filterable.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible">
<xs:annotation>
<xs:documentation><![CDATA[Controls the visibilty of the column, default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selectRow">
<xs:annotation>
<xs:documentation><![CDATA[Whether clicking the column selects the row when datatable has row selection enabled, default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ariaHeaderText">
<xs:annotation>
<xs:documentation><![CDATA[Label to read by screen readers, when not specified headerText is used.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="exportFunction">
<xs:annotation>
<xs:documentation><![CDATA[Custom pluggable exportFunction.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="groupRow">
<xs:annotation>
<xs:documentation><![CDATA[Speficies whether to group rows based on the column data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="columnToggler">
<xs:annotation>
<xs:documentation><![CDATA[ColumnToggler is a helper component for datatable to toggle visibility of columns.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.ColumnToggler</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ColumnTogglerRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="trigger" use="required">
<xs:annotation>
<xs:documentation><![CDATA[A search expression resolving to a component to get attached to.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="datasource" use="required">
<xs:annotation>
<xs:documentation><![CDATA[A search expression resolving to a DataTable component whose columns to be toggled.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="commandButton">
<xs:annotation>
<xs:documentation><![CDATA[CommandButton is an extended version of standard JSF commandButton with ajax and skinning features.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.CommandButton</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.CommandButtonRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Label of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="actionListener">
<xs:annotation>
<xs:documentation><![CDATA[An actionlistener to process when command is executed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="action">
<xs:annotation>
<xs:documentation><![CDATA[A method expression or a string outcome to process when command is executed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value that determines the phaseId of the action event, 
    when true actions are processed at "Apply Request Values", when false at "Invoke Application" phase.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ajax">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the submit mode, when set to true (default), submit would be made with Ajax.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="async">
<xs:annotation>
<xs:documentation><![CDATA[When set to true, ajax requests are not queued.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="process">
<xs:annotation>
<xs:documentation><![CDATA[Component(s) to process partially instead of whole view.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="update">
<xs:annotation>
<xs:documentation><![CDATA[Component(s) to be updated with ajax.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onstart">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute before ajax request is begins.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="oncomplete">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when ajax request is completed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onerror">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when ajax request fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onsuccess">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when ajax request succeeds.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="global">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether to trigger ajaxStatus or not.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="delay">
<xs:annotation>
<xs:documentation><![CDATA[If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeout">
<xs:annotation>
<xs:documentation><![CDATA[Defines the timeout for the ajax request.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmit">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, only values related to partially processed components would be serialized for ajax
            instead of whole form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resetValues">
<xs:annotation>
<xs:documentation><![CDATA[If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ignoreAutoUpdate">
<xs:annotation>
<xs:documentation><![CDATA[If true, components which autoUpdate="true" will not be updated for this request. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key that when pressed transfers focus to the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate textual description of the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="image">
<xs:annotation>
<xs:documentation><![CDATA[Style class representing the button icon.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[Code describing the language used in the generated markup for this component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the button element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip informaton.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Sets the behavior of the button. Default is submit.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the button element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the button element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button loses focus and its value has been modified since gaining focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is pressed down over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved within button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved away from button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved onto button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is released over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onselect">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when text within button is selected by user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="icon">
<xs:annotation>
<xs:documentation><![CDATA[Icon of the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="iconPos">
<xs:annotation>
<xs:documentation><![CDATA[Position of the icon, default value is left.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="inline">
<xs:annotation>
<xs:documentation><![CDATA[Displays button inline instead of fitting the content width, only used by mobile.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="escape">
<xs:annotation>
<xs:documentation><![CDATA[Defines if label of the component is escaped or not.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validateClient">
<xs:annotation>
<xs:documentation><![CDATA[When set to true client side validation is enabled, global setting is required to be enabled as a prerequisite.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmitFilter">
<xs:annotation>
<xs:documentation><![CDATA[Selector to use when partial submit is on, default is ":input" to select all descendant inputs of a partially processed components.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="form">
<xs:annotation>
<xs:documentation><![CDATA[Form to serialize for an ajax request. Default is the enclosing form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="renderDisabledClick">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, click event can be added to disabled button]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="commandLink">
<xs:annotation>
<xs:documentation><![CDATA[CommandLink extends standard JSF commandLink with Ajax capabilities.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.CommandLink</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.CommandLinkRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Label of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="actionListener">
<xs:annotation>
<xs:documentation><![CDATA[An actionlistener to process when command is executed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="action">
<xs:annotation>
<xs:documentation><![CDATA[A method expression or a string outcome to process when command is executed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value that determines the phaseId of the action event, 
    when true actions are processed at "Apply Request Values", when false at "Invoke Application" phase.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ajax">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the submit mode, when set to true (default), submit would be made with Ajax.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="async">
<xs:annotation>
<xs:documentation><![CDATA[When set to true, ajax requests are not queued.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="process">
<xs:annotation>
<xs:documentation><![CDATA[Component(s) to process partially instead of whole view.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="update">
<xs:annotation>
<xs:documentation><![CDATA[Component(s) to be updated with ajax.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onstart">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute before ajax request is begins.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="oncomplete">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when ajax request is completed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onerror">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when ajax request fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onsuccess">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when ajax request succeeds.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="global">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether to trigger ajaxStatus or not.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="delay">
<xs:annotation>
<xs:documentation><![CDATA[If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeout">
<xs:annotation>
<xs:documentation><![CDATA[Defines the timeout for the ajax request.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmit">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, only values related to partially processed components would be serialized for ajax
            instead of whole form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resetValues">
<xs:annotation>
<xs:documentation><![CDATA[If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ignoreAutoUpdate">
<xs:annotation>
<xs:documentation><![CDATA[If true, components which autoUpdate="true" will not be updated for this request. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key that when pressed transfers focus to the link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="charset">
<xs:annotation>
<xs:documentation><![CDATA[Character encoding of the resource designated by this hyperlink.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="coords">
<xs:annotation>
<xs:documentation><![CDATA[Position and shape of the hot spot on the screen for client use in image maps.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="hreflang">
<xs:annotation>
<xs:documentation><![CDATA[Languae code of the resource designated by the link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rel">
<xs:annotation>
<xs:documentation><![CDATA[Relationship from the current document to the anchor specified by the link, values are provided by a space-separated list of link types.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rev">
<xs:annotation>
<xs:documentation><![CDATA[A reverse link from the anchor specified by this link to the current document, values are provided by a space-separated list of link types.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="shape">
<xs:annotation>
<xs:documentation><![CDATA[Shape of hot spot on the screen, valid values are default, rect, circle and poly.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the button element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="target">
<xs:annotation>
<xs:documentation><![CDATA[Name of a frame where the resource targeted by this link will be displayed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip informaton.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Type of resource referenced by the link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style to be applied on the anchor element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[StyleClass to be applied on the anchor element]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when link loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when link is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when link is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when link receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is pressed down over link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved within link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved away from link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved onto link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is released over link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validateClient">
<xs:annotation>
<xs:documentation><![CDATA[When set to true client side validation is enabled, global setting is required to be enabled as a prerequisite.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmitFilter">
<xs:annotation>
<xs:documentation><![CDATA[Selector to use when partial submit is on, default is ":input" to select all descendant inputs of a partially processed components.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="form">
<xs:annotation>
<xs:documentation><![CDATA[Form to serialize for an ajax request. Default is the enclosing form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="confirmDialog">
<xs:annotation>
<xs:documentation><![CDATA[ConfirmDialog is a replacement to the legacy javascript confirmation box. 
      Skinning, customization and avoiding popup blockers are notabled advantages over classic javascript confirmation.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.ConfirmDialog</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ConfirmDialogRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="message">
<xs:annotation>
<xs:documentation><![CDATA[Text to be displayed in body. Required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="header">
<xs:annotation>
<xs:documentation><![CDATA[Text for the header.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="severity">
<xs:annotation>
<xs:documentation><![CDATA[Message severity for the dislayed icon. Default is alert.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[Width of the dialog in pixels. Default is auto.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[Height of the dialog.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inner style of the dialog container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the dialog container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closable">
<xs:annotation>
<xs:documentation><![CDATA[Defines if close icon should be displayed or not. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="appendTo">
<xs:annotation>
<xs:documentation><![CDATA[Alternative to appendToBody. Appends the dialog to the given search expression.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible">
<xs:annotation>
<xs:documentation><![CDATA[Sets dialogs visibility. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showEffect">
<xs:annotation>
<xs:documentation><![CDATA[Effect to use when showing the dialog.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="hideEffect">
<xs:annotation>
<xs:documentation><![CDATA[Effect to use when hiding the dialog.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closeOnEscape">
<xs:annotation>
<xs:documentation><![CDATA[Defines if dialog should close when escape key is pressed. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Defines text direction, valid values are "ltr" (default) and "rtl".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="global">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, confirmDialog becomes a shared for other components that require confirmation.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="responsive">
<xs:annotation>
<xs:documentation><![CDATA[In responsive mode, dialog adjusts itself based on screen width.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="contentFlow">
<xs:annotation>
<xs:documentation><![CDATA[ContentFlow is used to display a collection of items.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.ContentFlow</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ContentFlowRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Collection of items.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Name of the iterator to display an item.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="contextMenu">
<xs:annotation>
<xs:documentation><![CDATA[ContextMenu provides an overlay menu displayed on mouse right-click event.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.ContextMenu</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ContextMenuRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Id of the component to attach to.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[Menu model instance to create menu programmatically.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="nodeType">
<xs:annotation>
<xs:documentation><![CDATA[Type of tree nodes to get attached.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="event">
<xs:annotation>
<xs:documentation><![CDATA[Event to bind the contextmenu default is right click.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="beforeShow">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute before context menu is shown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selectionMode">
<xs:annotation>
<xs:documentation><![CDATA[Defines the selection behavior. Valid values are "single" and "multiple" (default).]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="targetFilter">
<xs:annotation>
<xs:documentation><![CDATA[Selector to filter the elements to attach the menu. Default is null.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="dashboard">
<xs:annotation>
<xs:documentation><![CDATA[Dashboard provides a portal like layout with drag-drop based reorder capabilities.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Dashboard</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.DashboardRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[Dashboard model instance representing the layout of the UI.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables reordering.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the dashboard container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the dashboard container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="dataGrid">
<xs:annotation>
<xs:documentation><![CDATA[DataGrid displays a collection of data in grid layout. Ajax Pagination is a built-in feature and paginator UI is fully customizable via various options like paginatorTemplate, rowPerPageOptions, pageLinks and more.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.DataGrid</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.DataGridRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Datasource of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the iterator variable used to refer each data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rows">
<xs:annotation>
<xs:documentation><![CDATA[Number of rows to display per page. Default value is 0 meaning to display all data available.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="first">
<xs:annotation>
<xs:documentation><![CDATA[Index of the first data to display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="columns">
<xs:annotation>
<xs:documentation><![CDATA[Number of columns of grid. Default is 3.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginator">
<xs:annotation>
<xs:documentation><![CDATA[Enables pagination.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginatorTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the paginator.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowsPerPageTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the rowsPerPage dropdown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowsPerPageLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label for rowsPerPage dropdown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="currentPageReportTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the currentPageReport UI.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="pageLinks">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of page links to display. Default is 10.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginatorPosition">
<xs:annotation>
<xs:documentation><![CDATA[Position of the paginator. Default is both.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginatorAlwaysVisible">
<xs:annotation>
<xs:documentation><![CDATA[Defines if paginator should be hidden if total data count is less than number of rows per page. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowIndexVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of iterator to refer each row index.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="emptyMessage">
<xs:annotation>
<xs:documentation><![CDATA[Text to display when there is no data to display. Default is "No records found."]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lazy">
<xs:annotation>
<xs:documentation><![CDATA[Defines if lazy loading is enabled for the data component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="layout">
<xs:annotation>
<xs:documentation><![CDATA[Layout approach to use, valid values are "tabular" (default) and "grid" for responsive grid.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowStatePreserved">
<xs:annotation>
<xs:documentation><![CDATA[Keeps state of its children on a per-row basis. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="dataList">
<xs:annotation>
<xs:documentation><![CDATA[DataList presents a collection of data in list layout with several display types.
      Ajax Pagination is a built-in feature and paginator UI is fully customizable via various options like paginatorTemplate, rowsPerPageOptions, pageLinks and more.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.DataList</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.DataListRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Datasource of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the iterator variable used to refer each data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rows">
<xs:annotation>
<xs:documentation><![CDATA[Number of rows to display per page. Default value is 0 meaning to display all data available.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="first">
<xs:annotation>
<xs:documentation><![CDATA[Index of the first data to display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Type of the list, valid values are "unordered", "ordered" and "definition". Default is unordered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemType">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the list item type.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginator">
<xs:annotation>
<xs:documentation><![CDATA[Enables pagination. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginatorTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the paginator.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowsPerPageTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the rowsPerPage dropdown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowsPerPageLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label for rowsPerPage dropdown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="currentPageReportTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the currentPageReport UI.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="pageLinks">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of page links to display. Default is 10.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginatorPosition">
<xs:annotation>
<xs:documentation><![CDATA[Position of the paginator. Default is both.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginatorAlwaysVisible">
<xs:annotation>
<xs:documentation><![CDATA[Defines if paginator should be hidden if total data count is less than number of rows per page.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowIndexVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of iterator to refer each row index.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="varStatus">
<xs:annotation>
<xs:documentation><![CDATA[Name of the exported request scoped variable for the status of the iteration.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lazy">
<xs:annotation>
<xs:documentation><![CDATA[Defines if lazy loading is enabled for the data component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="emptyMessage">
<xs:annotation>
<xs:documentation><![CDATA[Text to display when there is no data to display. Default is "No records found."]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of an item in list. This option is useful to assign specific styles to certain items using an EL expression.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowStatePreserved">
<xs:annotation>
<xs:documentation><![CDATA[Keeps state of its children on a per-row basis. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="dataScroller">
<xs:annotation>
<xs:documentation><![CDATA[DataScroller displays a collection of data featuring on demand loading using scroll.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.DataScroller</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.DataScrollerRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Datasource of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the iterator variable used to refer each data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rows">
<xs:annotation>
<xs:documentation><![CDATA[Number of rows to display per page. Default value is 0 meaning to display all data available.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="first">
<xs:annotation>
<xs:documentation><![CDATA[Index of the first data to display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="chunkSize">
<xs:annotation>
<xs:documentation><![CDATA[Number of items to fetch.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowIndexVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of iterator to refer each row index.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="mode">
<xs:annotation>
<xs:documentation><![CDATA[Defines the target to listen for scroll event, valid values are "document" (default) and "inline".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollHeight">
<xs:annotation>
<xs:documentation><![CDATA[Defines pixel height of the viewport in inline mode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lazy">
<xs:annotation>
<xs:documentation><![CDATA[Defines if lazy loading is enabled for the data component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="buffer">
<xs:annotation>
<xs:documentation><![CDATA[Percentage height of the buffer between the bottom of the page and the scroll position to initiate
            the load for the new chunk. Value is defined in integer and default is 10 meaning load would happen after 90% of the viewport is scrolled down.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="dataTable">
<xs:annotation>
<xs:documentation><![CDATA[DataTable is an enhanced version of the standard Datatable that provides built-in solutions to many commons use cases like paging, sorting, selection, lazy loading, filtering and more.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.DataTable</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.DataTableRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Datasource of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the iterator variable used to refer each data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rows">
<xs:annotation>
<xs:documentation><![CDATA[Number of rows to display per page. Default value is 0 meaning to display all data available.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="first">
<xs:annotation>
<xs:documentation><![CDATA[Index of the first data to display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginator">
<xs:annotation>
<xs:documentation><![CDATA[Enables pagination. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginatorTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the paginator.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowsPerPageTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the rowsPerPage dropdown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowsPerPageLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label for rowsPerPage dropdown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="currentPageReportTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the currentPageReport UI.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="pageLinks">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of page links to display. Default is 10.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginatorPosition">
<xs:annotation>
<xs:documentation><![CDATA[Position of the paginator. Default is both.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginatorAlwaysVisible">
<xs:annotation>
<xs:documentation><![CDATA[Defines if paginator should be hidden if total data count is less than number of rows per page. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollable">
<xs:annotation>
<xs:documentation><![CDATA[Makes data scrollable with fixed header. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollHeight">
<xs:annotation>
<xs:documentation><![CDATA[Height for scrollable data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollWidth">
<xs:annotation>
<xs:documentation><![CDATA[Width for scrollable data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selectionMode">
<xs:annotation>
<xs:documentation><![CDATA[Enables data selection, valid values are "single" and "multiple".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selection">
<xs:annotation>
<xs:documentation><![CDATA[Reference to the selection data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowIndexVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of iterator to refer each row index.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="emptyMessage">
<xs:annotation>
<xs:documentation><![CDATA[Text to display when there is no data to display. Default is "No records found."]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="liveScroll">
<xs:annotation>
<xs:documentation><![CDATA[Enables live scrolling. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class for each row.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onExpandStart">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute before row expansion.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resizableColumns">
<xs:annotation>
<xs:documentation><![CDATA[Decides whether datatable columns are resizable or not.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortBy">
<xs:annotation>
<xs:documentation><![CDATA[Property to be used for default sorting.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortOrder">
<xs:annotation>
<xs:documentation><![CDATA[Sets sorting order. Default is "ascending"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortFunction">
<xs:annotation>
<xs:documentation><![CDATA[Custom pluggable sortFunction for default sorting.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollRows">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowKey">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of row data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterEvent">
<xs:annotation>
<xs:documentation><![CDATA[Client side event to invoke datatable filtering for input fields. Default is keyup.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterDelay">
<xs:annotation>
<xs:documentation><![CDATA[Delay to wait in milliseconds before sending each filter query. Default is 300.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tableStyle">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the table element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tableStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the table element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="draggableColumns">
<xs:annotation>
<xs:documentation><![CDATA[Decides whether datatable columns can be reordered using dragdrop.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editable">
<xs:annotation>
<xs:documentation><![CDATA[Controls incell editing.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lazy">
<xs:annotation>
<xs:documentation><![CDATA[Defines if lazy loading is enabled for the data component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filteredValue">
<xs:annotation>
<xs:documentation><![CDATA[List to keep the filtered data if filtering is enabled.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortMode">
<xs:annotation>
<xs:documentation><![CDATA[Defines sorting mode, valid values are "single" (default) and "multiple".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editMode">
<xs:annotation>
<xs:documentation><![CDATA[Defines edit mode, valid values are "row" (default) and "cell".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editingRow">
<xs:annotation>
<xs:documentation><![CDATA[Defines if cell editors of row should be displayed as editable or not. Default is false meaning display mode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cellSeparator">
<xs:annotation>
<xs:documentation><![CDATA[Separator text to use in output mode of editable cells with multiple components.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="summary">
<xs:annotation>
<xs:documentation><![CDATA[Summary attribute for WCAG.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="frozenRows">
<xs:annotation>
<xs:documentation><![CDATA[Number of rows to freeze starting from the beginning.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Defines text direction, valid values are "ltr" (default) and "rtl".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="liveResize">
<xs:annotation>
<xs:documentation><![CDATA[Columns are resized live in this mode without using a resize helper.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stickyHeader">
<xs:annotation>
<xs:documentation><![CDATA[Sticky header stays in window viewport during scrolling.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="expandedRow">
<xs:annotation>
<xs:documentation><![CDATA[Defines if row should be rendered as expanded by default.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabledSelection">
<xs:annotation>
<xs:documentation><![CDATA[Disables row selection when true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowSelectMode">
<xs:annotation>
<xs:documentation><![CDATA[Defines row select mode for checkbox based selection, valid values are new (default), add and checkbox.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowExpandMode">
<xs:annotation>
<xs:documentation><![CDATA[Defines row expand mode, valid values are "single" and "multiple" (default).]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dataLocale">
<xs:annotation>
<xs:documentation><![CDATA[Locale to be used in features such as filtering and sorting, defaults to view locale.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="nativeElements">
<xs:annotation>
<xs:documentation><![CDATA[In native mode, datatable uses native radio-checkbox elements for row selection instead of extended ones.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="frozenColumns">
<xs:annotation>
<xs:documentation><![CDATA[Number of columns to freeze, default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="draggableRows">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, rows can be reordered using dragdrop.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="caseSensitiveSort">
<xs:annotation>
<xs:documentation><![CDATA[Case sensitivity for sorting, insensitive by default.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="skipChildren">
<xs:annotation>
<xs:documentation><![CDATA[Ignores processing of children during lifecycle, improves performance if table only has output components, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabledTextSelection">
<xs:annotation>
<xs:documentation><![CDATA[Disables text selection on row click. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortField">
<xs:annotation>
<xs:documentation><![CDATA[Name of the field to pass lazy load method for sorting. If not specified, sortBy expression is used to extract the name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="initMode">
<xs:annotation>
<xs:documentation><![CDATA[Defines when the datatable is initiated at client side, valid values are "load" (default) and "immediate".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="nullSortOrder">
<xs:annotation>
<xs:documentation><![CDATA[Defines where the null values are placed in ascending sort order. Default value is "1" meaning null values are placed at the end in ascending mode and
            at beginning in descending mode. Set to "-1" for the opposite behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="reflow">
<xs:annotation>
<xs:documentation><![CDATA[Reflow mode is a responsive mode to display columns as stacked depending on screen size.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="liveScrollBuffer">
<xs:annotation>
<xs:documentation><![CDATA[Percentage height of the buffer between the bottom of the page and the scroll position to initiate
            the load for the new chunk. Value is defined in integer and default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowHover">
<xs:annotation>
<xs:documentation><![CDATA[Adds hover effect to rows, default is false. Hover is always on when selection is enabled.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowStatePreserved">
<xs:annotation>
<xs:documentation><![CDATA[Keeps state of its children on a per-row basis. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resizeMode">
<xs:annotation>
<xs:documentation><![CDATA[Defines the resize behavior, valid values are "fit" (default) and expand.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ariaRowLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label to read by screen readers on checkbox selection.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="saveOnCellBlur">
<xs:annotation>
<xs:documentation><![CDATA[Saves the changes in cell editing on blur, when set to false changes are discarded.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="clientCache">
<xs:annotation>
<xs:documentation><![CDATA[Caches the next page asynchronously, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="multiViewState">
<xs:annotation>
<xs:documentation><![CDATA[Whether to keep table state across views, defaults to false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterBy">
<xs:annotation>
<xs:documentation><![CDATA[List of FilterState objects to filter table by default.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="globalFilter">
<xs:annotation>
<xs:documentation><![CDATA[Value of the global filter to use when filtering by default.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cellEditMode">
<xs:annotation>
<xs:documentation><![CDATA[Defines the cell edit behavior, valid values are "eager" (default) and "lazy".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="expandableRowGroups">
<xs:annotation>
<xs:documentation><![CDATA[Makes row groups toggleable, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="virtualScroll">
<xs:annotation>
<xs:documentation><![CDATA[Loads data on demand as the scrollbar gets close to the bottom. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="defaultCommand">
<xs:annotation>
<xs:documentation><![CDATA[DefaultCommand defines the default command component to invoke when enter key is pressed in a form.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.DefaultCommand</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.DefaultCommandRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="target" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Identifier of the default command component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scope">
<xs:annotation>
<xs:documentation><![CDATA[Identifier of the grouping component to enable multiple default commands in a form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="diagram">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Diagram</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.DiagramRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the iterator variable used to refer each data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="dialog">
<xs:annotation>
<xs:documentation><![CDATA[Dialog is a panel component overlaying other elements. Dialog avoids popup blockers, provides customization, resizing, modality, ajax interactions and more.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Dialog</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.DialogRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="header">
<xs:annotation>
<xs:documentation><![CDATA[Text of the header.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="draggable">
<xs:annotation>
<xs:documentation><![CDATA[Specifies draggability. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resizable">
<xs:annotation>
<xs:documentation><![CDATA[Specifies resizability. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="modal">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value that specifies whether the document should be shielded with a partially transparent mask to require the user to close the Panel before being able to activate any elements in the document. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible">
<xs:annotation>
<xs:documentation><![CDATA[Sets dialogs visibility. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[Width of the dialog in pixels. Default is auto.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[Height of the dialog.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minWidth">
<xs:annotation>
<xs:documentation><![CDATA[Minimum width of a resizable dialog. Default is unl.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minHeight">
<xs:annotation>
<xs:documentation><![CDATA[Minimum height of a resizable dialog. Default is height of titlebar.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the dialog container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the dialog container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showEffect">
<xs:annotation>
<xs:documentation><![CDATA[Effect to use when showing the dialog.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="hideEffect">
<xs:annotation>
<xs:documentation><![CDATA[Effect to use when hiding the dialog.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="position">
<xs:annotation>
<xs:documentation><![CDATA[Defines where the dialog should be displayed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closable">
<xs:annotation>
<xs:documentation><![CDATA[Defines if close icon should be displayed or not.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onShow">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when dialog is displayed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onHide">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when dialog is hidden.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="appendTo">
<xs:annotation>
<xs:documentation><![CDATA[Alternative to appendToBody. Appends the dialog to the given search expression.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showHeader">
<xs:annotation>
<xs:documentation><![CDATA[Specifies visibility of header content.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="footer">
<xs:annotation>
<xs:documentation><![CDATA[Text of the footer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dynamic">
<xs:annotation>
<xs:documentation><![CDATA[Dynamic mode allows dialog to fetch it's contents before it's shown rather than on page load
            which is useful to reduce initial page load times. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minimizable">
<xs:annotation>
<xs:documentation><![CDATA[Specifies if dialog is minimizable or not. Default false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maximizable">
<xs:annotation>
<xs:documentation><![CDATA[Specifies if dialog is maximizable or not. Default false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closeOnEscape">
<xs:annotation>
<xs:documentation><![CDATA[Defines if dialog should close when escape key is pressed. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Defines text direction, valid values are "ltr" (default) and "rtl".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus">
<xs:annotation>
<xs:documentation><![CDATA[Defines which component to focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="fitViewport">
<xs:annotation>
<xs:documentation><![CDATA[Dialog size might exceeed viewport if content is bigger than viewport in terms of height. fitViewport option automatically
            adjusts height to fit dialog within the viewport.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="positionType">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether dialog will be kept in viewport on scroll (fixed) or keep its position (absolute). Default is fixed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="responsive">
<xs:annotation>
<xs:documentation><![CDATA[In responsive mode, dialog adjusts itself based on screen width.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="dock">
<xs:annotation>
<xs:documentation><![CDATA[Dock component mimics the well known dock interface of Mac OS X.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Dock</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.DockRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[MenuModel instance to create menus programmatically.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="position">
<xs:annotation>
<xs:documentation><![CDATA[Position of the dock, bottom or top. Default is bottom.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemWidth">
<xs:annotation>
<xs:documentation><![CDATA[Initial width of items. Default is 40.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxWidth">
<xs:annotation>
<xs:documentation><![CDATA[Maximum width of items. Default is 50.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="proximity">
<xs:annotation>
<xs:documentation><![CDATA[Distance to enlarge. Default is 90.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="halign">
<xs:annotation>
<xs:documentation><![CDATA[Horizontal alignment. Default is center.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="draggable">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Draggable</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.DraggableRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="proxy">
<xs:annotation>
<xs:documentation><![CDATA[Displays proxy element instead of actual element. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dragOnly">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Id of the component to add draggable behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables or enables dragging.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="axis">
<xs:annotation>
<xs:documentation><![CDATA[Specifies drag axis, valid values are 'x' and 'y'.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="containment">
<xs:annotation>
<xs:documentation><![CDATA[Constraints dragging within the boundaries of containment element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="helper">
<xs:annotation>
<xs:documentation><![CDATA[Helper element to display when dragging.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="revert">
<xs:annotation>
<xs:documentation><![CDATA[Reverts draggable to it's original position when not dropped onto a valid droppable. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="snap">
<xs:annotation>
<xs:documentation><![CDATA[Draggable will snap to edge of near elements. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="snapMode">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the snap mode. Valid values are 'both', 'inner' and 'outer'.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="snapTolerance">
<xs:annotation>
<xs:documentation><![CDATA[Distance from the snap element in pixels to trigger snap. Default is 20.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="zindex">
<xs:annotation>
<xs:documentation><![CDATA[ZIndex to apply during dragging. Default is -1.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="handle">
<xs:annotation>
<xs:documentation><![CDATA[Specifies a handle for dragging.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="opacity">
<xs:annotation>
<xs:documentation><![CDATA[Defines the opacity of the helper during dragging. Default is 1.0]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stack">
<xs:annotation>
<xs:documentation><![CDATA[In stack mode, draggable overlap is controlled automatically using the provided selector, dragged item always overlays other draggables.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="grid">
<xs:annotation>
<xs:documentation><![CDATA[Dragging happens in every x and y pixels.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scope">
<xs:annotation>
<xs:documentation><![CDATA[Scope key to match draggables and droppables.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cursor">
<xs:annotation>
<xs:documentation><![CDATA[CSS cursor to display in dragging. Default is crosshair.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dashboard">
<xs:annotation>
<xs:documentation><![CDATA[Id of the dashboard to connect with.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="appendTo">
<xs:annotation>
<xs:documentation><![CDATA[A search expression to define which element to append the draggable helper to.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="droppable">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Droppable</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.DroppableRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Id of the component to add droppable behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables of enables droppable behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="hoverStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class to apply when an acceptable draggable is dragged over.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="activeStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class to apply when an acceptable draggable is being dragged.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDrop">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a draggable is dropped.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accept">
<xs:annotation>
<xs:documentation><![CDATA[Selector to define the accepted draggables.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scope">
<xs:annotation>
<xs:documentation><![CDATA[Scope key to match draggables and droppables.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tolerance">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the intersection mode to accept a draggable.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="datasource">
<xs:annotation>
<xs:documentation><![CDATA[Id of a UIData component to connect with.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="editor">
<xs:annotation>
<xs:documentation><![CDATA[Editor is an input component with rich text editing capabilities.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Editor</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.EditorRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="controls">
<xs:annotation>
<xs:documentation><![CDATA[List of controls to customize toolbar.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[Height of the editor. Default is min integer value.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[Width of the editor. Default is min integer value.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables editor.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the editor container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the editor container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when editor data changes.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxlength">
<xs:annotation>
<xs:documentation><![CDATA[Maximum length for input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="effect">
<xs:annotation>
<xs:documentation><![CDATA[Effect component is based on the jQuery UI effects library.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Effect</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.EffectRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="event" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Dom event to attach the event that executes the animation. Required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the name of the animation. Required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Component that is animated.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="speed">
<xs:annotation>
<xs:documentation><![CDATA[Speed of the animation in ms. Default is 1000.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="delay">
<xs:annotation>
<xs:documentation><![CDATA[Startup delay on firing animation.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="queue">
<xs:annotation>
<xs:documentation><![CDATA[Specifies if effects should be queued. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="feedReader">
<xs:annotation>
<xs:documentation><![CDATA[feedReader displays content from a feed.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.FeedReader</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.FeedReaderRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[URL of the feed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Iterator to refer each item in feed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="size">
<xs:annotation>
<xs:documentation><![CDATA[Number of items to display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="fieldset">
<xs:annotation>
<xs:documentation><![CDATA[Fieldset is a grouping component with a title and content.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Fieldset</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.FieldsetRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="legend">
<xs:annotation>
<xs:documentation><![CDATA[Title text.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the fieldset.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the fieldset.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="toggleable">
<xs:annotation>
<xs:documentation><![CDATA[Makes content toggleable with animation. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="toggleSpeed">
<xs:annotation>
<xs:documentation><![CDATA[Sets toogle animation speed in milliseconds. Default is 500.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="collapsed">
<xs:annotation>
<xs:documentation><![CDATA[Defines initial visibility state of content. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="escape">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether value would be escaped or not, defaults to true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="fileUpload">
<xs:annotation>
<xs:documentation><![CDATA[FileUpload goes beyond the browser input type="file" functionality and features a flash-javascript solution for uploading files. 
      File filtering, multiple uploads, partial page rendering and progress tracking are the significant features compared to legacy fileUploads.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.FileUpload</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.FileUploadRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the main component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="update">
<xs:annotation>
<xs:documentation><![CDATA[Component(s) to be updated after fileupload completes.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="process">
<xs:annotation>
<xs:documentation><![CDATA[Component(s) to be processed during fileupload request.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="fileUploadListener">
<xs:annotation>
<xs:documentation><![CDATA[Method expression to listen file upload events.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="multiple">
<xs:annotation>
<xs:documentation><![CDATA[Allows choosing of multi file uploads from native file browse dialog, turned off by default.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="auto">
<xs:annotation>
<xs:documentation><![CDATA[When set to true, selecting a file starts the upload process implicitly. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[Label of the browse button, default is 'Choose'.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="allowTypes">
<xs:annotation>
<xs:documentation><![CDATA[Regular expression for accepted file types, e.g. /(\.|\/)(gif|jpe?g|png)$/]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="fileLimit">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of files to be uploaded.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sizeLimit">
<xs:annotation>
<xs:documentation><![CDATA[Individual file size limit in bytes. Default is unlimited.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="mode">
<xs:annotation>
<xs:documentation><![CDATA[Mode of the uploader, valid values are "simple" and "advanced".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="uploadLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of the upload button, default is 'Upload'.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cancelLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of the cancel button, default is 'Cancel'.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="invalidSizeMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when file size validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="invalidFileMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when file limit validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="fileLimitMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when file count validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dragDropSupport">
<xs:annotation>
<xs:documentation><![CDATA[Specifies dragdrop based file selection from filesystem, default is true and works only on supported browsers.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onstart">
<xs:annotation>
<xs:documentation><![CDATA[Callback to execute at the beginning of fileupload.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="oncomplete">
<xs:annotation>
<xs:documentation><![CDATA[Callback to execute after fileupload request completes.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onerror">
<xs:annotation>
<xs:documentation><![CDATA[Callback to execute after fileupload request fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables fileupload user interface interaction.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="messageTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Message template to use when displaying file validation errors. Default is "{name} {size}".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="previewWidth">
<xs:annotation>
<xs:documentation><![CDATA[Width for image previews in pixels. Default value is 80.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="skinSimple">
<xs:annotation>
<xs:documentation><![CDATA[Applies theming to simple uploader, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accept">
<xs:annotation>
<xs:documentation><![CDATA[To filter files in native file browser dialog.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sequential">
<xs:annotation>
<xs:documentation><![CDATA[Uploads are concurrent by default set this option to true for sequential uploads.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="focus">
<xs:annotation>
<xs:documentation><![CDATA[Focus is a handy component that makes it easy to manage the element focus on a JSF page.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Focus</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.FocusRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the exact component to set focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="context">
<xs:annotation>
<xs:documentation><![CDATA[The root component to start first input search.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minSeverity">
<xs:annotation>
<xs:documentation><![CDATA[Minimum severity level to be used when finding the first invalid component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="fragment">
<xs:annotation>
<xs:documentation><![CDATA[Fragment component is used to define automatically partially processed and updated sections.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Fragment</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.FragmentRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="autoUpdate">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="galleria">
<xs:annotation>
<xs:documentation><![CDATA[Galleria is used to display a set of images.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Galleria</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.GalleriaRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Collection of images.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Name of the iterator to display a collection of images.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[Name of animation to use on transitions. Default is fade.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectSpeed">
<xs:annotation>
<xs:documentation><![CDATA[Duration of animation in milliseconds. Default is 500.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="frameWidth">
<xs:annotation>
<xs:documentation><![CDATA[Width of the filmstrip frames.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="frameHeight">
<xs:annotation>
<xs:documentation><![CDATA[Height of the filmstrip frames.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showFilmstrip">
<xs:annotation>
<xs:documentation><![CDATA[Defines visibility of filmstrip.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoPlay">
<xs:annotation>
<xs:documentation><![CDATA[Images are displayed with a slideshow in autoPlay mode, default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="transitionInterval">
<xs:annotation>
<xs:documentation><![CDATA[Time in milliseconds between each slide in autoPlay mode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="panelWidth">
<xs:annotation>
<xs:documentation><![CDATA[Width of the content panel.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="panelHeight">
<xs:annotation>
<xs:documentation><![CDATA[Height of the content panel.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showCaption">
<xs:annotation>
<xs:documentation><![CDATA[Displays information retrieved from title and alt attributes of images in content caption.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="gmap">
<xs:annotation>
<xs:documentation><![CDATA[GMap component is built on Google Maps API Version 3. Gmap is highly integrated with JSF development model and enhanced with Ajax capabilities.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.GMap</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.GMapRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[An org.primefaces.model.MapModel instance.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the map container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the map container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Type of the map. Required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="center" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Center point of the map. Required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="zoom" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Defines the initial zoom level. Default is 8.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="streetView">
<xs:annotation>
<xs:documentation><![CDATA[Controls street view support. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disableDefaultUI">
<xs:annotation>
<xs:documentation><![CDATA[Disables default UI controls. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="navigationControl">
<xs:annotation>
<xs:documentation><![CDATA[Defines visibility of navigation control. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="mapTypeControl">
<xs:annotation>
<xs:documentation><![CDATA[Defines visibility of map type control. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="draggable">
<xs:annotation>
<xs:documentation><![CDATA[Defines draggability of map. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disableDoubleClickZoom">
<xs:annotation>
<xs:documentation><![CDATA[Disables zooming on mouse double click. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onPointClick">
<xs:annotation>
<xs:documentation><![CDATA[Javascript callback to execute when a point on map is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="fitBounds">
<xs:annotation>
<xs:documentation><![CDATA[Defines setting center and zoom values auto by included overlays on startup. Default value is false]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollWheel">
<xs:annotation>
<xs:documentation><![CDATA[Controls scrollwheel zooming on the map. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="gmapInfoWindow">
<xs:annotation>
<xs:documentation><![CDATA[GMapInfoWindow is used with GMap component to open a window on map when an overlay is selected.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.GMapInfoWindow</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxWidth">
<xs:annotation>
<xs:documentation><![CDATA[Maximum width of the info window. Default is min integer value.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="graphicImage">
<xs:annotation>
<xs:documentation><![CDATA[PrimeFaces GraphicImage extends standard JSF graphic image component with the ability of displaying binary data like an inputstream. 
      Main use cases of GraphicImage is to make displaying images stored in database or on-the-fly images easier. 
      Legacy way to do this is to come up with a Servlet that does the streaming, GraphicImage does all the hard work without the need of a Servlet.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.GraphicImage</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.GraphicImageRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Binary data to stream or context relative path.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate text for the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="url">
<xs:annotation>
<xs:documentation><![CDATA[Alias to value attribute.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[Width of the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[Height of the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Title of the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction of the text displayed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[Language code.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ismap">
<xs:annotation>
<xs:documentation><![CDATA[Specifies to use a server-side image map.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="usemap">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side map.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[onclick dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[ondblclick dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[onkeydown dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[onkeypress dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[onkeyup dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[onmousedown dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[onmousemove dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[onmouseout dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[onmouseover dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[onmouseup dom event handler.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cache">
<xs:annotation>
<xs:documentation><![CDATA[Controls browser caching mode of the resource. Default is true]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name">
<xs:annotation>
<xs:documentation><![CDATA[Name of the image]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="library">
<xs:annotation>
<xs:documentation><![CDATA[Library name of the image]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stream">
<xs:annotation>
<xs:documentation><![CDATA[Defines if the image is streamed or rendered directly as data uri / base64 with ViewScoped support.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="growl">
<xs:annotation>
<xs:documentation><![CDATA[Growl is based on the Mac's growl notification widget and used to display FacesMessages similar to h:messages.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Growl</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.GrowlRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sticky">
<xs:annotation>
<xs:documentation><![CDATA[Specifies if the message should stay instead of hidden automatically. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showSummary">
<xs:annotation>
<xs:documentation><![CDATA[Specifies if the summary of message should be displayed. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showDetail">
<xs:annotation>
<xs:documentation><![CDATA[Specifies if the detail of message should be displayed. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="globalOnly">
<xs:annotation>
<xs:documentation><![CDATA[When true, only facesmessages without client-ids are displayed. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="life">
<xs:annotation>
<xs:documentation><![CDATA[Duration in milliseconds to display non-sticky messages. Default is 800.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoUpdate">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, growl is updated for each ajax request implicitly.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="redisplay">
<xs:annotation>
<xs:documentation><![CDATA[Defines if already rendered messages should be displayed. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Identifier of the component whose messages to display only, takes precendence when used with globalOnly.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="escape">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether html would be escaped or not, defaults to true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="severity">
<xs:annotation>
<xs:documentation><![CDATA[Comma seperated list of severities to display only.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="headerRow">
<xs:annotation>
<xs:documentation><![CDATA[HeaderRow is a helper component for row grouping.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.HeaderRow</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.HeaderRowRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="hotkey">
<xs:annotation>
<xs:documentation><![CDATA[HotKey is a generic key binding component that can bind any formation of keys to javascript event handlers or ajax calls.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Hotkey</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.HotkeyRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="actionListener">
<xs:annotation>
<xs:documentation><![CDATA[An actionlistener that'd be processed in the partial request caused by uiajax.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="action">
<xs:annotation>
<xs:documentation><![CDATA[A method expression that'd be processed in the partial request caused by uiajax.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value that determines the phaseId, when true actions are processed at apply_request_values, when false at invoke_application phase.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bind" use="required">
<xs:annotation>
<xs:documentation><![CDATA[The Key binding. Required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="update">
<xs:annotation>
<xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="process">
<xs:annotation>
<xs:documentation><![CDATA[Component id(s) to process partially instead of whole view.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="handler">
<xs:annotation>
<xs:documentation><![CDATA[Javascript event handler to be executed when the key binding is pressed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onstart">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute before ajax request is begins.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="oncomplete">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute when ajax request is completed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onerror">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute when ajax request fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onsuccess">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute when ajax request succeeds.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="global">
<xs:annotation>
<xs:documentation><![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="delay">
<xs:annotation>
<xs:documentation><![CDATA[If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeout">
<xs:annotation>
<xs:documentation><![CDATA[Defines the timeout for the ajax request.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="async">
<xs:annotation>
<xs:documentation><![CDATA[When set to true, ajax requests are not queued. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmit">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, only values related to partially processed components would be serialized for ajax 
            instead of whole form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resetValues">
<xs:annotation>
<xs:documentation><![CDATA[If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ignoreAutoUpdate">
<xs:annotation>
<xs:documentation><![CDATA[If true, components which autoUpdate="true" will not be updated for this request. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmitFilter">
<xs:annotation>
<xs:documentation><![CDATA[Selector to use when partial submit is on, default is ":input" to select all descendant inputs of a partially processed components.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="form">
<xs:annotation>
<xs:documentation><![CDATA[Form to serialize for an ajax request. Default is the enclosing form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="idleMonitor">
<xs:annotation>
<xs:documentation><![CDATA[IdleMonitor watches user actions on a page and notify several callbacks in case they go idle or active again.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.IdleMonitor</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.IdleMonitorRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeout">
<xs:annotation>
<xs:documentation><![CDATA[Time to wait in milliseconds until deciding if the user is idle. Default is 5 minutes.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onidle">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when user goes idle.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onactive">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when user goes idle.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="imageCompare">
<xs:annotation>
<xs:documentation><![CDATA[ImageCompare provides a rich user interface to compare two images.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.ImageCompare</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ImageCompareRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="leftImage">
<xs:annotation>
<xs:documentation><![CDATA[Source of the image placed on the left side.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rightImage">
<xs:annotation>
<xs:documentation><![CDATA[Source of the image placed on the right side]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[Width of the images.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[Height of the images.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the image container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the image container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="imageCropper">
<xs:annotation>
<xs:documentation><![CDATA[ImageCropper allows cropping a certain region of an image. A new image is created containing the cropped area and assigned to a CroppedImage instanced on the server side.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.ImageCropper</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ImageCropperRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="image">
<xs:annotation>
<xs:documentation><![CDATA[Context relative path to the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate text of the image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="aspectRatio">
<xs:annotation>
<xs:documentation><![CDATA[Aspect ratio of the cropper area.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minSize">
<xs:annotation>
<xs:documentation><![CDATA[Minimum size of the cropper area.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxSize">
<xs:annotation>
<xs:documentation><![CDATA[Maximum size of the cropper area.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="backgroundColor">
<xs:annotation>
<xs:documentation><![CDATA[Background color of the container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="backgroundOpacity">
<xs:annotation>
<xs:documentation><![CDATA[Background opacity of the container. Default is 0.6]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="initialCoords">
<xs:annotation>
<xs:documentation><![CDATA[Initial coordinates of the cropper area.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="boxWidth">
<xs:annotation>
<xs:documentation><![CDATA[Maximum box width of the cropping area.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="boxHeight">
<xs:annotation>
<xs:documentation><![CDATA[Maximum box height of the cropping area.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="imageSwitch">
<xs:annotation>
<xs:documentation><![CDATA[Imageswitch component is used to enable switching between a set of images with nice effects. ImageSwitch also provides a simple client side api for flexibility.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.ImageSwitch</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ImageSwitchRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Name of the effect for transition. Required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="speed">
<xs:annotation>
<xs:documentation><![CDATA[Speed of the effect in milliseconds. Default is 500.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="slideshowSpeed">
<xs:annotation>
<xs:documentation><![CDATA[Slideshow speed in milliseconds. Default is 3000.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="slideshowAuto">
<xs:annotation>
<xs:documentation><![CDATA[Starts slideshow automatically on page load. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="activeIndex">
<xs:annotation>
<xs:documentation><![CDATA[Index of the first image, default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="inplace">
<xs:annotation>
<xs:documentation><![CDATA[Inplace provides easy inplace editing and inline content display.
      Inplace consists of two members, display element is the inital clickable label and inline element is the hidden content
      that'll be displayed when display element is toggled.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Inplace</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.InplaceRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[Label to be shown in display mode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="emptyLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label to be shown in display mode when value isempty.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[Effect to be used when toggling. Default fade.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectSpeed">
<xs:annotation>
<xs:documentation><![CDATA[Speed of the effect. Default normal.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Prevents hidden content to be shown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editor">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the editor mode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="saveLabel">
<xs:annotation>
<xs:documentation><![CDATA[Tooltip text of save buttin in editor mode. Default is "Save"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cancelLabel">
<xs:annotation>
<xs:documentation><![CDATA[Tooltip text of cancel buttin in editor mode. Default is "Cancel"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="event">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side event to display inline content. Default is click.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="toggleable">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="inputMask">
<xs:annotation>
<xs:documentation><![CDATA[InputMask forces an input to fit in a defined mask template.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.InputMask</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.InputMaskRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key to transfer focus to the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate textual description of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autocomplete">
<xs:annotation>
<xs:documentation><![CDATA[Controls browser autocomplete behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the input element, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxlength">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of characters that may be entered in this field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus and its value has been modified since gaining focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved within input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved away from input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved onto input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onselect">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when text within input element is selected by user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Flag indicating that this input element will prevent changes by the user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="size">
<xs:annotation>
<xs:documentation><![CDATA[Number of characters used to determine the width of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="placeholder">
<xs:annotation>
<xs:documentation><![CDATA[The placeholder attribute specifies a short hint that describes the expected value of an input field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="mask" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Mask template. Required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="slotChar">
<xs:annotation>
<xs:documentation><![CDATA[PlaceHolder in mask template.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoClear">
<xs:annotation>
<xs:documentation><![CDATA[Clears the field on blur when incomplete input is entered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="inputNumber">
<xs:annotation>
<xs:documentation><![CDATA[InputNumber is an extension to the inputText with optimized handling for numbers.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.InputNumber</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.InputNumberRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key to transfer focus to the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate textual description of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autocomplete">
<xs:annotation>
<xs:documentation><![CDATA[Controls browser autocomplete behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the input element, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxlength">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of characters that may be entered in this field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus and its value has been modified since gaining focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved within input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved away from input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved onto input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onselect">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when text within input element is selected by user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Flag indicating that this input element will prevent changes by the user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="size">
<xs:annotation>
<xs:documentation><![CDATA[Number of characters used to determine the width of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="placeholder">
<xs:annotation>
<xs:documentation><![CDATA[The placeholder attribute specifies a short hint that describes the expected value of an input field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Input field type. Valid values are "text"(default), "tel" and "hidden".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="decimalSeparator">
<xs:annotation>
<xs:documentation><![CDATA[Decimal separator char. Default is taken from the view's locale.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="thousandSeparator">
<xs:annotation>
<xs:documentation><![CDATA[Thousand separator char. Default is taken from the view's locale.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="symbol">
<xs:annotation>
<xs:documentation><![CDATA[Desired symbol or unit. Default is none.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="symbolPosition">
<xs:annotation>
<xs:documentation><![CDATA[Symbol suffix. Default is prefix.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minValue">
<xs:annotation>
<xs:documentation><![CDATA[Minimum values. Default is 0.00.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxValue">
<xs:annotation>
<xs:documentation><![CDATA[Maximum values. Default is 999999999.99.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="roundMethod">
<xs:annotation>
<xs:documentation><![CDATA[Controls the rounding method. Default is Round-Half-Up Symmetric.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="decimalPlaces">
<xs:annotation>
<xs:documentation><![CDATA[Number of decimal places. Default are taken from minValue and MaxValue.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="emptyValue">
<xs:annotation>
<xs:documentation><![CDATA[Controls empty input display behavior, options are empty, zero, sign. Default is empty.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="inputStyle">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="inputStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="padControl">
<xs:annotation>
<xs:documentation><![CDATA[Controls padding of the decimal places. If true, always pads the decimal with zeros.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="inputSwitch">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.InputSwitch</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.InputSwitchRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLabel">
<xs:annotation>
<xs:documentation><![CDATA[Custom label for on state.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="offLabel">
<xs:annotation>
<xs:documentation><![CDATA[Custom label for off state.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[User presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables or enables the switch.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute on value change event.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[The tabindex attribute specifies the tab order of an element when the "tab" button is used for navigating.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showLabels">
<xs:annotation>
<xs:documentation><![CDATA[Controls the visibility of the labels, defaults to true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when component receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when component loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="inputText">
<xs:annotation>
<xs:documentation><![CDATA[InputText is an extension to standard inputText with skinning capabilities.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.InputText</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.InputTextRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key to transfer focus to the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate textual description of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autocomplete">
<xs:annotation>
<xs:documentation><![CDATA[Controls browser autocomplete behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the input element, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxlength">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of characters that may be entered in this field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus and its value has been modified since gaining focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved within input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved away from input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved onto input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onselect">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when text within input element is selected by user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Flag indicating that this input element will prevent changes by the user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="size">
<xs:annotation>
<xs:documentation><![CDATA[Number of characters used to determine the width of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="placeholder">
<xs:annotation>
<xs:documentation><![CDATA[The placeholder attribute specifies a short hint that describes the expected value of an input field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Input field type. Default is text.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="inputTextarea">
<xs:annotation>
<xs:documentation><![CDATA[InputTextarea is an extension to standard inputTextara with skinning capabilities and auto growing.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.InputTextarea</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.InputTextareaRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key to transfer focus to the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cols">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the visible width of input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the input element, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus and its value has been modified since gaining focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved within input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved away from input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved onto input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onselect">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when text within input element is selected by user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Flag indicating that this input element will prevent changes by the user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rows">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the visible height of input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="placeholder">
<xs:annotation>
<xs:documentation><![CDATA[The placeholder attribute specifies a short hint that describes the expected value of an input field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoResize">
<xs:annotation>
<xs:documentation><![CDATA[Allows to expand height automatically when text input overflows.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxlength">
<xs:annotation>
<xs:documentation><![CDATA[Sets maximum character number of text area container. Default is 0, means no limit.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="counter">
<xs:annotation>
<xs:documentation><![CDATA[Id of the label component to display remaining characters.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="counterTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template text to display in counter, default value is "{0}".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="completeMethod">
<xs:annotation>
<xs:documentation><![CDATA[Method providing suggestions.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minQueryLength">
<xs:annotation>
<xs:documentation><![CDATA[Number of characters of a word to be typed before starting to query. Default is 3.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="queryDelay">
<xs:annotation>
<xs:documentation><![CDATA[Delay to wait in milliseconds before sending each query to the server. Default is 700]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollHeight">
<xs:annotation>
<xs:documentation><![CDATA[Defines the height of the viewport for autocomplete suggestions.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="addLine">
<xs:annotation>
<xs:documentation><![CDATA[Adds a new line at start as a workaround to SGML specification B.3.1.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="keyboard">
<xs:annotation>
<xs:documentation><![CDATA[Keyboard is an input component that uses a virtual keyboard to provide the input. Notable features are the customizable layouts and skinning capabilities.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Keyboard</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.KeyboardRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key to transfer focus to the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate textual description of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autocomplete">
<xs:annotation>
<xs:documentation><![CDATA[Controls browser autocomplete behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the input element, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxlength">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of characters that may be entered in this field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus and its value has been modified since gaining focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved within input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved away from input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved onto input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onselect">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when text within input element is selected by user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Flag indicating that this input element will prevent changes by the user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="size">
<xs:annotation>
<xs:documentation><![CDATA[Number of characters used to determine the width of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="placeholder">
<xs:annotation>
<xs:documentation><![CDATA[The placeholder attribute specifies a short hint that describes the expected value of an input field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="password">
<xs:annotation>
<xs:documentation><![CDATA[Makes the input a password field. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showMode">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the showMode, 'focus', 'button', 'both']]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="buttonImage">
<xs:annotation>
<xs:documentation><![CDATA[Image for the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="buttonImageOnly">
<xs:annotation>
<xs:documentation><![CDATA[When set to true only image of the button would be displayed. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[Effect of the display animation. Default is fadeIn]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectDuration">
<xs:annotation>
<xs:documentation><![CDATA[Length of the display animation.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="layout">
<xs:annotation>
<xs:documentation><![CDATA[Built-in layout of the keyboard. Default is qwerty.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="layoutTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the custom layout.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="keypadOnly">
<xs:annotation>
<xs:documentation><![CDATA[Specifies displaying a keypad instead of a keyboard. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="promptLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of the prompt text.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closeLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of the close key.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="clearLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of the clear key.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="backspaceLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of the backspace key.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="keyFilter">
<xs:annotation>
<xs:documentation><![CDATA[KeyFilter filters keyboard input for a given input field.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.KeyFilter</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.KeyFilterRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[The target input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="regEx">
<xs:annotation>
<xs:documentation><![CDATA[Defines the regular expression which should be used for filtering the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="inputRegEx">
<xs:annotation>
<xs:documentation><![CDATA[Defines the regular expression which should be used to test the complete input text content.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="mask">
<xs:annotation>
<xs:documentation><![CDATA[Defines the predefined mask which should be used (pint, int, pnum, num, hex, email, alpha, alphanum).]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="testFunction">
<xs:annotation>
<xs:documentation><![CDATA[Defines a javascript code or function which should be used for filtering.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="preventPaste">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify if the component also should prevent paste. Default value is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="knob">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Knob</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.KnobRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="min">
<xs:annotation>
<xs:documentation><![CDATA[min valid value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="max">
<xs:annotation>
<xs:documentation><![CDATA[Max valid value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="step">
<xs:annotation>
<xs:documentation><![CDATA[Increment/decrement step of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="thickness">
<xs:annotation>
<xs:documentation><![CDATA[Thickness of the bar.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[Width of the component]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[Height of the component]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="foregroundColor">
<xs:annotation>
<xs:documentation><![CDATA[Foreground color of the component, you can use an hex value, a css constant or a java.awt.Color object]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="backgroundColor">
<xs:annotation>
<xs:documentation><![CDATA[Background color of the component, you can use an hex value, a css constant or a java.awt.Color object]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="colorTheme">
<xs:annotation>
<xs:documentation><![CDATA[Theme of the knob.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the input element, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showLabel">
<xs:annotation>
<xs:documentation><![CDATA[Set false to hide the label, default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cursor">
<xs:annotation>
<xs:documentation><![CDATA[Set true to show only a cursor instead of the full bar, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="labelTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the progress value e.g. "{value}%"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="layout">
<xs:annotation>
<xs:documentation><![CDATA[Layout component features a highly customizable borderLayout model making it very easy to create complex layouts even if you're not familar with web design.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Layout</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.LayoutRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="fullPage">
<xs:annotation>
<xs:documentation><![CDATA[Specifies whether layout should span all page or not.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style to apply to container element, this is only applicable to element based layouts.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class to apply to container element, this is only applicable to element based layouts.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onResize">
<xs:annotation>
<xs:documentation><![CDATA[A server side listener to process a ResizeEvent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClose">
<xs:annotation>
<xs:documentation><![CDATA[A server side listener to process a CloseEvent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onToggle">
<xs:annotation>
<xs:documentation><![CDATA[A server side listener to process a ToggleEvent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resizeTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title label for the resizer element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="collapseTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title label for the collapse button of collapsible units. Default is "Collapse"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="expandTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title label for the expand button of closable units.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closeTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title label for the close button of closable units. Default is "Close".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stateful">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, layout state is saved in a cookie for the session.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="layoutUnit">
<xs:annotation>
<xs:documentation><![CDATA[LayoutUnit represents a region in the border layout model of the Layout component.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.LayoutUnit</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.LayoutUnitRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="position" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Position of the unit. Required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="size">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resizable">
<xs:annotation>
<xs:documentation><![CDATA[Makes the unit resizable. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closable">
<xs:annotation>
<xs:documentation><![CDATA[Makes the unit closable. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="collapsible">
<xs:annotation>
<xs:documentation><![CDATA[Makes the unit collapsible. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="header">
<xs:annotation>
<xs:documentation><![CDATA[Text of header.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="footer">
<xs:annotation>
<xs:documentation><![CDATA[Text of footer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minSize">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxSize">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="gutter">
<xs:annotation>
<xs:documentation><![CDATA[Gutter size of layout unit. Default is 6.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible">
<xs:annotation>
<xs:documentation><![CDATA[Specifies default visibility. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="collapsed">
<xs:annotation>
<xs:documentation><![CDATA[Specifies toggle status of unit. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="collapseSize">
<xs:annotation>
<xs:documentation><![CDATA[Size of the unit when collapsed. Default is 25.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style to apply to container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class to apply to container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[Effect name of the layout transitions.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectSpeed">
<xs:annotation>
<xs:documentation><![CDATA[Effect speeds of the layout transitions.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="lifecycle">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Lifecycle</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.LifecycleRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="lightBox">
<xs:annotation>
<xs:documentation><![CDATA[Lightbox features a powerful overlay that can display images, multimedia content, other JSF components and external urls.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.LightBox</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.LightBoxRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the container element not the overlay element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the container element not the overlay element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[Width of the iframe.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[Height of the iframe.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="iframe">
<xs:annotation>
<xs:documentation><![CDATA[Specifies an iframe to display an external url in overlay. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="iframeTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title of the iframe element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible">
<xs:annotation>
<xs:documentation><![CDATA[Displays lightbox without requiring any user interaction by default. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onShow">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when lightbox is displayed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onHide">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when lightbox is hidden.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="link">
<xs:annotation>
<xs:documentation><![CDATA[Link is an extension to the standard h:link component with skinning capabilities.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Link</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.LinkRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component than can be either an EL expression of a literal text.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="outcome">
<xs:annotation>
<xs:documentation><![CDATA[Used to resolve a navigation case.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="includeViewParams">
<xs:annotation>
<xs:documentation><![CDATA[Whether to include page parameters in target URI. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="fragment">
<xs:annotation>
<xs:documentation><![CDATA[Identifier of the target page which should be scrolled to.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disableClientWindow">
<xs:annotation>
<xs:documentation><![CDATA[Disable appending the 
             on the rendering of this element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key that when pressed transfers focus to the link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="charset">
<xs:annotation>
<xs:documentation><![CDATA[Character encoding of the resource designated by this hyperlink.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="coords">
<xs:annotation>
<xs:documentation><![CDATA[Position and shape of the hot spot on the screen for client use in image maps.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="hreflang">
<xs:annotation>
<xs:documentation><![CDATA[Language code of the resource designated by the link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rel">
<xs:annotation>
<xs:documentation><![CDATA[Relationship from the current document to the anchor specified by the link, values are provided by a space-separated list of link types.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rev">
<xs:annotation>
<xs:documentation><![CDATA[A reverse link from the anchor specified by this link to the current document, values are provided by a space-separated list of link types.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="shape">
<xs:annotation>
<xs:documentation><![CDATA[Shape of hot spot on the screen, valid values are default, rect, circle and poly.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the button element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="target">
<xs:annotation>
<xs:documentation><![CDATA[Name of a frame where the resource targeted by this link will be displayed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip informaton.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Type of resource referenced by the link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style to be applied on the anchor element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[StyleClass to be applied on the anchor element]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when link loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when link is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when link is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when link receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is pressed down over link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved within link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved away from link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved onto link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is released over link.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="href">
<xs:annotation>
<xs:documentation><![CDATA[Resource to link to.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="escape">
<xs:annotation>
<xs:documentation><![CDATA[Defines if label of the component is escaped or not.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="log">
<xs:annotation>
<xs:documentation><![CDATA[Log component is a visual console to display logs of PrimeFaces. Using log client side API, you can also use the component.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Log</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.LogRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="media">
<xs:annotation>
<xs:documentation><![CDATA[Media component is used for embedding multimedia content such as videos and music to JSF views. Media renders object or embed html tags depending on the user client.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Media</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.MediaRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Media source to play.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="player">
<xs:annotation>
<xs:documentation><![CDATA[Type of the player, possible values are "quicktime","windows","flash","real" and "pdf".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[Width of the player.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[Height of the player.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the player.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the player.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cache">
<xs:annotation>
<xs:documentation><![CDATA[Controls browser caching mode of the resource. Default is true]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="megaMenu">
<xs:annotation>
<xs:documentation><![CDATA[MegaMenu is a navigation component that displays submenus together.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.MegaMenu</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.MegaMenuRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[MenuModel instance to create menus programmatically.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoDisplay">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether submenus will be displayed on mouseover or not. When
            set to false, click event is required to display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="activeIndex">
<xs:annotation>
<xs:documentation><![CDATA[Index of the active root menu to display as highlighted. By default no root is highlighted.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="orientation">
<xs:annotation>
<xs:documentation><![CDATA[Defines the orientation of the root menuitems, valid values are "horizontal" (default) and "vertical".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="menu">
<xs:annotation>
<xs:documentation><![CDATA[Menu is a navigation component with various customized modes like multi tiers, ipod style sliding and overlays.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Menu</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.MenuRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[A menu model instance to create menu programmatically.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="trigger">
<xs:annotation>
<xs:documentation><![CDATA[Id of component whose click event will show the dynamic positioned menu.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="my">
<xs:annotation>
<xs:documentation><![CDATA[Corner of menu to align with trigger element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="at">
<xs:annotation>
<xs:documentation><![CDATA[Corner of trigger to align with menu element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="overlay">
<xs:annotation>
<xs:documentation><![CDATA[Defines positioning, when enabled menu is displayed with absolute positioning relative to the trigger. 
            Default is false, meaning static positioning.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="triggerEvent">
<xs:annotation>
<xs:documentation><![CDATA[Event name of component that will show the dynamic positioned menu. Default is click.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="toggleable">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether clicking the header of a submenu toggles the visibility of children menuitems.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="menubar">
<xs:annotation>
<xs:documentation><![CDATA[Menubar is a horizontal navigation component.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Menubar</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.MenubarRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[MenuModel instance to create menus programmatically.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of menubar.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of menubar.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoDisplay">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether the first level of submenus will be displayed on mouseover or not. When
            set to false, click event is required to display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="toggleEvent">
<xs:annotation>
<xs:documentation><![CDATA[Event to toggle the submenus, default is hover. Valid values are "hover" and "click".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="menuButton">
<xs:annotation>
<xs:documentation><![CDATA[MenuButton displays different commands in a popup menu.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.MenuButton</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.MenuButtonRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[MenuModel instance to create menus programmatically.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Label of the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables or enables the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="icon">
<xs:annotation>
<xs:documentation><![CDATA[Icon of the menu button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="iconPos">
<xs:annotation>
<xs:documentation><![CDATA[Position of the icon, default value is left.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="appendTo">
<xs:annotation>
<xs:documentation><![CDATA[Appends the overlay to the element defined by search expression. Defaults to document body.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="menuStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the overlay menu element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="menuitem">
<xs:annotation>
<xs:documentation><![CDATA[Menuitem is used by various menu components of PrimeFaces.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.UIMenuItem</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Label of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="actionListener">
<xs:annotation>
<xs:documentation><![CDATA[An actionlistener to process when command is executed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="action">
<xs:annotation>
<xs:documentation><![CDATA[A method expression or a string outcome to process when command is executed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value that determines the phaseId of the action event, 
    when true actions are processed at "Apply Request Values", when false at "Invoke Application" phase.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="url">
<xs:annotation>
<xs:documentation><![CDATA[Url to be navigated when menuitem is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="target">
<xs:annotation>
<xs:documentation><![CDATA[Target type of url navigation.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the menuitem label.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[StyleClass of the menuitem label.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Javascript event handler for click event.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="update">
<xs:annotation>
<xs:documentation><![CDATA[Client side id of the component(s) to be updated after async partial submit request.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="process">
<xs:annotation>
<xs:documentation><![CDATA[Component id(s) to process partially instead of whole view.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onstart">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute before ajax request is begins.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables or enables the menu item.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="oncomplete">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute when ajax request is completed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onerror">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute when ajax request fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onsuccess">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute when ajax request succeeds.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="global">
<xs:annotation>
<xs:documentation><![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="delay">
<xs:annotation>
<xs:documentation><![CDATA[If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeout">
<xs:annotation>
<xs:documentation><![CDATA[Defines the timeout for the ajax request.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="async">
<xs:annotation>
<xs:documentation><![CDATA[When set to true, ajax requests are not queued.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ajax">
<xs:annotation>
<xs:documentation><![CDATA[Specifies submit mode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="icon">
<xs:annotation>
<xs:documentation><![CDATA[Path of the menuitem image.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="iconPos">
<xs:annotation>
<xs:documentation><![CDATA[Position of the icon, default value is right.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmit">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, only values related to partially processed components would be serialized for ajax
            instead of whole form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resetValues">
<xs:annotation>
<xs:documentation><![CDATA[If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ignoreAutoUpdate">
<xs:annotation>
<xs:documentation><![CDATA[If true, components which autoUpdate="true" will not be updated for this request. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Title text of the menuitem.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="outcome">
<xs:annotation>
<xs:documentation><![CDATA[Used to resolve a navigation case.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="includeViewParams">
<xs:annotation>
<xs:documentation><![CDATA[Whether to include page parameters in target URI. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="fragment">
<xs:annotation>
<xs:documentation><![CDATA[Identifier of the target page which should be scrolled to.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disableClientWindow">
<xs:annotation>
<xs:documentation><![CDATA[Disable appending the 
             on the rendering of this element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="containerStyle">
<xs:annotation>
<xs:documentation><![CDATA[Style of the menuitem container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="containerStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[StyleClass of the menuitem container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmitFilter">
<xs:annotation>
<xs:documentation><![CDATA[Selector to use when partial submit is on, default is ":input" to select all descendant inputs of a partially processed components.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="form">
<xs:annotation>
<xs:documentation><![CDATA[Form to serialize for an ajax request. Default is the enclosing form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="escape">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether value would be escaped or not, defaults to true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rel">
<xs:annotation>
<xs:documentation><![CDATA[Defines the relationship between the current document and the linked document.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="message">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Message</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.MessageRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showSummary">
<xs:annotation>
<xs:documentation><![CDATA[Specifies if the summary of the FacesMessage should be displayed. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showDetail">
<xs:annotation>
<xs:documentation><![CDATA[Specifies if the summary of the FacesMessage should be displayed. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Identifier of the component whose messages to display only, takes precendence when used with globalOnly.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="redisplay">
<xs:annotation>
<xs:documentation><![CDATA[Defines if already rendered messages should be displayed. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="display">
<xs:annotation>
<xs:documentation><![CDATA[Defines display mode, valid values are text, icon and both(default).]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="escape">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether html would be escaped or not, defaults to true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="severity">
<xs:annotation>
<xs:documentation><![CDATA[Comma separated list of severities to display only.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="messages">
<xs:annotation>
<xs:documentation><![CDATA[Message is a pre-skinned extended version of the standard JSF message component with extensions.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Messages</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.MessagesRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showSummary">
<xs:annotation>
<xs:documentation><![CDATA[Specifies if the summary of the FacesMessage should be displayed. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showDetail">
<xs:annotation>
<xs:documentation><![CDATA[Specifies if the detail of the FacesMessage should be displayed. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="globalOnly">
<xs:annotation>
<xs:documentation><![CDATA[When true, only facesmessages with no clientIds are displayed. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="redisplay">
<xs:annotation>
<xs:documentation><![CDATA[Defines if already rendered messages should be displayed. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Identifier of the component whose messages to display only, takes precendence when used
            with globalOnly.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoUpdate">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="escape">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether html would be escaped or not, defaults to true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="severity">
<xs:annotation>
<xs:documentation><![CDATA[Comma seperated list of severities to display only.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closable">
<xs:annotation>
<xs:documentation><![CDATA[Adds a close icon to hide the messages.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showIcon">
<xs:annotation>
<xs:documentation><![CDATA[Defines if severity icons would be displayed. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="mindmap">
<xs:annotation>
<xs:documentation><![CDATA[MindMap is an interactive mindmapping component.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Mindmap</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.MindmapRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[An org.primefaces.model.MindmapNode instance as the root node.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectSpeed">
<xs:annotation>
<xs:documentation><![CDATA[Speed of the animations in ms.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="multiSelectListbox">
<xs:annotation>
<xs:documentation><![CDATA[MultiSelectListbox is used to select an item from a collection of listboxes that are in parent-child relationship.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.MultiSelectListbox</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.MultiSelectListboxRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[Effect to use when showing a group of items.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showHeaders">
<xs:annotation>
<xs:documentation><![CDATA[Displays label of a group at header section of the children items. Defaults to false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="header">
<xs:annotation>
<xs:documentation><![CDATA[Label of the root group items.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="notificationBar">
<xs:annotation>
<xs:documentation><![CDATA[NotificationBar displayes a multipurpose fixed positioned panel for notification. Any group of JSF content can be placed inside notificationbar.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.NotificationBar</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.NotificationBarRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[StyleClass of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="position">
<xs:annotation>
<xs:documentation><![CDATA[Position of the bar, "top" or "bottom". Default is top.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[Name of the effect, "fade", "slide" or "none". Default is fade.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectSpeed">
<xs:annotation>
<xs:documentation><![CDATA[Speed of the effect, "slow", "normal" or "fast". Default is normal.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoDisplay">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="orderList">
<xs:annotation>
<xs:documentation><![CDATA[OrderList is used to sort a collection.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.OrderList</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.OrderListRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the iterator.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of an item.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemValue">
<xs:annotation>
<xs:documentation><![CDATA[Value of an item.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[Name of the animation to display. Default is fade.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="moveUpLabel">
<xs:annotation>
<xs:documentation><![CDATA[Text of move up button. Default is "Move Up".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="moveTopLabel">
<xs:annotation>
<xs:documentation><![CDATA[Text of move top button. Default is "Move Top".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="moveDownLabel">
<xs:annotation>
<xs:documentation><![CDATA[Text of move down button. Default is "Move Down".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="moveBottomLabel">
<xs:annotation>
<xs:documentation><![CDATA[Text of move bottom button. Default is "Move Bottom".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="controlsLocation">
<xs:annotation>
<xs:documentation><![CDATA[Location of the order controls, valid values are "left" (default), "right" and none.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="responsive">
<xs:annotation>
<xs:documentation><![CDATA[In responsive mode, orderList adjusts itself based on screen width.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="organigram">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Organigram</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.OrganigramRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[The model.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the request-scoped variable that'll be used to refer each treenode data during rendering.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selection">
<xs:annotation>
<xs:documentation><![CDATA[OrganigramNode to reference the selections.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the main container element of organigram.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container element of organigram.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="leafNodeConnectorHeight">
<xs:annotation>
<xs:documentation><![CDATA[The height of the connector line for leaf nodes.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="zoom">
<xs:annotation>
<xs:documentation><![CDATA[Defines if zoom controls are rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoScrollToSelection">
<xs:annotation>
<xs:documentation><![CDATA[Auto scroll to the selected node on rendering if enabled.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="organigramNode">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.OrganigramNode</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Type of the node. Default is "default"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[style to apply to a node type.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class to apply to a node type.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="icon">
<xs:annotation>
<xs:documentation><![CDATA[The icon to be displayed]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="iconPos">
<xs:annotation>
<xs:documentation><![CDATA[The icon position. Empty, "right" or "left".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="expandedIcon">
<xs:annotation>
<xs:documentation><![CDATA[The expanded icon.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="collapsedIcon">
<xs:annotation>
<xs:documentation><![CDATA[The collapsed icon.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="skipLeafHandling">
<xs:annotation>
<xs:documentation><![CDATA[If the leaf handling should be skipped.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="outputLabel">
<xs:annotation>
<xs:documentation><![CDATA[OutputLabel is an extension to the standard outputLabel.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.OutputLabel</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.OutputLabelRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Label to display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[The accesskey attribute is a standard HTML attribute that sets the access key that transfers focus to this element when pressed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="escape">
<xs:annotation>
<xs:documentation><![CDATA[Defines if value should be escaped or not.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Id of the associated input component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[The lang attribute is a standard HTML attribute that sets the code describing the language to be used in the markup generated by this component..]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip informaton.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when component loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when component is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when component is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when component receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is pressed down over component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved within component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved away from component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved onto component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is released over component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="indicateRequired">
<xs:annotation>
<xs:documentation><![CDATA[Displays * symbol if the input is required, default value is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance.
                In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="outputPanel">
<xs:annotation>
<xs:documentation><![CDATA[OutputPanel is used to group content on a page.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.OutputPanel</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.OutputPanelRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the html container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[StyleClass of the html container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoUpdate">
<xs:annotation>
<xs:documentation><![CDATA[Updates outputPanel after each ajax request implicity.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="deferred">
<xs:annotation>
<xs:documentation><![CDATA[Deferred mode loads the contents after page load to speed up page load.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="deferredMode">
<xs:annotation>
<xs:documentation><![CDATA[Defines deferred loading mode, valid values are "load" (after page load) and "visible" (once the panel is visible on scroll). Default value is "load".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="global">
<xs:annotation>
<xs:documentation><![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus on deferred loading. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="layout">
<xs:annotation>
<xs:documentation><![CDATA[Shortcut for the css display property, valid values are block (default) and inline.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="delay">
<xs:annotation>
<xs:documentation><![CDATA[Delay in milliseconds to wait before initiating a deferred loading, default value is "none".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="overlayPanel">
<xs:annotation>
<xs:documentation><![CDATA[OverlayPanel is a generic container component that is displayed as a popup.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.OverlayPanel</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.OverlayPanelRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Identifier of the target component to show the panel.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showEvent">
<xs:annotation>
<xs:documentation><![CDATA[Event to show the overlay panel, default is "click".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="hideEvent">
<xs:annotation>
<xs:documentation><![CDATA[Event to hide the overlay panel, default is "click".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showEffect">
<xs:annotation>
<xs:documentation><![CDATA[Effect to display when showing the panel.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="hideEffect">
<xs:annotation>
<xs:documentation><![CDATA[Effect to display when hiding the panel.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="appendToBody">
<xs:annotation>
<xs:documentation><![CDATA[When set true, panel is appended as a child of document body.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onShow">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when panel is displayed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onHide">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when panel is hidden.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="my">
<xs:annotation>
<xs:documentation><![CDATA[Position of the panel relative to the target.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="at">
<xs:annotation>
<xs:documentation><![CDATA[Position of the target relative to the panel.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dynamic">
<xs:annotation>
<xs:documentation><![CDATA[Dynamic mode allows overlay panel to fetch it's contents before it's shown rather than on page load
            which is useful to reduce initial page load times. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dismissable">
<xs:annotation>
<xs:documentation><![CDATA[When set true, clicking outside of the panel hides the overlay.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showCloseIcon">
<xs:annotation>
<xs:documentation><![CDATA[Displays a close icon to hide the overlay, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="modal">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value that specifies whether the document should be shielded with a partially transparent mask to require the user to close the Panel before being able to activate any elements in the document. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="panel">
<xs:annotation>
<xs:documentation><![CDATA[Panel is a grouping component for other components, notable features are toggling, closing, built-in popup menu and ajax event listeners.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Panel</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.PanelRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="header">
<xs:annotation>
<xs:documentation><![CDATA[Header text.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="footer">
<xs:annotation>
<xs:documentation><![CDATA[Footer text.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="toggleable">
<xs:annotation>
<xs:documentation><![CDATA[Makes panel toggleable. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="toggleSpeed">
<xs:annotation>
<xs:documentation><![CDATA[Speed of toggling in milliseconds. Default is 500]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the panel.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the panel.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="collapsed">
<xs:annotation>
<xs:documentation><![CDATA[Renders a toggleable panel as collapsed. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closable">
<xs:annotation>
<xs:documentation><![CDATA[Make panel closable. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closeSpeed">
<xs:annotation>
<xs:documentation><![CDATA[Speed of closing effect in milliseconds. Default is 500.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible">
<xs:annotation>
<xs:documentation><![CDATA[Renders panel as hidden. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closeTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title label for closer element of closable panel.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="toggleTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title attribute for toggler element of toggleable panel.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="menuTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title attribute for menu element on panel header.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="toggleOrientation">
<xs:annotation>
<xs:documentation><![CDATA[Defines the orientation of the toggle animation, valid values are "vertical" and "horizontal".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="panelGrid">
<xs:annotation>
<xs:documentation><![CDATA[PanelGrid is an extension to the standard PanelGrid.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.PanelGrid</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.PanelGridRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="columns">
<xs:annotation>
<xs:documentation><![CDATA[Number of columns of the table.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the table.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the table.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="columnClasses">
<xs:annotation>
<xs:documentation><![CDATA[Comma separated list of column style classes.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="layout">
<xs:annotation>
<xs:documentation><![CDATA[Displays data in a 'table' layout or 'grid' layout. The grid layout is a responsive layout. Default value is 'tabular'.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="role">
<xs:annotation>
<xs:documentation><![CDATA[Role for aria.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="panelMenu">
<xs:annotation>
<xs:documentation><![CDATA[PanelMenu is a hybrid of accordion-tree components used for navigations and actions.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.PanelMenu</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.PanelMenuRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[A menu model instance to create menu programmatically.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stateful">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, menu state is saved in a cookie for the session. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="password">
<xs:annotation>
<xs:documentation><![CDATA[Password component is an extended version of standard inputSecret component with theme integration and strength indicator.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Password</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.PasswordRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key to transfer focus to the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate textual description of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autocomplete">
<xs:annotation>
<xs:documentation><![CDATA[Controls browser autocomplete behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the input element, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxlength">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of characters that may be entered in this field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus and its value has been modified since gaining focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved within input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved away from input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved onto input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onselect">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when text within input element is selected by user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Flag indicating that this input element will prevent changes by the user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="size">
<xs:annotation>
<xs:documentation><![CDATA[Number of characters used to determine the width of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="placeholder">
<xs:annotation>
<xs:documentation><![CDATA[The placeholder attribute specifies a short hint that describes the expected value of an input field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="feedback">
<xs:annotation>
<xs:documentation><![CDATA[Enables strength indicator. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="inline">
<xs:annotation>
<xs:documentation><![CDATA[Displays feedback inline rather than using a popup. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="promptLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of prompt. Default is "Please enter a password"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="weakLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of weak password. Default is "Weak"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="goodLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of good password. Default is "Good"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="strongLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of strong password. Default is "Strong"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="redisplay">
<xs:annotation>
<xs:documentation><![CDATA[Boolean flag indicating whether or not a previously entered password should be rendered in form. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="match">
<xs:annotation>
<xs:documentation><![CDATA[Identifier of another password component to match value against.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="photoCam">
<xs:annotation>
<xs:documentation><![CDATA[.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.PhotoCam</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.PhotoCamRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the camera container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the camera container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="process">
<xs:annotation>
<xs:documentation><![CDATA[Identifiers of components to process during photo capture.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="update">
<xs:annotation>
<xs:documentation><![CDATA[Identifiers of components to update after photo capture.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="listener">
<xs:annotation>
<xs:documentation><![CDATA[Method expression to listen capture events.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[Width of the camera viewport.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[Height of the camera viewport.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="photoWidth">
<xs:annotation>
<xs:documentation><![CDATA[Width of the captured photo, defaults to width.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="photoHeight">
<xs:annotation>
<xs:documentation><![CDATA[Height of the captured photo, defaults to height]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="format">
<xs:annotation>
<xs:documentation><![CDATA[Format of the image, valid values are "jpeg" default and png.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="jpegQuality">
<xs:annotation>
<xs:documentation><![CDATA[Quality of the image between 0 and 100 when the format is jpeg, default value is 90.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="forceFlash">
<xs:annotation>
<xs:documentation><![CDATA[Enables always using flash fallback even in an HTML5 environment.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoStart">
<xs:annotation>
<xs:documentation><![CDATA[Disable camera start after initialize]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="pickList">
<xs:annotation>
<xs:documentation><![CDATA[PickList is used for transferring data between two different collections.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.PickList</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.PickListRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the iterator.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of an item.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemValue">
<xs:annotation>
<xs:documentation><![CDATA[Value of an item.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[Name of the animation to display. Default is fade.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectSpeed">
<xs:annotation>
<xs:documentation><![CDATA[Speed of the animation. Default is fast.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="addLabel">
<xs:annotation>
<xs:documentation><![CDATA[Text of add button. Default is "Add".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="addAllLabel">
<xs:annotation>
<xs:documentation><![CDATA[Text of add all button. Default is "Add All".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="removeLabel">
<xs:annotation>
<xs:documentation><![CDATA[Text of remove button. Default is "Remove".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="removeAllLabel">
<xs:annotation>
<xs:documentation><![CDATA[Text of remove all button. Default is "Remove All".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="moveUpLabel">
<xs:annotation>
<xs:documentation><![CDATA[Text of move up button. Default is "Move Up".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="moveTopLabel">
<xs:annotation>
<xs:documentation><![CDATA[Text of move top button. Default is "Move Top".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="moveDownLabel">
<xs:annotation>
<xs:documentation><![CDATA[Text of move down button. Default is "Move Down".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="moveBottomLabel">
<xs:annotation>
<xs:documentation><![CDATA[Text of move bottom button. Default is "Move Down".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showSourceControls">
<xs:annotation>
<xs:documentation><![CDATA[Specifies visibility of reorder buttons of sourcelist. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showTargetControls">
<xs:annotation>
<xs:documentation><![CDATA[Specifies visibility of reorder buttons of target list. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTransfer">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when an item is transferred from one list to another.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemDisabled">
<xs:annotation>
<xs:documentation><![CDATA[Specifies if an item can be picked or not.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showSourceFilter">
<xs:annotation>
<xs:documentation><![CDATA[Displays an input filter for source list.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showTargetFilter">
<xs:annotation>
<xs:documentation><![CDATA[Displays an input filter for target list.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterMatchMode">
<xs:annotation>
<xs:documentation><![CDATA[Match mode for filtering, valid values are startsWith (default), contains, endsWith and custom.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterFunction">
<xs:annotation>
<xs:documentation><![CDATA[Client side function to use in custom filterMatchMode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showCheckbox">
<xs:annotation>
<xs:documentation><![CDATA[When true, a checkbox is displayed next to each item.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="labelDisplay">
<xs:annotation>
<xs:documentation><![CDATA[Defines how the button labels displayed, valid values are "tooltip" (default) and "inline".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="orientation">
<xs:annotation>
<xs:documentation><![CDATA[Displays lists horizontally, valid values are "horizontal" (default) and "vertical".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="responsive">
<xs:annotation>
<xs:documentation><![CDATA[In responsive mode, component adjusts itself based on screen width.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="poll">
<xs:annotation>
<xs:documentation><![CDATA[Poll is an ajax component that has the ability to send periodical ajax requests and execute listeners on JSF backing beans.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Poll</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.PollRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="interval">
<xs:annotation>
<xs:documentation><![CDATA[Interval in seconds to do periodic ajax requests. Default is 2.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="update">
<xs:annotation>
<xs:documentation><![CDATA[Component(s) to be updated with ajax.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="listener">
<xs:annotation>
<xs:documentation><![CDATA[A method expression to invoke by polling.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value that determines the phaseId, when true actions are processed at apply_request_values, when false at invoke_application phase.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onstart">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute before ajax request is begins.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="oncomplete">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute when ajax request is completed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="process">
<xs:annotation>
<xs:documentation><![CDATA[Component id(s) to process partially instead of whole view.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onerror">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute when ajax request fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onsuccess">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute when ajax request succeeds.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="global">
<xs:annotation>
<xs:documentation><![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="delay">
<xs:annotation>
<xs:documentation><![CDATA[If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeout">
<xs:annotation>
<xs:documentation><![CDATA[Defines the timeout for the ajax request.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="async">
<xs:annotation>
<xs:documentation><![CDATA[When set to true, ajax requests are not queued. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoStart">
<xs:annotation>
<xs:documentation><![CDATA[In autoStart mode, polling starts automatically on page load, to start polling on demand set to false. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stop">
<xs:annotation>
<xs:documentation><![CDATA[Stops polling when true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmit">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, only values related to partially processed components would be serialized for ajax 
            instead of whole form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resetValues">
<xs:annotation>
<xs:documentation><![CDATA[If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ignoreAutoUpdate">
<xs:annotation>
<xs:documentation><![CDATA[If true, components which autoUpdate="true" will not be updated for this request. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmitFilter">
<xs:annotation>
<xs:documentation><![CDATA[Selector to use when partial submit is on, default is ":input" to select all descendant inputs of a partially processed components.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="form">
<xs:annotation>
<xs:documentation><![CDATA[Form to serialize for an ajax request. Default is the enclosing form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="progressBar">
<xs:annotation>
<xs:documentation><![CDATA[ProgressBar is a process status indicator that can either work purely on client side or interact with server side using ajax.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.ProgressBar</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ProgressBarRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the progress bar. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables or enables the progressbar.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ajax">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the mode of progressBar, in ajax mode progress value is retrieved from a backing bean. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="interval">
<xs:annotation>
<xs:documentation><![CDATA[Interval in seconds to do periodic requests in ajax mode. Default is 300.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="labelTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the progress value e.g. "{value}%"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="displayOnly">
<xs:annotation>
<xs:documentation><![CDATA[Enables static value display mode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="global">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether to trigger ajaxStatus or not.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="radioButton">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.RadioButton</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.RadioButtonRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemIndex">
<xs:annotation>
<xs:documentation><![CDATA[Index of the selectItem of the selectOneRadio.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute on state change.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Id of the selectOneRadio component to attach to.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[The tabindex attribute specifies the tab order of an element when the "tab" button is used for navigating.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="rating">
<xs:annotation>
<xs:documentation><![CDATA[Rating component features a star based rating system. Rating can be used as a plain input component or with ajax RateListeners.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Rating</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.RatingRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stars">
<xs:annotation>
<xs:documentation><![CDATA[Number of stars to display. Default is 5.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables user interaction.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Disables user interaction without adding disabled visuals.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onRate">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when rate happens.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cancel">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, displays a cancel icon to reset rating value, defaults to true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="remoteCommand">
<xs:annotation>
<xs:documentation><![CDATA[RemoteCommand provides a way to execute JSF backing bean methods directly from javascript.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.RemoteCommand</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.RemoteCommandRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Label of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="actionListener">
<xs:annotation>
<xs:documentation><![CDATA[An actionlistener to process when command is executed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="action">
<xs:annotation>
<xs:documentation><![CDATA[A method expression or a string outcome to process when command is executed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value that determines the phaseId of the action event, 
    when true actions are processed at "Apply Request Values", when false at "Invoke Application" phase.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name">
<xs:annotation>
<xs:documentation><![CDATA[Name of the command.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="update">
<xs:annotation>
<xs:documentation><![CDATA[Component(s) to update with ajax.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="process">
<xs:annotation>
<xs:documentation><![CDATA[Component(s) to process partially instead of whole view.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onstart">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute before ajax request is begins.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="oncomplete">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute when ajax request is completed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onerror">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute when ajax request fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onsuccess">
<xs:annotation>
<xs:documentation><![CDATA[Javascript handler to execute when ajax request succeeds.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="global">
<xs:annotation>
<xs:documentation><![CDATA[Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="delay">
<xs:annotation>
<xs:documentation><![CDATA[If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeout">
<xs:annotation>
<xs:documentation><![CDATA[Defines the timeout for the ajax request.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="async">
<xs:annotation>
<xs:documentation><![CDATA[When set to true, ajax requests are not queued.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoRun">
<xs:annotation>
<xs:documentation><![CDATA[When set to true, command will be invoked on page load.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmit">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, only values related to partially processed components would be serialized for ajax 
            instead of whole form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resetValues">
<xs:annotation>
<xs:documentation><![CDATA[If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ignoreAutoUpdate">
<xs:annotation>
<xs:documentation><![CDATA[If true, components which autoUpdate="true" will not be updated for this request. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmitFilter">
<xs:annotation>
<xs:documentation><![CDATA[Selector to use when partial submit is on, default is ":input" to select all descendant inputs of a partially processed components.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="form">
<xs:annotation>
<xs:documentation><![CDATA[Form to serialize for an ajax request. Default is the enclosing form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="resizable">
<xs:annotation>
<xs:documentation><![CDATA[PrimeFaces features a resizable component that has the ability to make a JSF component resizable.
      Resizable can be used on various components like resize an input fields, panels, menus, images and more.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Resizable</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ResizableRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Identifier of the target component to make resizable.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="aspectRatio">
<xs:annotation>
<xs:documentation><![CDATA[Defines if aspectRatio should be kept or not. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="proxy">
<xs:annotation>
<xs:documentation><![CDATA[Displays proxy element instead of actual element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="handles">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the resize handles.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ghost">
<xs:annotation>
<xs:documentation><![CDATA[In ghost mode, resize helper is displayed as the original element with less opacity. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animate">
<xs:annotation>
<xs:documentation><![CDATA[Enables animation. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[Effect to use in animation. Default is swing.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectDuration">
<xs:annotation>
<xs:documentation><![CDATA[Effect duration of animation. Default is normal.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxWidth">
<xs:annotation>
<xs:documentation><![CDATA[Maximum width boundary in pixels. Default is max integer value.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxHeight">
<xs:annotation>
<xs:documentation><![CDATA[Maximum height boundary in pixels. Default is max integer value.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minWidth">
<xs:annotation>
<xs:documentation><![CDATA[Minimum width boundary in pixels. Default is min integer value.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minHeight">
<xs:annotation>
<xs:documentation><![CDATA[Maximum height boundary in pixels. Default is min integer value.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="containment">
<xs:annotation>
<xs:documentation><![CDATA[Sets resizable boundaries as the parents size. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="grid">
<xs:annotation>
<xs:documentation><![CDATA[Snaps resizing to grid structure. Default is 1.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onStart">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when resizing begins.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onResize">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute during resizing.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onStop">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute after resizing end.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="ribbon">
<xs:annotation>
<xs:documentation><![CDATA[Ribbon is container component to group different sets of controls.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Ribbon</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.RibbonRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="activeIndex">
<xs:annotation>
<xs:documentation><![CDATA[Index of the active tab. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="ribbonGroup">
<xs:annotation>
<xs:documentation><![CDATA[RibbonGroup is a helper component for Ribbon to define groups in a tab.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.RibbonGroup</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.RibbonGroupRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[Label of the submenu header.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="ring">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Ring</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.RingRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Datasource of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the iterator variable used to refer each data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rows">
<xs:annotation>
<xs:documentation><![CDATA[Number of rows to display per page. Default value is 0 meaning to display all data available.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="first">
<xs:annotation>
<xs:documentation><![CDATA[Index of the first data to display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="easing">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoplay">
<xs:annotation>
<xs:documentation><![CDATA[When true, Ring will automatically advance the moving elements to the next child at a regular interval.Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoplayDuration">
<xs:annotation>
<xs:documentation><![CDATA[Time in milliseconds between animation triggers when a Ring's autoplay is playing.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoplayPauseOnHover">
<xs:annotation>
<xs:documentation><![CDATA[When true, Ring will pause autoPlay when the user mouseover the Ring container. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoplayInitialDelay">
<xs:annotation>
<xs:documentation><![CDATA[Time in milliseconds to delay the start of Ring's configured autoplay option.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="row">
<xs:annotation>
<xs:documentation><![CDATA[Row is a helper component for datatable.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Row</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.RowRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the row.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the row.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="rowEditor">
<xs:annotation>
<xs:documentation><![CDATA[RowEditor is a helper component for datatable.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.RowEditor</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.RowEditorRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title attribute for edit icon.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cancelTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title attribute for cancel icon.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="saveTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title attribute for save icon.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="rowExpansion">
<xs:annotation>
<xs:documentation><![CDATA[RowExpansion is a helper component of datatable used to implement expandable rows.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.RowExpansion</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the rowExpansion.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="rowToggler">
<xs:annotation>
<xs:documentation><![CDATA[RowToggler is a helper component for datatable.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.RowToggler</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.RowTogglerRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="expandLabel">
<xs:annotation>
<xs:documentation><![CDATA[Expand text to display instead of icon to.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="collapseLabel">
<xs:annotation>
<xs:documentation><![CDATA[Collapse text to display instead of icon.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="schedule">
<xs:annotation>
<xs:documentation><![CDATA[Schedule provides an Outlook Calendar, iCal like JSF component to manage events.
      Schedule is highly customizable featuring various views (month, day, week), built-in I18N, drag-drop, resize, customizable event dialog and skinning.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Schedule</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ScheduleRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[An org.primefaces.model.ScheduleModel instance representing the backed model.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="locale">
<xs:annotation>
<xs:documentation><![CDATA[Locale for localization, can be String or a java.util.Locale instance.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="aspectRatio">
<xs:annotation>
<xs:documentation><![CDATA[Ratio of calendar width to height, higher the value shorter the height is.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="view">
<xs:annotation>
<xs:documentation><![CDATA[The view type to use, possible values are 'month', 'agendaDay', 'agendaWeek', 'basicWeek', 'basicDay'. Default is month.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="initialDate">
<xs:annotation>
<xs:documentation><![CDATA[The initial date that is used when schedule loads. If ommitted, the schedule starts on the current date.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showWeekends">
<xs:annotation>
<xs:documentation><![CDATA[Specifies inclusion Saturday/Sunday columns in any of the views. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the main container element of schedule.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container element of schedule.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="draggable">
<xs:annotation>
<xs:documentation><![CDATA[When true, events are draggable. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resizable">
<xs:annotation>
<xs:documentation><![CDATA[When true, events are resizable. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showHeader">
<xs:annotation>
<xs:documentation><![CDATA[Specifies visibility of header content. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="leftHeaderTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Content of left side of header. Default is "prev, next today"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="centerHeaderTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Content of center of header. Default is title.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rightHeaderTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Content of right side of header. Default is "month, agendaWeek, agendaDay"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="allDaySlot">
<xs:annotation>
<xs:documentation><![CDATA[Determines if all-day slot will be displayed in agendaWeek or agendaDay views. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="slotDuration">
<xs:annotation>
<xs:documentation><![CDATA[The frequency for displaying time slots. Default is 00:30:00.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="slotMinutes">
<xs:annotation>
<xs:documentation><![CDATA[Interval in minutes in an hour to create a slot. Default is 30.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollTime">
<xs:annotation>
<xs:documentation><![CDATA[Determines how far down the scroll pane is initially scrolled down. Default is 06:00:00.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="firstHour">
<xs:annotation>
<xs:documentation><![CDATA[First hour to display in day view. Default is 6.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minTime">
<xs:annotation>
<xs:documentation><![CDATA[Minimum time to display in a day view. Default is 00:00:00.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxTime">
<xs:annotation>
<xs:documentation><![CDATA[Maximum time to display in a day view. Default is 24:00:00.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="axisFormat">
<xs:annotation>
<xs:documentation><![CDATA[Determines the time-text that will be displayed on the vertical axis of the agenda views.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeFormat">
<xs:annotation>
<xs:documentation><![CDATA[Determines the time-text that will be displayed on each event.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="columnFormat">
<xs:annotation>
<xs:documentation><![CDATA[Format for column headers.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeZone">
<xs:annotation>
<xs:documentation><![CDATA[String or a java.util.TimeZone instance to specify the timezone used for date conversion to ISO_8601 format, defaults to "UTC".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="clientTimeZone">
<xs:annotation>
<xs:documentation><![CDATA[Timezone to define how to interpret the dates at browser. Valid values are "false", "local", "UTC" and ids like "America/Chicago".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ignoreTimezone">
<xs:annotation>
<xs:documentation><![CDATA[When parsing dates, whether UTC offsets should be ignored while processing event data. Default is true]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip">
<xs:annotation>
<xs:documentation><![CDATA[Displays description of events on a tooltip, default value is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showWeekNumbers">
<xs:annotation>
<xs:documentation><![CDATA[Display week numbers in schedule.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="extender">
<xs:annotation>
<xs:documentation><![CDATA[Name of javascript function to extend the options of the underlying fullcalendar plugin.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="displayEventEnd">
<xs:annotation>
<xs:documentation><![CDATA[Whether or not to display an event's end time text when it is rendered on the calendar. Value can be a boolean to globally configure for
            all views or a comma separated list such as "month:false,basicWeek:true" to configure per view.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="weekNumberCalculation">
<xs:annotation>
<xs:documentation><![CDATA[The method for calculating week numbers that are displayed. Valid values are "local" (default), "ISO" and "custom".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="weekNumberCalculator">
<xs:annotation>
<xs:documentation><![CDATA[Client side function to use in custom weekNumberCalculation.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="nextDayThreshold">
<xs:annotation>
<xs:documentation><![CDATA[When an event's end time spans into another day, the minimum time it must be in order for it to render as if it were on that day. Default is 09:00:00.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="urlTarget">
<xs:annotation>
<xs:documentation><![CDATA[Target for events with urls. Clicking on such events in the schedule will not trigger the selectEvent but open the url using this target instead. Default is "_blank".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="scrollPanel">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.ScrollPanel</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ScrollPanelRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="mode">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="selectBooleanButton">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SelectBooleanButton</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SelectBooleanButtonRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLabel" use="required">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="offLabel" use="required">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onIcon">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="offIcon">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the button element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="selectBooleanCheckbox">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SelectBooleanCheckbox</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SelectBooleanCheckboxRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label to display next to checkbox.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[The tabindex attribute specifies the tab order of an element when the "tab" button is used for navigating.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when checkbox receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when checkbox loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="selectCheckboxMenu">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SelectCheckboxMenu</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SelectCheckboxMenuRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label" use="required">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollHeight">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onShow">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when overlay is displayed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onHide">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when overlay is hidden.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filter">
<xs:annotation>
<xs:documentation><![CDATA[Renders an input field as a filter when enabled.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterMatchMode">
<xs:annotation>
<xs:documentation><![CDATA[Match mode for filtering, valid values are startsWith (default), contains, endsWith and custom.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterFunction">
<xs:annotation>
<xs:documentation><![CDATA[Client side function to use in custom filterMatchMode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="caseSensitive">
<xs:annotation>
<xs:documentation><![CDATA[Defines if filtering would be case sensitive. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="panelStyle">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="panelStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="appendTo">
<xs:annotation>
<xs:documentation><![CDATA[Appends the overlay to the element defined by search expression. Defaults to document body.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showHeader">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, the header of panel is displayed. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="updateLabel">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, the selected items are displayed on label. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="multiple">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="selectManyButton">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SelectManyButton</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SelectManyButtonRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="selectManyCheckbox">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SelectManyCheckbox</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SelectManyCheckboxRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="layout">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="columns">
<xs:annotation>
<xs:documentation><![CDATA[Defines the number of columns in grid layout.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="selectManyMenu">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SelectManyMenu</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SelectManyMenuRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the input element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of iterator to be used in custom content display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showCheckbox">
<xs:annotation>
<xs:documentation><![CDATA[When true, a checkbox is displayed next to each item.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filter">
<xs:annotation>
<xs:documentation><![CDATA[Displays an input filter for the list.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterMatchMode">
<xs:annotation>
<xs:documentation><![CDATA[Match mode for filtering, valid values are startsWith (default), contains, endsWith and custom.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterFunction">
<xs:annotation>
<xs:documentation><![CDATA[Client side function to use in custom filterMatchMode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="caseSensitive">
<xs:annotation>
<xs:documentation><![CDATA[Defines if filtering would be case sensitive. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollHeight">
<xs:annotation>
<xs:documentation><![CDATA[Defines the height of the scrollable area.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="selectOneButton">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SelectOneButton</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SelectOneButtonRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="unselectable">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="selectOneListbox">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SelectOneListbox</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SelectOneListboxRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the input element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of iterator to be used in custom content display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filter">
<xs:annotation>
<xs:documentation><![CDATA[Displays an input filter for the list.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterMatchMode">
<xs:annotation>
<xs:documentation><![CDATA[Match mode for filtering, valid values are startsWith (default), contains, endsWith and custom.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterFunction">
<xs:annotation>
<xs:documentation><![CDATA[Client side function to use in custom filterMatchMode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="caseSensitive">
<xs:annotation>
<xs:documentation><![CDATA[Defines if filtering would be case sensitive. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollHeight">
<xs:annotation>
<xs:documentation><![CDATA[Defines the height of the scrollable area.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="selectOneMenu">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SelectOneMenu</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SelectOneMenuRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectSpeed">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="panelStyle">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="panelStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editable">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filter">
<xs:annotation>
<xs:documentation><![CDATA[Displays an input filter for the list.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterMatchMode">
<xs:annotation>
<xs:documentation><![CDATA[Match mode for filtering, valid values are startsWith (default), contains, endsWith and custom.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterFunction">
<xs:annotation>
<xs:documentation><![CDATA[Client side function to use in custom filterMatchMode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="caseSensitive">
<xs:annotation>
<xs:documentation><![CDATA[Defines if filtering would be case sensitive. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxlength">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of characters that may be entered in this field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="appendTo">
<xs:annotation>
<xs:documentation><![CDATA[Appends the overlay to the element defined by search expression. Defaults to document body.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="syncTooltip">
<xs:annotation>
<xs:documentation><![CDATA[Updates the title of the component with the description of the selected item.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="labelTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Displays label of the element in a custom template. Valid placeholder is {0}.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="placeholder">
<xs:annotation>
<xs:documentation><![CDATA[Watermark displayed in the input field before the user enters a value in an HTML5 browser.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when element receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when element loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoWidth">
<xs:annotation>
<xs:documentation><![CDATA[Calculates a fixed width based on the width of the maximum option label. Set to false for custom width.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="selectOneRadio">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SelectOneRadio</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SelectOneRadioRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="layout">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="columns">
<xs:annotation>
<xs:documentation><![CDATA[Defines the number of columns in grid layout.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[The tabindex attribute specifies the tab order of an element when the "tab" button is used for navigating.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="plain">
<xs:annotation>
<xs:documentation><![CDATA[Plain mode displays radiobuttons using native browser rendering instead of themes.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="separator">
<xs:annotation>
<xs:documentation><![CDATA[Seperator displays a horizontal line to separate content.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Separator</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SeparatorRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip informaton.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the separator.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the separator.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="signature">
<xs:annotation>
<xs:documentation><![CDATA[Signature is an input component to provide a signature.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Signature</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SignatureRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="backgroundColor">
<xs:annotation>
<xs:documentation><![CDATA[Background color, default is #ffffff.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="color">
<xs:annotation>
<xs:documentation><![CDATA[Foreground color, default is #000000.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="thickness">
<xs:annotation>
<xs:documentation><![CDATA[Thickness of lines, default is 2.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, signature is used for display purposes only.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="guideline">
<xs:annotation>
<xs:documentation><![CDATA[Adds a guideline when enabled, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="guidelineColor">
<xs:annotation>
<xs:documentation><![CDATA[Color of the guideline, default is #a0a0a0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="guidelineOffset">
<xs:annotation>
<xs:documentation><![CDATA[Offset of guideline from bottom.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="guidelineIndent">
<xs:annotation>
<xs:documentation><![CDATA[Guide line indent from the edges.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when signature changes.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="base64Value">
<xs:annotation>
<xs:documentation><![CDATA[Write-only value used to pass the value in base64 to backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="slideMenu">
<xs:annotation>
<xs:documentation><![CDATA[SlideMenu displays submenus with a slide animation.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SlideMenu</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SlideMenuRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[A menu model instance to create menu programmatically.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="backLabel">
<xs:annotation>
<xs:documentation><![CDATA[Text for back link, only applies to sliding menus. Default is "Back"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="trigger">
<xs:annotation>
<xs:documentation><![CDATA[Id of component whose click event will show the dynamic positioned menu.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="my">
<xs:annotation>
<xs:documentation><![CDATA[Corner of menu to align with trigger element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="at">
<xs:annotation>
<xs:documentation><![CDATA[Corner of trigger to align with menu element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="overlay">
<xs:annotation>
<xs:documentation><![CDATA[Defines positioning, when enabled menu is displayed with absolute positioning relative to the trigger. 
            Default is false, meaning static positioning.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="triggerEvent">
<xs:annotation>
<xs:documentation><![CDATA[Event name of component that will show the dynamic positioned menu. Default is click.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="slider">
<xs:annotation>
<xs:documentation><![CDATA[Slider is used to provide input with various customization options like orientation, display modes and skinning.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Slider</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SliderRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Id of the input text that the slider will be used for.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="display">
<xs:annotation>
<xs:documentation><![CDATA[Id of the component to display the slider value.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minValue">
<xs:annotation>
<xs:documentation><![CDATA[Minimum value of the slider. Default is 0.0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxValue">
<xs:annotation>
<xs:documentation><![CDATA[Maximum value of the slider. Default is 100.0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animate">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to enable/disable the animated move when background of slider is clicked. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Sets the type of the slider, "horizontal" or "vertical". Default is horizontal.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="step">
<xs:annotation>
<xs:documentation><![CDATA[Fixed pixel increments that the slider move in. Default is 1.0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables or enables the slider.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSlideStart">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when slide begins.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSlide">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute during sliding.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSlideEnd">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when slide ends.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="range">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, two handles are provided for selecting a range.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="displayTemplate">
<xs:annotation>
<xs:documentation><![CDATA[String template to use when updating the display. Valid placeholders are {value}, {min} and {max}.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="socket">
<xs:annotation>
<xs:documentation><![CDATA[Socket component is an agent that creates a channel between the server and the client.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Socket</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SocketRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="channel" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Channel name of the connection.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="transport">
<xs:annotation>
<xs:documentation><![CDATA[Desired protocol to be used valid values are websocket (default), sse, streaming, long-polling, jsonp.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="fallbackTransport">
<xs:annotation>
<xs:documentation><![CDATA[Fallback protocol to be used when desired transport is not supported in environment, valid values are websocket, sse, streaming, long-polling (default), jsonp.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMessage">
<xs:annotation>
<xs:documentation><![CDATA[Javascript event handler that is processed when the server publishes data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onError">
<xs:annotation>
<xs:documentation><![CDATA[Javascript event handler that is processed when there is an error.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClose">
<xs:annotation>
<xs:documentation><![CDATA[Javascript event handler for atmospheres onClose callback.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onOpen">
<xs:annotation>
<xs:documentation><![CDATA[Javascript event handler for atmospheres onOpen callback.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onReconnect">
<xs:annotation>
<xs:documentation><![CDATA[Javascript event handler for atmospheres onReconnect callback.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMessagePublished">
<xs:annotation>
<xs:documentation><![CDATA[Javascript event handler for atmospheres onMessagePublished callback.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTransportFailure">
<xs:annotation>
<xs:documentation><![CDATA[Javascript event handler for atmospheres onTransportFailure callback.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLocalMessage">
<xs:annotation>
<xs:documentation><![CDATA[Javascript event handler for atmospheres onLocalMessage callback.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoConnect">
<xs:annotation>
<xs:documentation><![CDATA[Defines if client should connect to the channel on page load.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="spacer">
<xs:annotation>
<xs:documentation><![CDATA[Spacer is used to put spaces between elements.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Spacer</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SpacerRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[Width of the space.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[Height of the space.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip informaton.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the spacer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the spacer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="spinner">
<xs:annotation>
<xs:documentation><![CDATA[Spinner is an input component to provide a numerical input via increment and decrement buttons.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Spinner</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SpinnerRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key to transfer focus to the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate textual description of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autocomplete">
<xs:annotation>
<xs:documentation><![CDATA[Controls browser autocomplete behavior.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the input element, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxlength">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of characters that may be entered in this field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element loses focus and its value has been modified since gaining focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when input element receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is pressed down over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved within input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved away from input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is moved onto input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer input element is released over input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onselect">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when text within input element is selected by user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Flag indicating that this input element will prevent changes by the user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="size">
<xs:annotation>
<xs:documentation><![CDATA[Number of characters used to determine the width of the input element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip information.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="placeholder">
<xs:annotation>
<xs:documentation><![CDATA[The placeholder attribute specifies a short hint that describes the expected value of an input field.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stepFactor">
<xs:annotation>
<xs:documentation><![CDATA[Stepping factor for each increment and decrement. Default is 1.0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="min">
<xs:annotation>
<xs:documentation><![CDATA[Minimum boundary value. Default is min double value.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="max">
<xs:annotation>
<xs:documentation><![CDATA[Maximum boundary value. Default is max double value.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="prefix">
<xs:annotation>
<xs:documentation><![CDATA[Prefix of the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="suffix">
<xs:annotation>
<xs:documentation><![CDATA[Suffix of the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="splitButton">
<xs:annotation>
<xs:documentation><![CDATA[SplitButton displays a default command and additional ones in an overlay.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SplitButton</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SplitButtonRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Label of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="actionListener">
<xs:annotation>
<xs:documentation><![CDATA[An actionlistener to process when command is executed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="action">
<xs:annotation>
<xs:documentation><![CDATA[A method expression or a string outcome to process when command is executed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value that determines the phaseId of the action event, 
    when true actions are processed at "Apply Request Values", when false at "Invoke Application" phase.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ajax">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the submit mode, when set to true (default), submit would be made with Ajax.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="async">
<xs:annotation>
<xs:documentation><![CDATA[When set to true, ajax requests are not queued.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="process">
<xs:annotation>
<xs:documentation><![CDATA[Component(s) to process partially instead of whole view.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="update">
<xs:annotation>
<xs:documentation><![CDATA[Component(s) to be updated with ajax.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onstart">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute before ajax request is begins.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="oncomplete">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when ajax request is completed.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onerror">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when ajax request fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onsuccess">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when ajax request succeeds.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="global">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether to trigger ajaxStatus or not.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="delay">
<xs:annotation>
<xs:documentation><![CDATA[If less than delay milliseconds elapses between calls to request() only the most recent one is sent and all other requests are discarded. The default value of this option is null. If the value of delay is the literal string 'none' without the quotes or the default, no delay is used.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeout">
<xs:annotation>
<xs:documentation><![CDATA[Defines the timeout for the ajax request.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accesskey">
<xs:annotation>
<xs:documentation><![CDATA[Access key that when pressed transfers focus to the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="alt">
<xs:annotation>
<xs:documentation><![CDATA[Alternate textual description of the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="image">
<xs:annotation>
<xs:documentation><![CDATA[Style class representing the button icon.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="lang">
<xs:annotation>
<xs:documentation><![CDATA[Code describing the language used in the generated markup for this component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the button element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Advisory tooltip informaton.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Sets the behavior of the button. Default is submit.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Flag indicating that this component will prevent changes by the user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the button element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the button element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onblur">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button loses focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button loses focus and its value has been modified since gaining focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ondblclick">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button is double clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onfocus">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when button receives focus.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeydown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed down over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeypress">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is pressed and released over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onkeyup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a key is released over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousedown">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is pressed down over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmousemove">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved within button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseout">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved away from button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseover">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is moved onto button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onmouseup">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a pointer button is released over button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onselect">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when text within button is selected by user.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="icon">
<xs:annotation>
<xs:documentation><![CDATA[Icon of the button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="iconPos">
<xs:annotation>
<xs:documentation><![CDATA[Position of the icon, default value is left.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="inline">
<xs:annotation>
<xs:documentation><![CDATA[Displays button inline instead of fitting the content width, only used by mobile.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmit">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, only values related to partially processed components would be serialized for ajax 
            instead of whole form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resetValues">
<xs:annotation>
<xs:documentation><![CDATA[If true, indicate that this particular Ajax transaction is a value reset transaction. This will cause resetValue() to be called on any EditableValueHolder instances encountered as a result of this ajax transaction. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ignoreAutoUpdate">
<xs:annotation>
<xs:documentation><![CDATA[If true, components which autoUpdate="true" will not be updated for this request. If not specified, or the value is false, no such indication is made.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="appendTo">
<xs:annotation>
<xs:documentation><![CDATA[Appends the overlay to the element defined by search expression. Defaults to document body.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="partialSubmitFilter">
<xs:annotation>
<xs:documentation><![CDATA[Selector to use when partial submit is on, default is ":input" to select all descendant inputs of a partially processed components.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="menuStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the overlay menu element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="form">
<xs:annotation>
<xs:documentation><![CDATA[Form to serialize for an ajax request. Default is the enclosing form.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="spotlight">
<xs:annotation>
<xs:documentation><![CDATA[Spotlight highlights a certain component on page.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Spotlight</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SpotlightRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="target">
<xs:annotation>
<xs:documentation><![CDATA[Component to highlight.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="active">
<xs:annotation>
<xs:documentation><![CDATA[When true, spotlight is activated initially.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="stack">
<xs:annotation>
<xs:documentation><![CDATA[Stack is a navigation component that mimics the stacks feature in Mac OS X.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Stack</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.StackRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[MenuModel instance to create menus programmatically.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="icon">
<xs:annotation>
<xs:documentation><![CDATA[An optional image to contain stacked items.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="openSpeed">
<xs:annotation>
<xs:documentation><![CDATA[Speed of the animation in milliseconds when opening the stack. Default is 300.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closeSpeed">
<xs:annotation>
<xs:documentation><![CDATA[Speed of the animation in milliseconds when opening the stack. Default is 300.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="expanded">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="steps">
<xs:annotation>
<xs:documentation><![CDATA[Steps is a menu component that displays steps of a workflow.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Steps</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.StepsRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[MenuModel instance to create menus programmatically.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="activeIndex">
<xs:annotation>
<xs:documentation><![CDATA[Index of the active tab. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether items would be clickable or not. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="sticky">
<xs:annotation>
<xs:documentation><![CDATA[Sticky component positions other components as fixed so that these components stay in window viewport during scrolling.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Sticky</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.StickyRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="target" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Identifier of the component(s) to make sticky.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="margin">
<xs:annotation>
<xs:documentation><![CDATA[Margin to the top of the page during fixed scrolling, default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="submenu">
<xs:annotation>
<xs:documentation><![CDATA[Submenu is nested in menu components and represents a sub menu items.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.UISubmenu</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[Label of the submenu header.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="icon">
<xs:annotation>
<xs:documentation><![CDATA[Icon of a submenu, see menuitem to see how it is used.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the menu.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the submenu.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="expanded">
<xs:annotation>
<xs:documentation><![CDATA[Defines the state of the submenu.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="subTable">
<xs:annotation>
<xs:documentation><![CDATA[SubTable is a helper component of datatable used for grouping.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SubTable</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SubTableRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Datasource of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the iterator variable used to refer each data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rows">
<xs:annotation>
<xs:documentation><![CDATA[Number of rows to display per page. Default value is 0 meaning to display all data available.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="first">
<xs:annotation>
<xs:documentation><![CDATA[Index of the first data to display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="summaryRow">
<xs:annotation>
<xs:documentation><![CDATA[SummaryRow is a helper component for data grouping.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.SummaryRow</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.SummaryRowRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="listener">
<xs:annotation>
<xs:documentation><![CDATA[Method expression to execute before rendering summary row. (e.g. to calculate totals)]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="tab">
<xs:annotation>
<xs:documentation><![CDATA[Tab is a generic container component used by other PrimeFaces components such as tabView or accordionPanel.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Tab</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title">
<xs:annotation>
<xs:documentation><![CDATA[Title text of the tab.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="titleStyle">
<xs:annotation>
<xs:documentation><![CDATA[Title container inner style.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="titleStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Title container style class.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables tab element if true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closable">
<xs:annotation>
<xs:documentation><![CDATA[Makes the tab closable by displaying a close icon.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="titletip">
<xs:annotation>
<xs:documentation><![CDATA[Tooltip of the tab header.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ariaLabel">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="tabMenu">
<xs:annotation>
<xs:documentation><![CDATA[TabMenu is a menu component that displays menuitems as tabs.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.TabMenu</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.TabMenuRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[MenuModel instance to create menus programmatically.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of main container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="activeIndex">
<xs:annotation>
<xs:documentation><![CDATA[Index of the active tab. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="tabView">
<xs:annotation>
<xs:documentation><![CDATA[TabView is a tabbed panel component featuring client side tabs, dynamic content loading with ajax and content transition effects.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.TabView</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.TabViewRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="activeIndex">
<xs:annotation>
<xs:documentation><![CDATA[Index of the active tab. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[Name of the transition effect.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectDuration">
<xs:annotation>
<xs:documentation><![CDATA[Duration of the transition effect. Default is normal.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dynamic">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the toggleMode. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cache">
<xs:annotation>
<xs:documentation><![CDATA[When tab contents are lazy loaded by ajax toggleMode, 
              caching only retrieves the tab contents once and subsequent toggles of a cached tab does not communicate with server.
              If caching is turned off, tab contents are reloaded from server each time tab is clicked. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTabChange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a tab is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTabShow">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute when a tab is shown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of collection iterator to use in dynamic number of tabs.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[List to iterate to display dynamic number of tabs.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="orientation">
<xs:annotation>
<xs:documentation><![CDATA[Orientation of the tab headers, valid values are "top" and "bottom".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTabClose">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute before a tab is closed. Return false to prevent closing.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Defines text direction, valid values are "ltr" (default) and "rtl".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollable">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, tab headers can be scrolled horizontally instead of wrapping. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="prependId">
<xs:annotation>
<xs:documentation><![CDATA[AccordionPanel is a naming container thus prepends its id to its children by default, a false value turns this behavior off except for dynamic tabs.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="tagCloud">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.TagCloud</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.TagCloudRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model" use="required">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="terminal">
<xs:annotation>
<xs:documentation><![CDATA[Terminal is an ajax powered component bringing desktop command-line tools to the web.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Terminal</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.TerminalRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="welcomeMessage">
<xs:annotation>
<xs:documentation><![CDATA[Welcome message to be displayed on initial load.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="prompt">
<xs:annotation>
<xs:documentation><![CDATA[Primary prompt text.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="commandHandler">
<xs:annotation>
<xs:documentation><![CDATA[Method to execute by passing command and the arguments.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="textEditor">
<xs:annotation>
<xs:documentation><![CDATA[Editor is an input component with rich text editing capabilities.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.TextEditor</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.TextEditorRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[Height of the editor. Default is min integer value.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="readonly">
<xs:annotation>
<xs:documentation><![CDATA[Whether to instantiate the editor to read-only mode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the editor container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the editor container.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="placeholder">
<xs:annotation>
<xs:documentation><![CDATA[Placeholder text to show when editor is empty..]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="themeSwitcher">
<xs:annotation>
<xs:documentation><![CDATA[ThemeSwitcher enables switching PrimeFaces themes on the fly with no page refresh.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.ThemeSwitcher</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ThemeSwitcherRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="buttonPreText">
<xs:annotation>
<xs:documentation><![CDATA[Prefix text displayed on button.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effect">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="effectSpeed">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="tieredMenu">
<xs:annotation>
<xs:documentation><![CDATA[TieredMenu displays submenus in overlays.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.TieredMenu</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.TieredMenuRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="model">
<xs:annotation>
<xs:documentation><![CDATA[MenuModel instance to create menus programmatically.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoDisplay">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether the first level of submenus will be displayed on mouseover or not. 
                        When set to false, click event is required to display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="trigger">
<xs:annotation>
<xs:documentation><![CDATA[Id of component whose click event will show the dynamic positioned menu.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="my">
<xs:annotation>
<xs:documentation><![CDATA[Corner of menu to align with trigger element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="at">
<xs:annotation>
<xs:documentation><![CDATA[Corner of trigger to align with menu element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="overlay">
<xs:annotation>
<xs:documentation><![CDATA[Defines positioning, when enabled menu is displayed with absolute positioning relative to the trigger. 
            Default is false, meaning static positioning.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="triggerEvent">
<xs:annotation>
<xs:documentation><![CDATA[Event name of component that will show the dynamic positioned menu. Default is click.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="toggleEvent">
<xs:annotation>
<xs:documentation><![CDATA[Event to toggle the submenus, default is hover. Valid values are "hover" and "click".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="timeline">
<xs:annotation>
<xs:documentation><![CDATA[Timeline is an interactive visualization chart to visualize events in time.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Timeline</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.TimelineRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the request-scoped variable for underlaying object in the TimelineEvent for each iteration.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[An instance of TimelineModel representing the backing model.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="varGroup">
<xs:annotation>
<xs:documentation><![CDATA[Name of the request-scoped variable for underlaying object in the TimelineGroup for each iteration.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="locale">
<xs:annotation>
<xs:documentation><![CDATA[User locale for i18n messages. The attribute can be either a String or Locale object.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeZone">
<xs:annotation>
<xs:documentation><![CDATA[Target time zone to convert start / end dates for displaying. This time zone is the time zone the user would like to see dates in UI.
                The attribute can be either a String or TimeZone object or null. If null, timeZone defaults to the server's time zone the application is running in.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="browserTimeZone">
<xs:annotation>
<xs:documentation><![CDATA[Time zone the user's browser / PC is running in. This time zone allows to correct the conversion of start / end dates to the target timeZone for displaying.
                The attribute can be either a String or TimeZone object or null. Note: browserTimeZone should be provided if the target timeZone is provided. If null, browserTimeZone defaults to the server's timeZone.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height">
<xs:annotation>
<xs:documentation><![CDATA[The height of the timeline in pixels, as a percentage, or "auto". When the height is set to "auto", the height of the timeline is automatically adjusted to fit the contents.
                If not, it is possible that events get stacked so high, that they are not visible in the timeline. When height is set to "auto", a minimum height can be specified with the option minHeight. Default is "auto".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minHeight">
<xs:annotation>
<xs:documentation><![CDATA[Specifies a minimum height for the Timeline in pixels. Useful when height is set to "auto". Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width">
<xs:annotation>
<xs:documentation><![CDATA[The width of the timeline in pixels or as a percentage. Default is "100%".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="responsive">
<xs:annotation>
<xs:documentation><![CDATA[Check if the timeline container is resized, and if so, resize the timeline.
                Useful when the webpage (browser window) or a layout pane / unit containing the timeline component is resized. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="axisOnTop">
<xs:annotation>
<xs:documentation><![CDATA[If false, the horizontal axis is drawn at the bottom. If true, the axis is drawn on top. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dragAreaWidth">
<xs:annotation>
<xs:documentation><![CDATA[The width of the drag areas in pixels. When an event with date range is selected, it has a drag area on the left and right side, with which the start or end dates of the event can be manipulated.
                Default is 10.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editable">
<xs:annotation>
<xs:documentation><![CDATA[If true, the events can be edited, changed, created and deleted. Events can only be editable when the option selectable is true (default). When editable is true, the timeline can fire AJAX events "change", "edit", "add", "delete", "drop".
                This global setting "editable" can be overwritten for individual events by setting a value in field "editable". Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selectable">
<xs:annotation>
<xs:documentation><![CDATA[If true, events on the timeline are selectable. Selectable events can fire AJAX "select" events. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="unselectable">
<xs:annotation>
<xs:documentation><![CDATA[If true, you can unselect an item by clicking in the empty space of the timeline. If false, you cannot unselect an item, there will be always one item selected. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="zoomable">
<xs:annotation>
<xs:documentation><![CDATA[If true, the timeline is zoomable. When the timeline is zoomed, AJAX "rangechange" events are fired. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="moveable">
<xs:annotation>
<xs:documentation><![CDATA[If true, the timeline is movable. When the timeline is moved, AJAX "rangechange" events are fired. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="start">
<xs:annotation>
<xs:documentation><![CDATA[The initial start date for the axis of the timeline. If not provided, the earliest date present in the events is taken as start date. Default is null.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="end">
<xs:annotation>
<xs:documentation><![CDATA[The initial end date for the axis of the timeline. If not provided, the latest date present in the events is taken as end date. Default is null.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="min">
<xs:annotation>
<xs:documentation><![CDATA[Set a minimum Date for the visible range. It will not be possible to move beyond this minimum. Default is null.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="max">
<xs:annotation>
<xs:documentation><![CDATA[Set a maximum Date for the visible range. It will not be possible to move beyond this maximum. Default is null.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="zoomMin">
<xs:annotation>
<xs:documentation><![CDATA[Set a minimum zoom interval for the visible range in milliseconds. It will not be possible to zoom in further than this minimum. Default is 10.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="zoomMax">
<xs:annotation>
<xs:documentation><![CDATA[Set a maximum zoom interval for the visible range in milliseconds. It will not be possible to zoom out further than this maximum. Default value equals 315360000000000 ms (about 10000 years).]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="preloadFactor">
<xs:annotation>
<xs:documentation><![CDATA[Preload factor is a positive float value or 0 which can be used for lazy loading of events. When the lazy loading feature is active, the calculated time range for preloading will be multiplicated by the preload factor. The result of this multiplication specifies the additional time range which will be considered for the preloading during moving / zooming too. For example, if the calculated time range for preloading is 5 days and the preload factor is 0.2, the result is 5 * 0.2 = 1 day. That means, 1 day backwards and / or 1 day onwards will be added to the original calculated time range. The event's area to be preloaded is wider then. This helps to avoid frequently, time-consuming fetching of events. Default value is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="eventMargin">
<xs:annotation>
<xs:documentation><![CDATA[The minimal margin in pixels between events. Default is 10.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="eventMarginAxis">
<xs:annotation>
<xs:documentation><![CDATA[The minimal margin in pixels between events and the horizontal axis. Default is 10.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="eventStyle">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the style for the timeline events. Choose from "dot" or "box". Default is "box".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="groupsChangeable">
<xs:annotation>
<xs:documentation><![CDATA[If true, items can be moved from one group to another. Only applicable when groups are used. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="groupsOnRight">
<xs:annotation>
<xs:documentation><![CDATA[If false, the groups legend is drawn at the left side of the timeline. If true, the groups legend is drawn on the right side. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="groupsOrder">
<xs:annotation>
<xs:documentation><![CDATA[Allows to customize the way groups are ordered. When true (default), groups will be ordered by content alphabetically (when the list of groups is missing) or by native ordering of TimelineGroup object in the list of groups (when the list of groups is available). When false, groups will not be ordered at all.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="groupsWidth">
<xs:annotation>
<xs:documentation><![CDATA[By default, the width of the groups legend is adjusted to the group names. A fixed width can be set for the groups legend by specifying the "groupsWidth" as a string, for example "200px". Default is null.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="groupMinHeight">
<xs:annotation>
<xs:documentation><![CDATA[The minimum height of each individual group even if they have no items. The group height is set as the greatest value between items height and the groupMinHeight. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="snapEvents">
<xs:annotation>
<xs:documentation><![CDATA[If true, the start and end of an event will be snapped nice integer values when moving or resizing the event. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stackEvents">
<xs:annotation>
<xs:documentation><![CDATA[If true, the events are stacked above each other to prevent overlapping events. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showCurrentTime">
<xs:annotation>
<xs:documentation><![CDATA[If true, the timeline shows a red, vertical line displaying the current time. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showMajorLabels">
<xs:annotation>
<xs:documentation><![CDATA[By default, the timeline shows both minor and major date labels on the horizontal axis.
                For example the minor labels show minutes and the major labels show hours. When "showMajorLabels" is false, no major labels are shown.
                Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showMinorLabels">
<xs:annotation>
<xs:documentation><![CDATA[By default, the timeline shows both minor and major date labels on the horizontal axis.
                For example the minor labels show minutes and the major labels show hours. When "showMinorLabels" is false, no minor labels are shown.
                When both "showMajorLabels" and "showMinorLabels" are false, no horizontal axis will be visible. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showButtonNew">
<xs:annotation>
<xs:documentation><![CDATA[Show the button "Create new event" in the a navigation menu. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showNavigation">
<xs:annotation>
<xs:documentation><![CDATA[Show a navigation menu with buttons to move and zoom the timeline. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeChangeable">
<xs:annotation>
<xs:documentation><![CDATA[If false, items can not be moved or dragged horizontally (neither start time nor end time is changable).
                This is useful when items should be editable but can only be changed regarding group or content (typical use case: scheduling events).
                Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dropHoverStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class to apply when an acceptable draggable is dragged over. Default is null.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dropActiveStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class to apply when an acceptable draggable is being dragged over. Default is null.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dropAccept">
<xs:annotation>
<xs:documentation><![CDATA[Selector to define the accepted draggables. Default is null.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dropScope">
<xs:annotation>
<xs:documentation><![CDATA[Scope key to match draggables and droppables. Default is null.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animate">
<xs:annotation>
<xs:documentation><![CDATA[When true, events are moved animated when resizing or moving them. This is very pleasing for the eye, but does require more computational power. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animateZoom">
<xs:annotation>
<xs:documentation><![CDATA[When true, events are moved animated when zooming the Timeline. This looks cool, but does require more computational power. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="toolbar">
<xs:annotation>
<xs:documentation><![CDATA[Toolbar is a horizontal grouping component for commands and other content.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Toolbar</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.ToolbarRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="toolbarGroup">
<xs:annotation>
<xs:documentation><![CDATA[ToolbarbarGroup is a helper component for Toolbar component to define placeholders.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.ToolbarGroup</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="align">
<xs:annotation>
<xs:documentation><![CDATA[Defines the alignment within toolbar, valid values are left and right. Default is left.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="tooltip">
<xs:annotation>
<xs:documentation><![CDATA[Tooltip goes beyond the legacy html title attribute by providing custom effects, events, html content and advance theme support.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Tooltip</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.TooltipRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showEvent">
<xs:annotation>
<xs:documentation><![CDATA[Event displaying the tooltip. Default is mouseover.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showEffect">
<xs:annotation>
<xs:documentation><![CDATA[Effect to be used for displaying. Default is fade.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showDelay">
<xs:annotation>
<xs:documentation><![CDATA[Delay time to show tooltip in milliseconds. Default is 150.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="hideEvent">
<xs:annotation>
<xs:documentation><![CDATA[Event hiding the tooltip. Default is mouseout.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="hideEffect">
<xs:annotation>
<xs:documentation><![CDATA[Effect to be used for hiding. Default is fade.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="hideDelay">
<xs:annotation>
<xs:documentation><![CDATA[Delay time to hide tooltip in milliseconds. Default is 0]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Id of the component to attach the tooltip.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the tooltip.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the tooltip.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="globalSelector">
<xs:annotation>
<xs:documentation><![CDATA[jquery selector for global tooltip, default is "a,:input,:button".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="escape">
<xs:annotation>
<xs:documentation><![CDATA[Defines whether html would be escaped or not, defaults to true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="trackMouse">
<xs:annotation>
<xs:documentation><![CDATA[Tooltip position follows pointer on mousemove, default is false]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="beforeShow">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute before tooltip is shown. Returning false will prevent display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onHide">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute after tooltip is hidden.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onShow">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute after tooltip is shown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="position">
<xs:annotation>
<xs:documentation><![CDATA[Position of the tooltip, valid values are right, left, top and bottom.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="tree">
<xs:annotation>
<xs:documentation><![CDATA[Tree is is used for displaying hierarchical data and creating site navigations.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Tree</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.TreeRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[A TreeNode instance as the backing model.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[Name of the request-scoped variable that'll be used to refer each treenode data during rendering.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dynamic">
<xs:annotation>
<xs:documentation><![CDATA[Specifies the ajax/client toggleMode. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cache">
<xs:annotation>
<xs:documentation><![CDATA[Specifies caching on dynamically loaded nodes. When set to true expanded nodes will be kept in memory. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onNodeClick">
<xs:annotation>
<xs:documentation><![CDATA[Javascript event to process when a tree node is clicked.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selection">
<xs:annotation>
<xs:documentation><![CDATA[TreeNode array to reference the selections.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the main container element of tree.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main container element of tree.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selectionMode">
<xs:annotation>
<xs:documentation><![CDATA[Defines the selectionMode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="highlight">
<xs:annotation>
<xs:documentation><![CDATA[Highlights nodes on hover when selection is enabled, set to false to disable highlighting.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="datakey">
<xs:annotation>
<xs:documentation><![CDATA[Unique key of the data presented by tree nodes.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animate">
<xs:annotation>
<xs:documentation><![CDATA[When enabled, Displays slide effect during toggling of a node.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="orientation">
<xs:annotation>
<xs:documentation><![CDATA[Defines the orientation of the tree, valid values are, "vertical" (default) and horizontal.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="propagateSelectionUp">
<xs:annotation>
<xs:documentation><![CDATA[Defines upwards selection propagation for checkbox mode, default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="propagateSelectionDown">
<xs:annotation>
<xs:documentation><![CDATA[Defines upwards selection propagation for checkbox mode, default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dir">
<xs:annotation>
<xs:documentation><![CDATA[Defines text direction, valid values are "ltr" (default) and "rtl".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="draggable">
<xs:annotation>
<xs:documentation><![CDATA[Controls dragging of tree nodes. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="droppable">
<xs:annotation>
<xs:documentation><![CDATA[Controls dropping of tree nodes. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dragdropScope">
<xs:annotation>
<xs:documentation><![CDATA[Scope key to group a set of tree components for transferring nodes using drag and drop.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dragMode">
<xs:annotation>
<xs:documentation><![CDATA[Defines parent-child relationship when a node is dragged, valid values are self (default), parent and ancestor.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dropRestrict">
<xs:annotation>
<xs:documentation><![CDATA[Defines parent-child restrictions when a node is dropped valid values are none (default) and sibling.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Validation constraint for selection.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message for required selection validation.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="skipChildren">
<xs:annotation>
<xs:documentation><![CDATA[Ignores processing of children during lifecycle, improves performance if table only has output components, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showUnselectableCheckbox">
<xs:annotation>
<xs:documentation><![CDATA[Defines if in checkbox selection mode, a readonly checkbox should be displayed for an unselectable node. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[Position of the element in the tabbing order. Default is 0.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="nodeVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the request-scoped variable that'll be used to refer current treenode using EL.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterBy">
<xs:annotation>
<xs:documentation><![CDATA[Property to be used for filtering.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="filterMatchMode">
<xs:annotation>
<xs:documentation><![CDATA[Match mode for filtering.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="treeNode">
<xs:annotation>
<xs:documentation><![CDATA[TreeNode is used with Tree component to represent a node in tree.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.UITreeNode</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[Type of the tree node. Default is "default"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class to apply a particular tree node type.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="icon">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="expandedIcon">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="collapsedIcon">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="ariaLabel">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="treeTable">
<xs:annotation>
<xs:documentation><![CDATA[Treetable is is used for displaying hierarchical data in tabular format.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.TreeTable</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.TreeTableRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selection">
<xs:annotation>
<xs:documentation><![CDATA[TreeNode array to reference the selections.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="selectionMode">
<xs:annotation>
<xs:documentation><![CDATA[Defines the selectionMode, valid values are "single" and "multiple".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollable">
<xs:annotation>
<xs:documentation><![CDATA[Makes data scrollable with fixed header. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollHeight">
<xs:annotation>
<xs:documentation><![CDATA[Height for scrollable data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="scrollWidth">
<xs:annotation>
<xs:documentation><![CDATA[Width for scrollable data.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tableStyle">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the table element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tableStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the table element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="emptyMessage">
<xs:annotation>
<xs:documentation><![CDATA[Text to display when there is no data to display. Default is "No records found."]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resizableColumns">
<xs:annotation>
<xs:documentation><![CDATA[Defines if columns can be resized or not.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowStyleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class for each row.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="liveResize">
<xs:annotation>
<xs:documentation><![CDATA[Columns are resized live in this mode without using a resize helper.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Validation constraint for selection.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message for required selection validation.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortBy">
<xs:annotation>
<xs:documentation><![CDATA[Expression for default sorting.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortOrder">
<xs:annotation>
<xs:documentation><![CDATA[Defines default sorting order. Default is "ascending"]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="sortFunction">
<xs:annotation>
<xs:documentation><![CDATA[Custom pluggable sortFunction for default sorting.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="nativeElements">
<xs:annotation>
<xs:documentation><![CDATA[In native mode, treetable uses native checkboxes.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dataLocale">
<xs:annotation>
<xs:documentation><![CDATA[Locale to be used in features such as sorting, defaults to view locale.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="caseSensitiveSort">
<xs:annotation>
<xs:documentation><![CDATA[Case sensitivity for sorting, insensitive by default.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="skipChildren">
<xs:annotation>
<xs:documentation><![CDATA[Ignores processing of children during lifecycle, improves performance if table only has output components, default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showUnselectableCheckbox">
<xs:annotation>
<xs:documentation><![CDATA[Defines if in checkbox selection mode, a readonly checkbox should be displayed for an unselectable node. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="nodeVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the request-scoped variable that'll be used to refer current treenode using EL.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="expandMode">
<xs:annotation>
<xs:documentation><![CDATA[Updates children only when set to "children" or the node itself with children when set to "self" on node expand.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stickyHeader">
<xs:annotation>
<xs:documentation><![CDATA[Sticky header stays in window viewport during scrolling.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editable">
<xs:annotation>
<xs:documentation><![CDATA[Controls incell editing.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editMode">
<xs:annotation>
<xs:documentation><![CDATA[Defines edit mode, valid values are "row" (default) and "cell".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editingRow">
<xs:annotation>
<xs:documentation><![CDATA[Defines if cell editors of row should be displayed as editable or not. Default is false meaning display mode.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cellSeparator">
<xs:annotation>
<xs:documentation><![CDATA[Separator text to use in output mode of editable cells with multiple components.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabledTextSelection">
<xs:annotation>
<xs:documentation><![CDATA[Disables text selection on row click. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginator">
<xs:annotation>
<xs:documentation><![CDATA[Enables pagination. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginatorTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the paginator.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowsPerPageTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the rowsPerPage dropdown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowsPerPageLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label for rowsPerPage dropdown.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="currentPageReportTemplate">
<xs:annotation>
<xs:documentation><![CDATA[Template of the currentPageReport UI.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="pageLinks">
<xs:annotation>
<xs:documentation><![CDATA[Maximum number of page links to display. Default is 10.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginatorPosition">
<xs:annotation>
<xs:documentation><![CDATA[Position of the paginator. Default is both.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="paginatorAlwaysVisible">
<xs:annotation>
<xs:documentation><![CDATA[Defines if paginator should be hidden if total data count is less than number of rows per page. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rows">
<xs:annotation>
<xs:documentation><![CDATA[Number of rows to display per page. Default value is 0 meaning to display all data available.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="first">
<xs:annotation>
<xs:documentation><![CDATA[Index of the first data to display.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="triStateCheckbox">
<xs:annotation>
<xs:documentation><![CDATA[]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.TriStateCheckbox</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.TriStateCheckboxRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[Value of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[When set true, process validations logic is executed at apply request values phase for this component. Default is false.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[Marks component as required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[A method expression referring to a method validationg the input.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[A method binding expression referring to a method for handling a valuchangeevent.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when required field validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when conversion fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[Message to display when validation fails.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stateOneIcon">
<xs:annotation>
<xs:documentation><![CDATA[Icon for StateOne as a css class.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stateTwoIcon">
<xs:annotation>
<xs:documentation><![CDATA[Icon for StateTwo as a css class.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stateThreeIcon">
<xs:annotation>
<xs:documentation><![CDATA[Icon for StateThree as a css class.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label to display next to checkbox.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stateOneTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title for StateOne.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stateTwoTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title for StateTwo.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stateThreeTitle">
<xs:annotation>
<xs:documentation><![CDATA[Title for StateThree.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[Disables the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="label">
<xs:annotation>
<xs:documentation><![CDATA[A localized user presentable name.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onchange">
<xs:annotation>
<xs:documentation><![CDATA[Client side callback to execute on state change.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Inline style of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the component.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabindex">
<xs:annotation>
<xs:documentation><![CDATA[The tabindex attribute specifies the tab order of an element when the "tab" button is used for navigating.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="watermark">
<xs:annotation>
<xs:documentation><![CDATA[Watermark displays a hint on an input field.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Watermark</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.WatermarkRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[Text of watermark. Required.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[Id of the component to attach the watermark.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="wizard">
<xs:annotation>
<xs:documentation><![CDATA[Wizard provides an ajax enhanced UI to implement a workflow easily in a single page. 
      Wizard consists of several child tab components where each tab represents a step in the process.]]></xs:documentation>
<xs:documentation>component-type: org.primefaces.component.Wizard</xs:documentation>
<xs:documentation>renderer-type: org.primefaces.component.WizardRenderer</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[Unique identifier of the component in a namingContainer.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="widgetVar">
<xs:annotation>
<xs:documentation><![CDATA[Name of the client side widget.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="step">
<xs:annotation>
<xs:documentation><![CDATA[Id of the current step in flow.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style">
<xs:annotation>
<xs:documentation><![CDATA[Style of the main wizard container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleClass">
<xs:annotation>
<xs:documentation><![CDATA[Style class of the main wizard container element.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="flowListener">
<xs:annotation>
<xs:documentation><![CDATA[Server side listener to invoke when wizard attempts to go forward or back.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showNavBar">
<xs:annotation>
<xs:documentation><![CDATA[Specifies visibility of default navigator arrows. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showStepStatus">
<xs:annotation>
<xs:documentation><![CDATA[Specifies visibility of default step title bar. Default is true.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onback">
<xs:annotation>
<xs:documentation><![CDATA[Javascript event handler to be invoked when flow goes back.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onnext">
<xs:annotation>
<xs:documentation><![CDATA[Javascript event handler to be invoked when flow goes forward.]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="nextLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of next navigation button. Default is "Next".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="backLabel">
<xs:annotation>
<xs:documentation><![CDATA[Label of back navigation button. Default is "Back".]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
</xs:schema>
