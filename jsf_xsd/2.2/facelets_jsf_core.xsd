<?xml version="1.0" encoding="UTF-8"?><!-- Generated by TaglibToXSD XSLT modified by Dawid Pytel https://github.com/destin/jsf-goodies--><!-- Original XSLT created by + Mark A. Ziesemer, http://www.ziesemer.com + 2008-03-25 --><xs:schema version="1.0" xml:lang="en" elementFormDefault="qualified" targetNamespace="http://xmlns.jcp.org/jsf/core" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:annotation>
<xs:documentation>The core JavaServer Faces custom actions that are independent of any particular RenderKit.</xs:documentation>
<xs:documentation>tlib-version: 2.2</xs:documentation>
</xs:annotation>
<xs:element name="actionListener">
<xs:annotation>
<xs:documentation><![CDATA[

            <p>Register an ActionListener instance on the
            UIComponent associated with the closest parent UIComponent
            custom action.</p>
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[
                Fully qualified Java class name of an ActionListener to be
                created and registered.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                Value binding expression that evaluates to an object that
                implements javax.faces.event.ActionListener.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">If present, this attribute
                refers
                to the value of one of the exposed attached objects within the
                composite component inside of which this tag is nested.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="passThroughAttribute">
<xs:annotation>
<xs:documentation><![CDATA[

        <p class="changed_added_2_2">Add an attribute to the 
            <code>passThroughAttributes Map</code> of the <code>UIComponent</code> 
            associated with the closest parent <code>UIComponent</code> tag.</p>

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="name" use="required">
<xs:annotation>
<xs:documentation><![CDATA[<p class="changed_added_2_2">The name
            of the pass through attribute.  An attribute with this name,
            and the corresponding value will appear on the outer most
            markup element in the rendered markup for the component, as
            specified in the overview for the HTML_BASIC RenderKit.  If
            the name of this attribute conflicts with
            <code>Renderer</code> specific attribute, the value
            specified here supercedes the one that would otherwise be
            rendered by the <code>Renderer</code></p>]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[<p class="changed_added_2_2">The value
            of the pass through attribute.  </p>]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="passThroughAttributes">
<xs:annotation>
<xs:documentation><![CDATA[
            <p class="changed_added_2_2">Add attributes to the 
            <code>passThroughAttributes Map</code> of the <code>UIComponent</code> 
            associated with the closest parent <code>UIComponent</code> tag.
            For each <code>Map.Entry</code> in the <code>Map&lt;String, Object&gt;</code>
            referenced by the value attribute of this tag, take the following action.
            Call <code>component.getPassThroughAttributes().put(entry.getKey(), entry.getValue())</code>.</p>


        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[<p class="changed_added_2_2">An EL <code>ValueExpression</code> that evaluates to a <code>Map&lt;String, Object&gt;</code>.</p>]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="attributes">
<xs:annotation>
<xs:documentation><![CDATA[<p class="changed_added_2_2">
            Add attributes to the UIComponent associated with the closest
            parent UIComponent custom action.  
            For each <code>Map.Entry</code> in the <code>Map&lt;String, Object&gt;</code>
            referenced by the value attribute of this tag, take the following action.
            If <code>parent.getAttributes().containsKey(entry.getKey())</code> returns 
            <code>true</code>, take no action for this entry.  Otherwise, if 
            <code>entry.getValue()</code> is a <code>ValueExpression</code> call 
            <code>parent.setValueExpression(entry.getKey(), entry.getValue())</code>.
            Otherwise, call <code>parent.getAttributes.put(entry.getKey(), entry.getValue()).</code>
            </p>


        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[<p class="changed_added_2_2">An EL <code>ValueExpression</code> that evaluates to a <code>Map&lt;String, Object&gt;</code>.</p>]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="attribute">
<xs:annotation>
<xs:documentation><![CDATA[
            Add an attribute to the UIComponent associated with the closest
            parent UIComponent custom action.
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="name">
<xs:annotation>
<xs:documentation><![CDATA[
                The name of the component attribute to be set.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[
                The value of the component attribute to be set.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="convertDateTime">
<xs:annotation>
<xs:documentation><![CDATA[
            Register a DateTimeConverter instance on the UIComponent associated
            with the closest parent UIComponent custom action.
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="dateStyle">
<xs:annotation>
<xs:documentation><![CDATA[
                Predefined formatting style which determines how the date
                component of a date string is to be formatted and parsed.
                Applied only if type is "date" or "both". Valid values
                are "default", "short", "medium", "long", and "full".
                Default value is "default".
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="locale">
<xs:annotation>
<xs:documentation><![CDATA[
                Locale whose predefined styles for dates and times are used
                during formatting or parsing. If not specified, the Locale
                returned by FacesContext.getViewRoot().getLocale() will be used.
                Value must be either a VB expression that evaluates to a
                java.util.Locale instance, or a String that is valid to pass as
                the first argument to the constructor java.util.Locale(String
                language, String country). The empty string is passed as the
                second argument.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="pattern">
<xs:annotation>
<xs:documentation><![CDATA[
                Custom formatting pattern which determines how the
                date/time string should be formatted and parsed.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeStyle">
<xs:annotation>
<xs:documentation><![CDATA[
                Predefined formatting style which determines how the
                time component of a date string is to be formatted and
                parsed. Applied only if type is "time" or "both".
                Valid values are "default", "short", "medium", "long",
                and "full". Default value is "default".
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="timeZone">
<xs:annotation>
<xs:documentation><![CDATA[
                Time zone in which to interpret any time information in the date
                String. Value must be either a VB expression that evaluates to
                a java.util.TimeZone instance, or a String that is a timezone ID
                as described in the javadocs for
                java.util.TimeZone.getTimeZone().
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[
                Specifies what contents the string value will be
                formatted to include, or parsed expecting. Valid
                values are "date", "time", and "both". Default
                value is "date".
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                javax.faces.convert.DateTimeConverter.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">If present, this attribute
                refers
                to the value of one of the exposed attached objects within the
                composite component inside of which this tag is nested.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="convertNumber">
<xs:annotation>
<xs:documentation><![CDATA[
            Register a NumberConverter instance on the UIComponent associated
            with the closest parent UIComponent custom action.
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="currencyCode">
<xs:annotation>
<xs:documentation><![CDATA[
                ISO 4217 currency code, applied only when
                formatting currencies.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="currencySymbol">
<xs:annotation>
<xs:documentation><![CDATA[
                Currency symbol, applied only when formatting
                currencies.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="groupingUsed">
<xs:annotation>
<xs:documentation><![CDATA[
                Flag specifying whether formatted output will
                contain grouping separators. Expressions must
                evaluate to a boolean. Default value
                is true.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="integerOnly">
<xs:annotation>
<xs:documentation><![CDATA[
                Flag specifying whether only the integer part
                of the value will be formatted and parsed.
                Expressions must evaluate to a boolean.
                Default value is false.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="locale">
<xs:annotation>
<xs:documentation><![CDATA[<p>

                <span class="changed_modified_2_0">Locale</span>
                whose
                predefined styles for numbers are used during formatting
                and parsing. If not specified, the Locale returned by
                FacesContext.getViewRoot().getLocale() will be used.
                Expressions must evaluate to a java.util.Locale <span
                class="changed_modified_2_0">or a String that is valid to
                pass as the first argument to the constructor
                java.util.Locale(String language, String country). The
                empty string is passed as the second argument.</span>

                </p>]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxFractionDigits">
<xs:annotation>
<xs:documentation><![CDATA[
                Maximum number of digits that will be formatted
                in the fractional portion of the output. Expressions
                must evaluate to an int.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxIntegerDigits">
<xs:annotation>
<xs:documentation><![CDATA[
                Maximum number of digits that will be formatted
                in the integer portion of the output. Expressions
                must evaluate to an int.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minFractionDigits">
<xs:annotation>
<xs:documentation><![CDATA[
                Minimum number of digits that will be formatted
                in the fractional portion of the output. Expressions
                must evaluate to an int.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minIntegerDigits">
<xs:annotation>
<xs:documentation><![CDATA[
                Minimum number of digits that will be formatted
                in the integer portion of the output. Expressions
                must evaluate to an int.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="pattern">
<xs:annotation>
<xs:documentation><![CDATA[
                Custom formatting pattern which determins how the
                number string should be formatted and parsed.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[
                Specifies how the number string will be formatted
                and parsed. Valid values are "number", "currency",
                and "percent". Default value is "number".
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                javax.faces.convert.NumberConverter.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">If present, this attribute
                refers
                to the value of one of the exposed attached objects within the
                composite component inside of which this tag is nested.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="converter">
<xs:annotation>
<xs:documentation><![CDATA[
            Register a named Converter instance on the UIComponent
            associated with the closest parent UIComponent custom action.
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="converterId">
<xs:annotation>
<xs:documentation><![CDATA[
                Converter identifier of the Converter instance to be
                created and registered.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression that evaluates to an object that
                implements javax.faces.convert.Converter.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">If present, this attribute
                refers
                to the value of one of the exposed attached objects within the
                composite component inside of which this tag is nested.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="ajax">
<xs:annotation>
<xs:documentation><![CDATA[

        <p class="changed_added_2_0">Register an AjaxBehavior instance
        on one or more UIComponents implementing the
        ClientBehaviorHolder interface.  This tag may be nested witin a
        single component (enabling Ajax for a single component), or it
        may be "wrapped" around multiple components (enabling Ajax for
        many components).</p>

        <p class="changed_added_2_0">The String value for ids
        specified for execute and render may be specified as a search
        expression as outlined in the JavaDocs for
        <code>UIComponent.findComponent()</code>. The implementation
        must resolve these ids as specified for
        <code>UIComponent.findComponent()</code>.  
        </p>

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">A value of "true" indicates
                the
                AjaxBehavior should not be rendered. A value of "false"
                indicates
                the AjaxBehavior should be rendered. "false" is the default.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="delay">
<xs:annotation>
<xs:documentation><![CDATA[ <p class="changed_added_2_2">If less than
          <em>delay</em> milliseconds elapses between calls to
          <em>request()</em> only the most recent one is sent and all other
          requests are discarded. If this option is not specified, or if the
          value of <em>delay</em> is the literal string <code>'none'</code>
          without the quotes, no delay is used. </p>
          
          ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resetValues">
<xs:annotation>
<xs:documentation><![CDATA[ <p class="changed_added_2_2">If
          <code>true</code>, indicate that this particular Ajax transaction
          is a value reset transaction.  This will cause
          <code>resetValue()</code> to be called on any
          <code>EditableValueHolder</code> instances encountered as a result
          of this ajax transaction.  If not specified, or the value is
          <code>false</code>, no such indication is made.</p>
          
          ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="event">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">A String identifying the type
                of event
                the Ajax action will apply to. If specified, it must be one of
                the
                events supported by the component the Ajax behavior is being
                applied to.
                For HTML components this would be the set of supported DOM
                events for the
                component, plus "action" for Faces ActionSource components and
                "valueChange"
                for Faces EditableValueHolder components. If not specified, the
                default
                event is determined for the component. The DOM event name is the
                actual DOM
                event name (for example: "click") as opposed to (for example:
                "onclick").</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="execute">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">Evaluates to
                Collection<String>.  This is a space separated
                list of client ids of components that will participate
                in the "execute" portion of the Request Processing
                Lifecycle. If a literal is specified the identifiers
                must be space delimited. Any of the keywords "@this",
                "@form", "@all", "@none" may be specified in the
                identifier list.  If not specified, the default value of
                "@this" is assumed.  <span
                class="changed_modified_2_0_rev_a">For example,
                <code>@this clientIdOne
                clientIdTwo</code>.</span></p>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">If "true" behavior events
                generated from this behavior
                are broadcast during Apply Request Values phase. Otherwise, the
                events will be
                broadcast during Invoke Aplications phase</p>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="listener">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">Method expression referencing
                a method
                that will be called when an AjaxBehaviorEvent has been
                broadcast for the listener.</p>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onevent">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">The name of the JavaScript
                function that will handle UI events.</p>
           ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onerror">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">The name of the JavaScript
                function that will handle errors.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="render">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">Evaluates to
                Collection<String>.  This is a space separated
                list of client ids of components that will participate
                in the "render" portion of the Request Processing
                Lifecycle. If a literal is specified the identifiers
                must be space delimited. Any of the keywords "@this",
                "@form", "@all", "@none" may be specified in the
                identifier list. If not specified, the default value of
                "@none" is assumed.  <span
                class="changed_modified_2_0_rev_a">For example,
                <code>@this clientIdOne
                clientIdTwo</code>.</span></p>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="event">
<xs:annotation>
<xs:documentation><![CDATA[

            <p class="changed_added_2_0">Allow JSF page authors to
            install <code>ComponentSystemEventListener</code>
            instances
            on a component in a page.</p>

            <div class="changed_added_2_0">

            <p></p>

            </div>

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="type" use="required">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">Name of the event for which
                to install a listener. The following table lists the
                valid values for this attribute, and the corresponding
                event type for which the listener action is
                registered.</p>

                <table border="1">
                <tr>

                <th>value for "<code>type</code>" tag
                attribute</th>

                <th>Type of event sent to listener method
                </th>

                </tr>

                <tr>

                <td>preRenderComponent
                </td>

                <td>javax.faces.event.PreRenderComponentEvent
                </td>

                </tr>

                <tr>

                <td>postAddToView
                </td>

                <td>javax.faces.event.PostAddToViewEvent
                </td>

                </tr>

                <tr>

                <td>preValidate
                </td>

                <td>javax.faces.event.PreValidateEvent
                </td>

                </tr>

                <tr>

                <td>postValidate
                </td>

                <td>javax.faces.event.PostValidateEvent
                </td>

                </tr>

                </table>

                <div class="changed_added_2_0">

                <p>In addition to these values, the fully qualified class
                name of any
                java class that extends
                <code>javax.faces.event.ComponentSystemEvent</code>
                may be used as the
                value of the "type" attribute.</p>

                <p>Also, the <code>@javax.faces.event.NamedEvent</code>
                annotation may
                be attached to any java class that extends
                <code>javax.faces.event.ComponentSystemEvent</code>.
                This enables that
                event to be referenced from this attribute, as descibed in the
                javadocs
                for <code>@NamedEvent</code>.</p>

                </div>


            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="listener" use="required">
<xs:annotation>
<xs:documentation><![CDATA[

              <p class="changed_modified_2_0_rev_a">The expression must
              evaluate to a public method that takes a
              <code>ComponentSystemEvent</code> parameter, with a return
              type of void, or to a public method that takes no
              arguments with a return type of void. In the latter case,
              the method has no way of easily knowing where the event
              came from, but this can be useful in cases where a
              notification is needed that "an event happened".</p>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="facet">
<xs:annotation>
<xs:documentation><![CDATA[

            <p>Register a named facet on the UIComponent associated with
            the closest parent UIComponent custom action.</p>


        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="name" use="required">
<xs:annotation>
<xs:documentation><![CDATA[
                Name of the facet to be created.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="metadata">
<xs:annotation>
<xs:documentation><![CDATA[

            <p class="changed_added_2_0">Declare the metadata
            facet for this view. This must be a child of the
            <code>&amp;lt;f:view&amp;gt;</code>. This tag
            must reside within the top level XHTML file for the given
            viewId<span class="changed_modified_2_0_rev_a">, or in a
            template client, but</span> not in a template. The
            implementation must insure that the direct child of the
            facet is a <code>UIPanel</code>, even if there
            is only one child of the facet. The implementation must set
            the id of the <code>UIPanel</code> to be the
            value of the
            <code>UIViewRoot.METADATA_FACET_NAME</code>
            symbolic constant.</p>

            <div class="changed_added_2_0">

            <p>The implementation must allow templating for this element
            according
            to the following pattern.</p>

            <p>template client XHTML view, view01.xhtml</p>

            </div>

            <div class="html4strict" style="font-family: monospace;"><ol><li
            class="li1"><div class="de1"><span class="sc2">&amp;lt;ui:composition
            template=<span class="st0">&amp;quot;template.xhtml&amp;quot;</span><span
            class="kw2">&amp;gt;</span></span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; &amp;nbsp;
            <span class="sc2">&amp;lt;ui:define <span class="kw3">name</span>=<span
            class="st0">&amp;quot;metadata&amp;quot;</span><span
            class="kw2">&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1">&amp;nbsp; &amp;nbsp;
            &amp;nbsp; <span class="sc2">&amp;lt;f:metadata&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; &amp;nbsp;
            &amp;nbsp; &amp;nbsp; <span class="sc2">&amp;lt;f:viewParam
            <span class="kw3">name</span>=<span class="st0">&amp;quot;id&amp;quot;</span>/<span
            class="kw2">&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1">&amp;nbsp; &amp;nbsp;
            &amp;nbsp; <span class="sc2"><span class="kw2">&amp;lt;</span>/f:metadata&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; &amp;nbsp;
            <span class="sc2"><span class="kw2">&amp;lt;</span>/ui:define&amp;gt;</span></div></li>
            <li class="li1"><div class="de1">&amp;nbsp; &amp;nbsp;
            <span class="sc2">&amp;lt;ui:define <span class="kw3">name</span>=<span
            class="st0">&amp;quot;content&amp;quot;</span><span
            class="kw2">&amp;gt;</span></span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; &amp;nbsp;
            &amp;nbsp; &amp;nbsp; <span class="sc2"><span class="kw2">&amp;lt;h1&amp;gt;</span></span>The
            big news stories of the day<span class="sc2"><span
            class="kw2">&amp;lt;/h1&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1">&amp;nbsp; &amp;nbsp;
            <span class="sc2"><span class="kw2">&amp;lt;</span>/ui:define&amp;gt;</span></div></li>
            <li class="li2"><div class="de2"><span class="sc2"><span
            class="kw2">&amp;lt;</span>/ui:composition&amp;gt;</span>
            </div></li></ol></div></div>

            <div class="changed_added_2_0">
            <p>Note line 4. The page author must ensure that the
            <code>&amp;lt;f:metadata&amp;gt;</code> element does not
            appear on a template or
            included page. It must reside on the root page that corresponds to
            the
            viewId.</p>

            <p>The template page, template.xhtml</p>

            </div>


            <div class="html4strict" style="font-family: monospace;"><ol><li
            class="li1"><div class="de1"><span class="sc2"><span
            class="kw2">&amp;lt;html</span> xmlns=<span class="st0">&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; &amp;nbsp;
            &amp;nbsp; xmlns:ui=<span class="st0">&amp;quot;http://xmlns.jcp.org/jsf/facelets&amp;quot;</span></div></li>
            <li class="li1"><div class="de1">&amp;nbsp; &amp;nbsp;
            &amp;nbsp; xmlns:f=<span class="st0">&amp;quot;http://xmlns.jcp.org/jsf/core&amp;quot;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; &amp;nbsp;
            &amp;nbsp; xml:<span class="kw3">lang</span>=<span
            class="st0">&amp;quot;en&amp;quot;</span> <span
            class="kw3">lang</span>=<span class="st0">&amp;quot;en&amp;quot;</span><span
            class="kw2">&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1">&amp;nbsp;</div></li>
            <li class="li2"><div class="de2"><span class="sc2"><span
            class="kw2">&amp;lt;body&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1"><span class="sc2">&amp;lt;f:view&amp;gt;</span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; &amp;nbsp;
            </div></li>
            <li class="li1"><div class="de1">&amp;nbsp; &amp;nbsp;
            &amp;nbsp; &amp;nbsp; <span class="sc2">&amp;lt;ui:insert <span
            class="kw3">name</span>=<span class="st0">&amp;quot;metadata&amp;quot;</span>/<span
            class="kw2">&amp;gt;</span></span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; &amp;nbsp;</div></li>
            <li class="li1"><div class="de1">&amp;nbsp; &amp;nbsp;
            <span class="sc2"><span class="kw2">&amp;lt;div</span>
            <span class="kw3">id</span>=<span class="st0">&amp;quot;container&amp;quot;</span><span
            class="kw2">&amp;gt;</span></span></div></li>
            <li class="li2"><div class="de2">&amp;nbsp; &amp;nbsp;
            &amp;nbsp; &amp;nbsp; <span class="sc2">&amp;lt;ui:insert <span
            class="kw3">name</span>=<span class="st0">&amp;quot;content&amp;quot;</span>/<span
            class="kw2">&amp;gt;</span></span></div></li>
            <li class="li1"><div class="de1">&amp;nbsp; &amp;nbsp;
            <span class="sc2"><span class="kw2">&amp;lt;/div&amp;gt;</span></span></div></li>
            <li class="li2"><div class="de2"><span class="sc2"><span
            class="kw2">&amp;lt;</span>/f:view&amp;gt;</span></div></li>
            <li class="li1"><div class="de1"><span class="sc2"><span
            class="kw2">&amp;lt;/body&amp;gt;</span></span></div></li>
            <li class="li2"><div class="de2"><span class="sc2"><span
            class="kw2">&amp;lt;/html&amp;gt;</span></span> </div></li></ol></div></div>

            <p>The page author is not <em>required</em> to use
            templating, but if
            they do, it must be done as shown above, (or with
            <code>&amp;lt;ui:include&amp;gt;</code> in a similar
            manner).</p>

            </div>


        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
</xs:complexType>
</xs:element>
<xs:element name="loadBundle">
<xs:annotation>
<xs:documentation><![CDATA[
            Load a resource bundle localized for the Locale of the current
            view, and expose it as a java.util.Map in the request attributes
            of the current request under the key specified by the value of the
            "var" attribute of this tag. The Map must behave such that if a
            get() call is made for a key that does not exist in the Map, the
            literal string ???KEY??? is returned from the Map, where KEY is
            the key being looked up in the Map, instead of a
            MissingResourceException being thrown. If the ResourceBundle does
            not exist, a JspException must be thrown.
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="basename">
<xs:annotation>
<xs:documentation><![CDATA[
                Base name of the resource bundle
                to be loaded.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var" use="required">
<xs:annotation>
<xs:documentation><![CDATA[
                Name of a request scope attribute under which
                the resource bundle will be exposed as a Map.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="param">
<xs:annotation>
<xs:documentation><![CDATA[
            Add a child UIParameter component to the UIComponent
            associated with the closest parent UIComponent custom
            action.
        ]]></xs:documentation>
<xs:documentation>component-type: javax.faces.Parameter</xs:documentation>
<xs:documentation>renderer-type: </xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                ValueExpression to a backing bean
                property bound to the component instance for
                the UIComponent created by this custom action.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[
                Component identifier of the UIParameter component
                to be created.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name">
<xs:annotation>
<xs:documentation><![CDATA[
                Name of the parameter to be created.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[
                Value of the parameter to be set.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disable">
<xs:annotation>
<xs:documentation><![CDATA[

                <p>Flag enabling or disabling the inclusion of the
                parameter.  <span
                class="changed_modified_2_0_rev_a">This flag is
                consulted by renderers that consider the
                <code>UIParameter</code> component associated with this
                <code><f:param></code> during their rendering.
                Such renderers include <code>javax.faces.Output
                javax.faces.Link</code> and
                <code>javax.faces.OutcomeTarget
                javax.faces.Link</code>.</span></p>


            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="viewParam">
<xs:annotation>
<xs:documentation><![CDATA[

            <p class="changed_added_2_0">Used inside of the metada facet
            of a view, this tag causes a <a target="_"
            href="../../../javadocs/javax/faces/component/UIViewParameter.html">UIViewParameter</a>
            to be attached as metadata for the current view. Because
            <code>UIViewParameter</code> extends <code>UIInput</code>
            all of the attributes and nested child content for any
            <code>UIInput</code> tags are valid on this tag as well.</p>

        ]]></xs:documentation>
<xs:documentation>component-type: javax.faces.Parameter</xs:documentation>
<xs:documentation>renderer-type: </xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="name" use="required">
<xs:annotation>
<xs:documentation><![CDATA[
                The name of the request parameter from which the value for this component
                is retrieved on an initial request or to override the stored value on a
                postback.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converter">
<xs:annotation>
<xs:documentation><![CDATA[
                Converter instance registered with this component.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="converterMessage">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="required">
<xs:annotation>
<xs:documentation><![CDATA[
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="requiredMessage">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validator">
<xs:annotation>
<xs:documentation><![CDATA[
                MethodExpression representing a validator method that will be
                called
                during Process Validations to perform correctness checks on the
                value of this component. The expression must evaluate to a
                public
                method that takes FacesContext, UIComponent, and Object
                parameters,
                with a return type of void.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorMessage">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression to which the value of the request parameter, as
                determined by the name attribute, is bound. The resolved value of this
                expression is used when encoding the view parameter into a bookmarkable link or
                redirect URL with view parameter encoding enabled. If this attribute is omitted,
                the value of the request parameter will instead be the local value of the
                UIViewParameter.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[
                <p>

                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component. The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code>
                parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void. In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>

                </p>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maxlength">
<xs:annotation>
<xs:documentation><![CDATA[
                The maximum number of characters that may
                be entered in this field.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                The ValueExpression linking this component to a property in a
                backing bean
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0"><span
                class="changed_deleted_2_0_rev_a">If present, this
                attribute refers to the value of one of the exposed
                attached objects within the composite component inside
                of which this tag is nested.</span></p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="phaseListener">
<xs:annotation>
<xs:documentation><![CDATA[
            Register a PhaseListener instance on the UIViewRoot in which
            this tag is nested.
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[
                Fully qualified Java class name of an PhaseListener to be
                created and registered.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                Value binding expression that evaluates to an object that
                implements javax.faces.event.PhaseListener.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="selectItem">
<xs:annotation>
<xs:documentation><![CDATA[
            Add a child UISelectItem component to the UIComponent
            associated with the closest parent UIComponent custom
            action.
        ]]></xs:documentation>
<xs:documentation>component-type: javax.faces.SelectItem</xs:documentation>
<xs:documentation>renderer-type: </xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                Value binding expression to a backing bean
                property bound to the component instance for
                the UIComponent created by this custom action.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[
                Component identifier of the UISelectItem
                component to be created.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemDescription">
<xs:annotation>
<xs:documentation><![CDATA[
                Description of this option, for use in
                development tools.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemDisabled">
<xs:annotation>
<xs:documentation><![CDATA[
                Flag indicating whether the option created
                by this component is disabled. Expressions
                must evaluate to a boolean. Default value
                is false.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemLabel">
<xs:annotation>
<xs:documentation><![CDATA[
                Label to be displayed to the user
                for this option.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemEscaped">
<xs:annotation>
<xs:documentation><![CDATA[
                Flag indicating that characters that are sensitive in
                the value of the <code>itemLabel</code>
                attribute must be escaped. This flag is set to "true" by
                default.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemValue">
<xs:annotation>
<xs:documentation><![CDATA[
                Value to be returned to the server if this
                option is selected by the user.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[
                Value binding expression pointing at a
                SelectItem instance containing the
                information for this option.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="noSelectionOption">
<xs:annotation>
<xs:documentation><![CDATA[
                Flag indicating whether the option created by this
                component represents the special "no selection"
                option. Expressions must evaluate to a boolean.
                Default value is false.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="selectItems">
<xs:annotation>
<xs:documentation><![CDATA[
            <p><span class="changed_modified_2_0">Add</span> a
            child UISelectItems component to the UIComponent associated
            with the closed parent UIComponent custom action.</p>

            <p class="changed_modified_2_0">When iterating over the
            select items, <code>toString()</code> must be called on
            the
            string rendered attribute values.</p>

            <p class="changed_added_2_0">Version 2 of the specification
            introduces
            several new attributes, described below. These are: var, itemValue,
            itemLabel, itemDescription, itemDisabled, and itemLabelEscaped.</p>


        ]]></xs:documentation>
<xs:documentation>component-type: javax.faces.SelectItems</xs:documentation>
<xs:documentation>renderer-type: </xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                Value binding expression to a backing bean
                property bound to the component instance for
                the UIComponent created by this custom action.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[
                Flag indicating whether this component (and its
                children) should be rendered.  Expressions must
                evaluate to a boolean.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="actionListener">
<xs:annotation>
<xs:documentation><![CDATA[
                <p>
                
                MethodExpression representing an action listener method that
                will be notified when this component is activated by the user.
                The expression must evaluate to a public method that takes an
                ActionEvent parameter, with a return type of void, <span
                class="changed_added_2_0">or to a public method that takes no
                arguments with a return type of void.  In the latter case, the
                method has no way of easily knowing where the event came from,
                but this can be useful in cases where a notification is needed
                that "some action happened".</span>
                
                </p>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[
                Component identifier of the UISelectItems
                component to be created.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value">
<xs:annotation>
<xs:documentation><![CDATA[


                <p>Value expression pointing at <span
                class="changed_modified_2_0">any <code>Collection</code>
                or array.</span> The member elements may be instances of
                <code>SelectItem</code> <span
                class="changed_added_2_0">or any Java Object. In the
                case where the member elements are plain Java Objects,
                several additional attributes must be used by the page
                author to correctly identify the data to the enclosing
                <code>UISelectOne</code> or <code>UISelectMany</code>
                component, as shown in the following example.</span>

                <div class="syntax"><div class="html4strict"
                style="font-family: monospace;"><ol><li class="li1"><div
                class="de1"><span class="sc2">&amp;lt;h:selectOneListbox
                <span class="kw3">size</span>=<span class="st0">&amp;quot;1&amp;quot;</span>
                <span class="kw3">id</span>=<span class="st0">&amp;quot;escape02&amp;quot;</span>
                <span class="kw3">value</span>=<span class="st0">&amp;quot;#{select05NoSelection.initialCollectionValues}&amp;quot;</span><span
                class="kw2">&amp;gt;</span></span></div></li>
                <li class="li2"><div class="de2">&amp;nbsp; <span
                class="sc2">&amp;lt;f:selectItems <span class="kw3">value</span>=<span
                class="st0">&amp;quot;#{select05NoSelection.hobbitList}&amp;quot;</span></div></li>
                <li class="li1"><div class="de1">&amp;nbsp; &amp;nbsp;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
                &amp;nbsp;var=<span class="st0">&amp;quot;n&amp;quot;</span></div></li>
                <li class="li2"><div class="de2">&amp;nbsp; &amp;nbsp;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
                &amp;nbsp;itemValue=<span class="st0">&amp;quot;#{n}&amp;quot;</span></div></li>
                <li class="li1"><div class="de1">&amp;nbsp; &amp;nbsp;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
                &amp;nbsp;itemLabel=<span class="st0">&amp;quot;#{n.bio}&amp;quot;</span></div></li>
                <li class="li2"><div class="de2">&amp;nbsp; &amp;nbsp;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
                &amp;nbsp;itemDescription=<span class="st0">&amp;quot;#{n.description}&amp;quot;</span></div></li>
                <li class="li1"><div class="de1">&amp;nbsp; &amp;nbsp;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
                &amp;nbsp;itemDisabled=<span class="st0">&amp;quot;#{n.disabled}&amp;quot;</span></div></li>
                <li class="li2"><div class="de2">&amp;nbsp; &amp;nbsp;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
                &amp;nbsp;itemLabelEscaped=<span class="st0">&amp;quot;true&amp;quot;</span></div></li>
                <li class="li1"><div class="de1">&amp;nbsp; &amp;nbsp;
                &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;
                &amp;nbsp;noSelectionValue=<span class="st0">&amp;quot;#{select05NoSelection.hobbitList[0]}&amp;quot;</span>/<span
                class="kw2">&amp;gt;</span></span></div></li>
                <li class="li2"><div class="de2"><span
                class="sc2"><span class="kw2">&amp;lt;</span>/h:selectOneListbox&amp;gt;</span>
                </div></li></ol></div></div>

                <p class="changed_added_2_0">In the preceding example, the
                <code>value</code> attribute on line 1 points to a
                <code>Collection&amp;lt;HobbitBean&amp;gt;</code>.
                <code>HobbitBean</code> is
                just a regular Java Object (POJO) that conforms to JavaBeans
                naming
                conventions for its properties. The <code>value</code>
                attribute on
                line 2 points to a <code>List&amp;lt;HobbitBean&amp;gt;</code>,
                though it could
                just as well point to a <code>Collection</code>,
                array, or
                <code>javax.faces.model.DataModel</code>. The
                attributes on lines 3
                through 9, inclusive, leverage the fact that the value is a
                collection
                of POJOs.
                </p>


                </p>


            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var">
<xs:annotation>
<xs:documentation><![CDATA[


                <p class="changed_added_2_0">Expose the value from the
                <code>value</code> attribute under this request
                scoped key so that it
                may be referred to in EL for the value of other attributes.</p>


            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemValue">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">evaluates to a
                <code>Collection</code>, array, or <code>Map</code>
                from which the items
                to be shown will be rendered.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemLabel">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">evaluates to a String that
                will
                serve as the label to be shown for the item.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemDescription">
<xs:annotation>
<xs:documentation><![CDATA[


                <p class="changed_added_2_0">evaluates to a String that
                will
                serve as the description to be shown for the item.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemDisabled">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">evaluates to a boolean that
                will
                determine if the item value is selectable or not.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="itemLabelEscaped">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">evaluates to a boolean that
                will
                determine if the rendered markup for the item receives normal
                JSF HTML escaping or not.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="noSelectionValue">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">Is either an EL expression
                pointing to the element in the value collection whose value
                should be
                marked as a &amp;#8220;no selection&amp;#8221; item, or a
                literal string that
                exactly matches the value of the item in the collection that
                must be
                marked as the &amp;#8220;no selection&amp;#8221; item. If the
                user selects such
                an item <strong>and</strong> the field is marked as
                required, then it
                will not pass validation.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="setPropertyActionListener">
<xs:annotation>
<xs:documentation><![CDATA[
            <p>Register an ActionListener instance on the UIComponent
            associated with the closest parent UIComponent custom action.
            This actionListener will cause the value given by the "value"
            attribute to be set into the ValueExpression given by the "target"
            attribute.</p>

            <p>The implementation of this tag creates a special
            <code>ActionListener</code> instance and registers it on
            the
            <code>ActionSource</code> associated with our most
            immediate surrounding
            instance of a tag whose implementation class is a subclass of
            <code>UIComponentTag</code>. This tag creates no output
            to the page
            currently being created.</p>

            <p>The <code>ActionListener</code> instance
            created and installed by
            this tag has the following behavior and contract.</p>

            <ul>

            <li>Only create and register the <code>ActionListener</code>
            instance
            the first time the component for this tag is created</li>

            <li>The "target" and "value" tag attributes are
            ValueExpression
            instances and are stored unevaluated as instance variables of the
            listener.</li>

            <li>When the listener executes, perform the following:
            <ul>
            Call getValue() on the "value" ValueExpression.
            </ul>
            <ul>
            If value of the "value" expression is null, call setValue() on
            the "target" ValueExpression with the null value.
            </ul>
            <ul>
            If the value of the "value" expression is not null, call getType()
            on the "value" and "target" ValueExpressions to determine their
            property types.
            </ul>
            <ul>
            Coerce the value of the "value" expression to the "target"
            expression value type following the Expression Language coercion
            rules. Call setValue() on the "target" ValueExpression with the
            resulting value.
            </ul>
            <ul>
            If either coercion or the execution of setValue() fails throw an
            AbortProcessingException.
            </ul>
            </li>

            </ul>
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[
                ValueExpression to be stored as the value of the target
                attribute.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="target" use="required">
<xs:annotation>
<xs:documentation><![CDATA[
                ValueExpression that is the destination of the value
                attribute.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">If present, this attribute
                refers
                to the value of one of the exposed attached objects within the
                composite component inside of which this tag is nested.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="subview">
<xs:annotation>
<xs:documentation><![CDATA[
            Container action for all JavaServer Faces core and
            custom component actions used on a nested page via
            "jsp:include" or any custom action that dynamically
            includes another page from the same web application,
            such as JSTL's "c:import".
        ]]></xs:documentation>
<xs:documentation>component-type: javax.faces.NamingContainer</xs:documentation>
<xs:documentation>renderer-type: </xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                Value binding expression to a backing bean
                property bound to the component instance for
                the UIComponent created by this custom action.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="id" use="required">
<xs:annotation>
<xs:documentation><![CDATA[
                Component identifier of the UINamingContainer
                component to be created.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[
                Flag indicating whether this component (and its
                children) should be rendered. Expressions must
                evaluate to a boolean.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="validateDoubleRange">
<xs:annotation>
<xs:documentation><![CDATA[
            Register a DoubleRangeValidator instance on the
            UIComponent associated with the closest parent
            UIComponent custom action.
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">A boolean value
                enabling page level determination of whether or not this
                validator is enabled on the enclosing component.</p>


            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maximum">
<xs:annotation>
<xs:documentation><![CDATA[
                Maximum value allowed for this component.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minimum">
<xs:annotation>
<xs:documentation><![CDATA[
                Minimum value allowed for this component.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                DoubleRangeValidator.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">If present, this attribute
                refers
                to the value of one of the exposed attached objects within the
                composite component inside of which this tag is nested.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="validateLength">
<xs:annotation>
<xs:documentation><![CDATA[
            Register a LengthValidator instance on the
            UIComponent associated with the closest parent
            UIComponent custom action.
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">A boolean value
                enabling page level determination of whether or not this
                validator is enabled on the enclosing component.</p>


            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maximum">
<xs:annotation>
<xs:documentation><![CDATA[
                Maximum length allowed for this component.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minimum">
<xs:annotation>
<xs:documentation><![CDATA[
                Minimum length allowed for this component.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                LenghtValidator.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">If present, this attribute
                refers
                to the value of one of the exposed attached objects within the
                composite component inside of which this tag is nested.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="validateLongRange">
<xs:annotation>
<xs:documentation><![CDATA[
            Register a LongRangeValidator instance on the
            UIComponent associated with the closest parent
            UIComponent custom action.
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">A boolean value
                enabling page level determination of whether or not this
                validator is enabled on the enclosing component.</p>


            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="maximum">
<xs:annotation>
<xs:documentation><![CDATA[
                Maximum value allowed for this component.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="minimum">
<xs:annotation>
<xs:documentation><![CDATA[
                Minimum value allowed for this component.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                LongRangeValidator.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">If present, this attribute
                refers
                to the value of one of the exposed attached objects within the
                composite component inside of which this tag is nested.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="validateBean">
<xs:annotation>
<xs:documentation><![CDATA[<p>

            <span class="changed_added_2_0">
            A validator that delegates the validation of the local value
            to the Bean Validation API. The validationGroups attribute
            serves as a filter that instructs the Bean Validation API which
            contraints to enforce. If there are any constraint violations
            reported by Bean Validation, the value is considered invalid.

            </p>
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="validationGroups">
<xs:annotation>
<xs:documentation><![CDATA[
                A comma-separated list of validation groups. A validation group
                is a fully-qualified class name.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">A boolean value
                enabling page level determination of whether or not this
                validator is enabled on the enclosing component.</p>


            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                BeanValidator.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">If present, this attribute
                refers
                to the value of one of the exposed attached objects within the
                composite component inside of which this tag is nested.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="validateRegex">
<xs:annotation>
<xs:documentation><![CDATA[<p>

            <span class="changed_added_2_0">
            A validator that uses the pattern attribute to validate the
            wrapping component. The entire pattern is matched against
            the String value of the component. If it matches, it's
            valid.

            </p>
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">A boolean value
                enabling page level determination of whether or not this
                validator is enabled on the enclosing component.</p>


            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="pattern" use="required">
<xs:annotation>
<xs:documentation><![CDATA[
                A regular expression pattern. Remember that, like in
                all Java strings, backslash must be escaped with another
                backslash.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                RegexValidator.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">If present, this attribute
                refers
                to the value of one of the exposed attached objects within the
                composite component inside of which this tag is nested.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="validateRequired">
<xs:annotation>
<xs:documentation><![CDATA[

            <p class="changed_added_2_0">A validator that enforces
            the presence of a value. It has the same affect as setting the
            required attribute on a UIInput to true.</p>

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">A boolean value
                enabling page level determination of whether or not this
                validator is enabled on the enclosing component.</p>


            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression that evaluates to an instance of
                RequiredValidator.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">If present, this attribute
                refers
                to the value of one of the exposed attached objects within the
                composite component inside of which this tag is nested.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="validator">
<xs:annotation>
<xs:documentation><![CDATA[

            <p><span class="changed_modified_2_0">Register</span>
            a named
            Validator instance on the UIComponent associated with the
            closest parent UIComponent custom action.</p>

            <div class="changed_added_2_0">

            <p>Usage outside of an <code>EditableValueHolder</code>
            parent</p>

            <p>If this element is nested within a
            <code>UIComponent</code> tag that has other
            <code>UIComponent</code> children, the validator will be
            automatically added to all the child components as well as
            this one. The implementation must ensure this occurs even if
            the parent of this element is not an instance of
            <code>EditableValueHolder</code>.</p>

            </div>

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="disabled">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_0">A boolean value
                enabling page level determination of whether or not this
                validator is enabled on the enclosing component.</p>


            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="validatorId">
<xs:annotation>
<xs:documentation><![CDATA[
                Validator identifier of the Validator
                to be created and registered.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                A ValueExpression that evaluates to an object that implements
                the javax.faces.validator.Validator interface.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">If present, this attribute
                refers
                to the value of one of the exposed attached objects within the
                composite component inside of which this tag is nested.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="valueChangeListener">
<xs:annotation>
<xs:documentation><![CDATA[
            Register a ValueChangeListener instance on the UIComponent
            associated with the closest parent UIComponent custom
            action.
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="type">
<xs:annotation>
<xs:documentation><![CDATA[
                Fully qualified Java class name of a
                ValueChangeListener to be created and registered.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[
                Value binding expression that evaluates to an object that
                implements javax.faces.event.ValueChangeListener.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="for">
<xs:annotation>
<xs:documentation><![CDATA[

                <p class="changed_added_2_0">If present, this attribute
                refers
                to the value of one of the exposed attached objects within the
                composite component inside of which this tag is nested.</p>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="verbatim">
<xs:annotation>
<xs:documentation><![CDATA[
            Create and register a child UIOutput component
            associated with the closest parent UIComponent
            custom action, which renders nested body content.
        ]]></xs:documentation>
<xs:documentation>component-type: javax.faces.Output</xs:documentation>
<xs:documentation>renderer-type: javax.faces.Text</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="escape">
<xs:annotation>
<xs:documentation><![CDATA[
                Flag indicating that generated markup must
                be escaped in a manner that is appropriate
                for the markup language to be rendered.
                Expressions must evaluate to a boolean.
                Default value is false.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="view">
<xs:annotation>
<xs:documentation><![CDATA[
            Container for all JavaServer Faces core and custom
            component actions used on a page.
        ]]></xs:documentation>
<xs:documentation>component-type: javax.faces.ViewRoot</xs:documentation>
<xs:documentation>renderer-type: </xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="locale">
<xs:annotation>
<xs:documentation><![CDATA[
                Locale to use for localizing this page. Expressions
                must evaluate to a java.util.Locale or to a String
                that is converted to a Locale.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="transient">
<xs:annotation>
<xs:documentation><![CDATA[
                <p class="changed_added_2_2">If
                <code>true</code>, this view must not participate in
                state saving or restoring.  Note that transient views
                may not be used with <code>@ViewScoped</code> managed
                beans.  The implementation must call
                <code>setTransient()</code> on the
                <code>UIViewRoot</code>, passing the value of the
                attribute as specified in the markup.</p>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="contracts">
<xs:annotation>
<xs:documentation><![CDATA[
          
          <p class="changed_added_2_2">A comma separated list of
          resource library contracts that may be used from within
          the Facelets chain.  If this attribute is present, it
          must only be on the outer-most file in the chain of
          files that started ultimately with a call to
          <code>ViewDeclarationLanguage.createView()</code>.  Any
          use of this attribute on a non-outer-most file must be
          silently ignored.</p>
          
          <p class="changed_added_2_2">If this attribute exists on the tag,
          empty or not, the tag handler must create a
          <code>List&lt;String&gt;</code> for the value of the attribute and
          unconditionally call
          <code>FacesContext.setRresourceLibraryContracts()</code> passing
          that list value.</p>
          
          ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="renderKitId">
<xs:annotation>
<xs:documentation><![CDATA[
                Identifier for the RenderKit to use for
                rendering this page.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="contentType">
<xs:annotation>
<xs:documentation><![CDATA[
                Specifies the content-type of the response.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="encoding">
<xs:annotation>
<xs:documentation><![CDATA[
                Specifies the character encoding that should be used for the
                response.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="beforePhase">
<xs:annotation>
<xs:documentation><![CDATA[

                MethodBinding pointing to a method that takes a
                javax.faces.event.PhaseEvent and returns void. This method
                will be called before every phase except for restore view.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="afterPhase">
<xs:annotation>
<xs:documentation><![CDATA[

                MethodBinding pointing to a method that takes a
                javax.faces.event.PhaseEvent and returns void. This method
                will be called after every phase except for restore view.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="viewAction">
<xs:annotation>
<xs:documentation><![CDATA[
            This action component specifies an application-specific command (or action), 
            using an EL method expression, to be invoked during one of the JSF lifecycle
            phases proceeding Render Response (i.e., view rendering).
        ]]></xs:documentation>
<xs:documentation>component-type: javax.faces.ViewAction</xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="action" use="required">
<xs:annotation>
<xs:documentation><![CDATA[
                Method expression referencing the action method to be invoked by the
                component. View actions support declarative navigation just like 
                UICommand components.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onPostback">
<xs:annotation>
<xs:documentation><![CDATA[
                By default, a view action is not executed on postback. If your application 
                is decidedly stateless, you may need the view action to execute on any type 
                of request. The default value is false.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="if">
<xs:annotation>
<xs:documentation><![CDATA[
                You may only want the view action to be invoked under certain conditions. 
                For that, you can use this attribute, which accepts an EL value expression
                that must evaluate to a boolean value.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="immediate">
<xs:annotation>
<xs:documentation><![CDATA[
                Setting the immediate attribute to true moves the invocation to the 
                Apply Request Values phase instead of the default, the Invoke Application 
                phase. The default value is false.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="phase">
<xs:annotation>
<xs:documentation><![CDATA[
                Specifies the phase in which the action invocation should occur 
                using the name of the phase constant in the PhaseId class (the case does 
                not matter). The default is INVOKE_APPLICATION.
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
</xs:schema>
