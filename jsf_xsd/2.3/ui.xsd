<?xml version="1.0" encoding="UTF-8"?><!-- Generated by TaglibToXSD XSLT modified by Dawid Pytel https://github.com/destin/jsf-goodies--><!-- Original XSLT created by + Mark A. Ziesemer, http://www.ziesemer.com + 2008-03-25 --><xs:schema version="1.0" xml:lang="en" elementFormDefault="qualified" targetNamespace="http://xmlns.jcp.org/jsf/facelets" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:annotation>
<xs:documentation>&lt;div class="changed_added_2_0"&gt; &lt;p&gt;&lt;span class="changed_modified_2_3"&gt;The&lt;/span&gt; tags in this library add templating &amp;mdash; a powerful view composition technique &amp;mdash; to JSF. Templating is so useful that there are entire frameworks, such as Tiles and SiteMesh, that are built around the concept of templating. So what is templating, how can you benefit from it, and how does this tag library implement it? &lt;/p&gt; &lt;p&gt;If you've used JSP before, you've probably used &lt;code&gt;jsp:include&lt;/code&gt;. The prototypical example for &lt;code&gt;jsp:include&lt;/code&gt; is a header on each page in a web application. One JSP page, say header.jsp, encapsulates the header content, and the header is included by each page. You &lt;em&gt;encapsulate and reuse content&lt;/em&gt;, so that changes to one file, header.jsp, affect the header on every page. &lt;/p&gt; &lt;p&gt;This tab library contains a tag &amp;mdash;&lt;code&gt;ui:include&lt;/code&gt; &amp;mdash; that's analagous to &lt;code&gt;jsp:include&lt;/code&gt;, but encapsulating and reusing content is only half the templating story, because templating also lets you &lt;em&gt;encapsulate and reuse &lt;b&gt;layout&lt;/b&gt;&lt;/em&gt;. You define a single &lt;em&gt;template&lt;/em&gt; (meaning layout), and you reuse that template with multiple &lt;em&gt;compositions&lt;/em&gt;. So now you can control the layout of many pages with a single template (layout). Let's take a look at an example. &lt;/p&gt; &lt;h3&gt;A Templating Example&lt;/h3&gt; &lt;p&gt; First, we define a template: &lt;/p&gt; &lt;div class="syntax"&gt;&lt;div class="html4strict" style="font-family: monospace;"&gt;&lt;ol&gt;&lt;li class="li1"&gt;&lt;div class="de1"&gt;&lt;span class="sc0"&gt;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="re0"&gt;xmlns&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; xmlns:&lt;span class="re0"&gt;ui&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;http://xmlns.jcp.org/jsf/facelets&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;head&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="re0"&gt;href&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;styles.css&amp;quot;&lt;/span&gt; &lt;span class="re0"&gt;rel&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="re0"&gt;type&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;title&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:insert &lt;span class="re0"&gt;name&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Default Title&lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/ui&lt;/span&gt;:insert&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/title&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/head&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;body&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:debug&lt;span class="re2"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="re0"&gt;class&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;heading&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:insert &lt;span class="re0"&gt;name&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;heading&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/div&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="re0"&gt;class&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:insert &lt;span class="re0"&gt;name&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/div&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/body&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/html&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt; In the preceeding listing, we've defined a layout, also known as a template. That template uses the &lt;code&gt;ui:insert&lt;/code&gt; tag to insert pieces of a page &amp;mdash; namely, title, heading, and content &amp;mdash; defined in a &lt;em&gt;composition&lt;/em&gt;. Notice that on line 8, we define a default title, in case one isn't provided by the composition. Also note that on line 12 we have the &lt;code&gt;ui:debug&lt;/code&gt; tag, which lets the user activate a popup window with debugging information by typing CTRL + Shift + d. &lt;/p&gt; &lt;p&gt; The title, heading, and content pieces of the page referenced in the template are defined in a separate XHTML file in a composition, like this: &lt;/p&gt; &lt;div class="syntax"&gt;&lt;div class="html4strict" style="font-family: monospace;"&gt;&lt;ol&gt;&lt;li class="li1"&gt;&lt;div class="de1"&gt;&lt;span class="sc0"&gt;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="re0"&gt;xmlns&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp;xmlns:&lt;span class="re0"&gt;ui&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;http://xmlns.jcp.org/jsf/facelets&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;body&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:composition &lt;span class="re0"&gt;template&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;/layout.xhtml&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:define &lt;span class="re0"&gt;name&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;A List of Contacts&lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/ui&lt;/span&gt;:define&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:define &lt;span class="re0"&gt;name&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;heading&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Contacts&lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/ui&lt;/span&gt;:define&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:define &lt;span class="re0"&gt;name&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:include &lt;span class="re0"&gt;src&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;contactsTable.xhtml&amp;quot;&lt;/span&gt; &lt;span class="re2"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/ui&lt;/span&gt;:define&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/ui&lt;/span&gt;:composition&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/body&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/html&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt; At runtime, JSF synthesizes the two previous XHTML pages to create a single JSF view by inserting the pieces defined in the composition into the template (that template is layout.xhtml, which is the first listing above). JSF also disregards everything outside of the &lt;code&gt;composition&lt;/code&gt; tag so that we don't wind up with two &lt;code&gt;body&lt;/code&gt; elements in the view. Also, note that we use the &lt;code&gt;ui:include&lt;/code&gt; tag on line 14 to include content (which happens to be a table) from another XHTML page, so that we can reuse that table in other views. &lt;/p&gt; &lt;p&gt; So why do we have two XHTML pages to define a single view? Why not simply take the pieces and manually insert them into the layout so that we have only a single XHTML page? The answer is simple: we have separated layout from the content so that we can &lt;em&gt;reuse that layout&lt;/em&gt; among multiple compositions. For example, now we can define another composition that uses the same layout: &lt;/p&gt; &lt;div class="syntax"&gt;&lt;div class="html4strict" style="font-family: monospace;"&gt;&lt;ol&gt;&lt;li class="li1"&gt;&lt;div class="de1"&gt;&lt;span class="sc0"&gt;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="re0"&gt;xmlns&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; xmlns:&lt;span class="re0"&gt;ui&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;http://xmlns.jcp.org/jsf/facelets&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;body&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:composition &lt;span class="re0"&gt;template&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;/layout.xhtml&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:define &lt;span class="re0"&gt;name&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Create a Contact&lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/ui&lt;/span&gt;:define&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:define &lt;span class="re0"&gt;name&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;heading&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Create Contact&amp;lt;/ui&lt;/span&gt;:define&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:define &lt;span class="re0"&gt;name&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;ui&lt;/span&gt;:include &lt;span class="re0"&gt;src&lt;/span&gt;=&lt;span class="st0"&gt;&amp;quot;createContactForm.xhtml&amp;quot;&lt;/span&gt;&lt;span class="re2"&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/ui&lt;/span&gt;:define&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&amp;nbsp; &amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/ui&lt;/span&gt;:composition&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li1"&gt;&lt;div class="de1"&gt;&amp;nbsp; &lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/body&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt; &lt;li class="li2"&gt;&lt;div class="de2"&gt;&lt;span class="sc3"&gt;&lt;span class="re1"&gt;&amp;lt;/html&lt;span class="re2"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt; By encapsulating the layout, we can reuse that layout among multiple compositions. Just like &lt;code&gt;ui:include&lt;/code&gt; lets us encapsulate and reuse conent, JSF compositions let us encapsulate and reuse layout, so that changes to a single layout can affect multiple views. Fundamentally, that's what this tag library is all about. &lt;/p&gt; &lt;/div&gt; &lt;pre&gt;</xs:documentation>
<xs:documentation>tlib-version: 2.3</xs:documentation>
</xs:annotation>
<xs:element name="component">
<xs:annotation>
<xs:documentation><![CDATA[

  <p><span class="changed_modified_2_0_rev_a
  changed_added_2_0 changed_modified_2_2">This</span> <span
  class="changed_added_2_0">tag is the same as 
  <code>ui:composition</code>, except for two things: JSF creates a
  component and adds it directly to the tree, and there's no associated
  template.</span>
  </p>

  <p class="changed_added_2_0">Use this tag to create a component and
  specify a filename for the component as either the source of a
  <code>ui:include</code>, or the source of a Facelets tag.
  </p>

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[


                <div class="changed_added_2_0">
                <p>
                The identifier of the component that JSF inserts into the
                component tree. If an identifier is
                not explicitly specified by the page author, JSF will assign an
                identifier based on the algorithm
                that it uses for all components.
                </p>
                </div>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[

<div class="changed_added_2_0">
  <p>

	Binds the component to a backing bean property, as specified in
	the JSF specification.  <span class="changed_modified_2_2">The
	Java language type of this property must be a class that extends
	<code>javax.faces.component.UIComponent</code>.  The scope of
	the bean on which this property resides must be no wider than
	request scope.  If either of these conditions are not met, the
	results are undefined.</span>

  </p>
</div>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[

<div class="changed_added_2_0_rev_a">
  <p>
        Controls whether the component is rendered. Valid values for this attribute are either the strings "true" or "false" or an EL expression that evaluates to either "true" or "false".<p>If this attribute's value is "false" or the value is an EL expression that evaluates to "false", the component is not rendered in the page.</p>
  </p>

</div>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="composition">
<xs:annotation>
<xs:documentation><![CDATA[

<div class="changed_added_2_0">
  <p>

<span class="changed_modified_2_2">Defines</span> a composition that
optionally uses a template, as outlined in the description of the ui tag
library. Multiple compositions can use the same template, thus
encapsulating and reusing layout. JSF disregards everything outside of
the composition, which lets developers embed compositions in well-formed
XHTML pages that can be viewed in an XHTML viewer, such as Dreamweaver
or a browser, without including extraneous elements such as
<code>head</code> and <code>body</code>.

  </p>
	<div class="syntax"><div class="html4strict" style="font-family: monospace;"><ol><li class="li1"><div class="de1"><span class="sc0">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</div></li>

<li class="li2"><div class="de2">&nbsp; &nbsp; &nbsp; &nbsp; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span></div></li>
<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li2"><div class="de2"><span class="sc3"><span class="re1">&lt;html</span> <span class="re0">xmlns</span>=<span class="st0">&quot;http://www.w3.org/1999/xhtml&quot;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp;xmlns:<span class="re0">ui</span>=<span class="st0">&quot;http://xmlns.jcp.org/jsf/facelets&quot;</span><span class="re2">&gt;</span></span></div></li>

<li class="li2"><div class="de2">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; <span class="sc3"><span class="re1">&lt;body<span class="re2">&gt;</span></span></span></div></li>
<li class="li2"><div class="de2">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; THIS LINE, AND EVERYTHING ABOVE IT IS DISREGARDED BY JSF</div></li>
<li class="li2"><div class="de2">&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;ui</span>:composition <span class="re0">template</span>=<span class="st0">&quot;/layout.xhtml&quot;</span><span class="re2">&gt;</span></span></div></li>

<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li2"><div class="de2">&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;ui</span>:define <span class="re0">name</span>=<span class="st0">&quot;title&quot;</span><span class="re2">&gt;</span></span>#{msgs.contactsWindowTitle}<span class="sc3"><span class="re1">&lt;/ui</span>:define<span class="re2">&gt;</span></span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;ui</span>:define <span class="re0">name</span>=<span class="st0">&quot;heading&quot;</span><span class="re2">&gt;</span></span>#{msgs.contactsHeading}<span class="sc3"><span class="re1">&lt;/ui</span>:define<span class="re2">&gt;</span></span></div></li>

<li class="li2"><div class="de2">&nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;ui</span>:define <span class="re0">name</span>=<span class="st0">&quot;content&quot;</span><span class="re2">&gt;</span></span></div></li>
<li class="li2"><div class="de2">&nbsp; &nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;ui</span>:include <span class="re0">src</span>=<span class="st0">&quot;contactsTable.xhtml&quot;</span> <span class="re2">/&gt;</span></span></div></li>

<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/ui</span>:define<span class="re2">&gt;</span></span></div></li>
<li class="li2"><div class="de2">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="sc3"><span class="re1">&lt;/ui</span>:composition<span class="re2">&gt;</span></span></div></li>
<li class="li2"><div class="de2">&nbsp; &nbsp; THIS LINE, AND EVERYTHING BELOW IT IS DISREGARDED BY JSF</div></li>

<li class="li1"><div class="de1">&nbsp;</div></li>
<li class="li2"><div class="de2">&nbsp; <span class="sc3"><span class="re1">&lt;/body<span class="re2">&gt;</span></span></span></div></li>
<li class="li1"><div class="de1"><span class="sc3"><span class="re1">&lt;/html<span class="re2">&gt;</span></span></span> </div></li></ol></div></div>

</div>
      

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="template">
<xs:annotation>
<xs:documentation><![CDATA[

<div class="changed_added_2_0">
  <p>

<span class="changed_modified_2_2">A</span> URI that points to a
template, also known as a layout, that inserts pieces of the page
defined in the composition. <span class="changed_added_2_2">If the URI
cannot be resolved a <code>TagAttributeException</code> must be thrown,
including accurate location information to help the page author resolve
the problem.  When the template is intended to come from a resource
library contract, the value of this attribute must be an absolute path
starting with "/".</span>

  </p>
</div>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="debug">
<xs:annotation>
<xs:documentation><![CDATA[


            <div class="changed_added_2_0 changed_modified_2_3">
            <p>
            When the <code>ui:debug</code> tag is placed in an XHTML
            page, it creates a component and adds it to the
            component tree. That debug component captures debugging information,
            namely the current state of the component
            tree and the scoped variables in the application, when the component
            is rendered. If the user presses CTRL + SHIFT + d,
            JSF opens a window that shows the debugging information captured by
            the debug component.
            </p>

            <p>
            Typically, the best place to put the <code>ui:debug</code>
            tag is in an application's main template, which
            lets developers enable or disable viewing of debugging information
            in one central location. Additionally, page
            authors can change the hotkey (which by default is CTRL + SHIFT + d,
            where the d stands for debug) to CTRL + SHIFT + ?,
            where ? represents the key specified as the value of the <code>hotkey</code>
            attribute.
            </p>

            <p>
            You can use the <code>rendered</code> attribute to
            control whether the debug component is rendered.
            Using an EL expression as the value for the <code>rendered</code>
            attribute lets you control whether
            debug output is enabled for multiple views based on a single bean
            property.
            </p>
            
            <p class="changed_added_2_3">
              Note ui:debug only works when the ProjectStage is set to Development.
            </p>
            </div>

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="hotkey">
<xs:annotation>
<xs:documentation><![CDATA[


                <div class="changed_added_2_0">
                <p>
                Defines a single character, that, pressed in conjunction with
                CTRL and SHIFT, will display the JSF debug window.
                By default, the hotkey is 'd'. <em>The value for the
                hotkey attribute cannot be an EL expression.</em>
                </p>

                </div>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[


                <div class="changed_added_2_0">
                <p>
                Controls whether the debug component is rendered. Valid values
                for this attribute are either the strings "true" or "false" or
                an EL expression that evaluates to either "true" or "false".<p>If
                this attribute's value is "false" or the value is an EL
                expression that evaluates to "false", the debug component is not
                rendered in the page, the hotkey attribute is disregarded, and
                users cannot open the debugging information window with a
                hotkey.</p>
                </p>

                </div>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="define">
<xs:annotation>
<xs:documentation><![CDATA[


            <div class="changed_added_2_0">

            <p>The <code>define</code> tag defines content
            that is inserted into a page by a template. The <code>define</code>
            tag can be used inside <code>ui:composition</code>, <code>ui:component</code>,
            <code>ui:decorate</code>, and <code>ui:fragment</code>
            tags.</p>

            <p>Content defined by the <code>define</code> tag
            can be inserted into a page by using <code>ui:insert</code>.
            </p>

            </div>

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="name" use="required">
<xs:annotation>
<xs:documentation><![CDATA[


                <div class="changed_added_2_0">

                <p>Assigns a name to the content inside a <code>define</code>
                tag. That name is used by corresponding <code>ui:insert</code>
                tags in a template that insert the named content into a page.</p>
                </div>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="decorate">
<xs:annotation>
<xs:documentation><![CDATA[
<div class="changed_added_2_0">

<p>
<span class="changed_modified_2_2">The</span> <code>decorate</code> tag
is identical to the <code>composition</code> tag, except that
<code>ui:decorate</code>, unlike <code>ui:composition</code>, does not
disregard all content outside of the tag. The <code>decorate</code> is
useful when you want to decorate some content in a page, for example,
you might want to decorate a list of items, like this:
	
<div class="syntax"><div class="html4strict" style="font-family: monospace;"><ol><li class="li1"><div class="de1">
	
<span class="sc2">&lt;ui:decorate template=<span class="st0">&quot;/layout.xhtml&quot;</span><span class="kw2">&gt;</span></span></div></li>
<li class="li2"><div class="de2">&nbsp; <span class="sc2">&lt;ui:define <span class="kw3">name</span>=<span class="st0">&quot;listHeading&quot;</span><span class="kw2">&gt;</span></span></div></li>

<li class="li1"><div class="de1">&nbsp; &nbsp; <span class="sc2">&lt;ui:include <span class="kw3">src</span>="shared/listHeading.xhtml"/<span class="kw2">&gt;</span></span></div></li>
<li class="li2"><div class="de2">&nbsp; <span class="sc2"><span class="kw2">&lt;</span>/ui:define&gt;</span></div></li>
<li class="li1"><div class="de1">&nbsp; &nbsp; &nbsp; &nbsp; </div></li>
<li class="li2"><div class="de2">&nbsp; <span class="sc2">&lt;c:forEach items="#<span class="br0">&#123;</span>items<span class="br0">&#125;"</span> var="item"<span class="kw2">&gt;</span></span></div></li>

<li class="li1"><div class="de1">&nbsp; &nbsp; ...</div></li>
<li class="li2"><div class="de2">&nbsp; <span class="sc2"><span class="kw2">&lt;</span>/c:forEach&gt;</span></div></li>
<li class="li1"><div class="de1">&nbsp; ...</div></li>
<li class="li2"><div class="de2"><span class="sc2"><span class="kw2">&lt;</span>/ui:decorate&gt;</span> </div></li></ol></div></div>
</p>

Because JSF does not disregard everything outside of the <code>ui:decorate</code> tag, <code>ui:decorate</code> can
be used to decorate pieces of a page.

</div>
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="template">
<xs:annotation>
<xs:documentation><![CDATA[

<div class="changed_added_2_0">

<span class="changed_modified_2_2">A</span> URI that points to a
template, also known as a layout, that inserts pieces of the page
defined in the decorator. <span class="changed_added_2_2">If the URI
cannot be resolved a <code>TagAttributeException</code> must be thrown,
including accurate location information to help the page author resolve
the problem.  When the template is intended to come from a resource
library contract, the value of this attribute must be an absolute path
starting with "/".</span>

</div>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="fragment">
<xs:annotation>
<xs:documentation><![CDATA[

        <div class="changed_added_2_0">

          <p><span
          class="changed_modified_2_2">The</span> <code>fragment</code>
          tag is identical to the <code>component</code> tag, except
          that <code>ui:fragment</code>, unlike
          <code>ui:component</code>, JSF does not disregard all content
          outside of the tag.</p>

        </div>

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="id">
<xs:annotation>
<xs:documentation><![CDATA[


                <div class="changed_added_2_0">
                The identifier of the component that JSF inserts into the
                component tree. If an identifier is
                not explicitly specified by the page author, JSF will assign an
                identifier based on the algorithm
                that it uses for all components.
                </div>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="binding">
<xs:annotation>
<xs:documentation><![CDATA[

<div class="changed_added_2_0">

        <p>Binds the component to a backing bean property, as specified
        in the JSF specification. <span class="changed_added_2_2">The
	Java language type of this property must be a class that extends
	<code>javax.faces.component.UIComponent</code>.  The scope of
	the bean on which this property resides must be no wider than
	request scope.  If either of these conditions are not met, the
	results are undefined.</span></p>

</div>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[
            
                <div class="changed_added_2_3">
                    <p>
                        Controls whether the fragment component is rendered. 
                        Valid values for this attribute are either the strings 
                        "true" or "false" or an EL expression that evaluates to
                         either "true" or "false".
                    </p>
                    <p>
                        If this attribute's value is "false" or the value is an
                        EL expression that evaluates to "false", the fragment 
                        is not rendered in the page.
                    </p>
                </div>
            
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="include">
<xs:annotation>
<xs:documentation><![CDATA[


            <div class="changed_added_2_0"> <p>Use this tag &mdash;which
            is very similar to JSP's <code>jsp:include</code> &mdash; to
            encapsulate and reuse content among multiple XHTML
            pages. There are three things this tag can include: plain
            XHTML, and XHTML pages that have either a
            <code>composition</code> tag or a <code>component</code>
            tag.  </p> <p>You supply a filename, through
            <code>ui:include</code>'s <code>src</code> attribute for JSF
            to include. That filename is relative to the XHTML file that
            was rendered as a result of the last request. So, for
            example, if JSF loaded the view <code>login.xhtml</code>,
            and that file included
            <code>pageDecorations/header.xhtml</code>, and <code>
            pageDecorations/header.xhtml</code> included
            <code>companyLogo.xhtml</code>, then
            <code>companyLogo.xhtml</code> will not be found if it's in
            the <code>pageDecorations</code> directory, because
            <code>companyLogo.xhtml</code> has to be in the same
            directory as <code>login.xhtml</code>.  </p>

            </div>

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="src" use="required">
<xs:annotation>
<xs:documentation><![CDATA[

<p>

<span class="changed_added_2_0">The filename of an XHTML page to
include. The filename is relative to the XHTML page that was originally
loaded.</span> <span class="changed_added_2_2">When the included file is
intended to come from a resource library contract, the value of this
attribute must be an absolute path starting with "/".</span>

</p>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="insert">
<xs:annotation>
<xs:documentation><![CDATA[


            <div class="changed_added_2_0">
            <p>Inserts content into a template. That content is defined &mdash;with
            the <code>ui:define</code> tag &mdash; in either a
            <code>ui:composition</code>, <code>ui:component</code>,
            <code>ui:decorate</code>, or <code>ui:fragment</code>.</p>
            </div>

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="name">
<xs:annotation>
<xs:documentation><![CDATA[


                <div class="changed_added_2_0">

                The optional name attribute matches the associated &lt;ui:define/&gt;
                tag in this template's client. If no name is specified, it's
                expected
                that the whole template client will be inserted.

                </div>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="param">
<xs:annotation>
<xs:documentation><![CDATA[


            <div class="changed_added_2_0">
            <p>Use this tag to pass parameters to an included file (using
            <code>ui:include</code>), or a template
            (linked to either a composition or decorator). Embed <code>ui:param</code>
            tags in either <code>ui:include</code>,
            <code>ui:composition</code>, or <code>ui:decorate</code>
            to pass the parameters.
            </div>

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="name" use="required">
<xs:annotation>
<xs:documentation><![CDATA[


<div class="changed_added_2_0">
<span class="changed_modified_2_0_rev_a">The</span> name of the parameter.
</div>
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[

            <div class="changed_added_2_0">
            <span class="changed_modified_2_0_rev_a">The</span> value of the
            parameter. Notice that this attribute's value can be an EL expression,
            which means that you can pass objects to either an included file or a
            template.  </div>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="repeat">
<xs:annotation>
<xs:documentation><![CDATA[

        <div class="changed_added_2_0">
	
        <p><span class="changed_modified_2_2
        changed_modified_2_3">Use</span> this tag as an alternative to
        <code>h:dataTable</code> or <code>c:forEach</code>, especially
        when you are using the <code>jsfc</code> feature of
        Facelets. You can specify this component as the value of the
        <code>jsfc</code> attribute, like this:
        &lt;div... jsfc="ui:repeat" value="#{contacts}"
        var="contact"&gt;...  </p> </div>
        
        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
<xs:attribute name="begin">
<xs:annotation>
<xs:documentation><![CDATA[
            
                <div class="changed_modified_2_3">
                    <p>
                        If value specified: Iteration begins at the item located at the specified index.
                        First item of the collection has index 0.
                        If value not specified: Iteration begins with index set at the specified value.
                    </p>
                </div>
            
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="end">
<xs:annotation>
<xs:documentation><![CDATA[
            
                <div class="changed_modified_2_3">
                    <p>
                        If value specified: Iteration ends at the item located at the specified index (inclusive).
                        If value not specified: Iteration ends when index reaches the specified value (inclusive).
                    </p>
                </div>
            
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="offset">
<xs:annotation>
<xs:documentation><![CDATA[


                <div class="changed_added_2_0">

                <p>Read-write property setting the offset from the
                beginning of the
                collection from which to start the iteration. If not set, this
                offset
                is not considered and iteration will start at the beginning of
                the
                collection.</p>

                </div>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="size">
<xs:annotation>
<xs:documentation><![CDATA[


                <div class="changed_added_2_0">

                <p>Read-write property setting the size of the collection
                to iterate.
                If this value is less than the actual size of the collection, a
                <code>FacesException</code> must be thrown.</p>

                </div>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="step">
<xs:annotation>
<xs:documentation><![CDATA[

                <div class="changed_added_2_0"><p>Iteration
                will only process every step items of the collection,
                starting with the first one.</p></div>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="value" use="required">
<xs:annotation>
<xs:documentation><![CDATA[


                <div class="changed_added_2_0 changed_modified_2_3">

                <p>The name of a collection of items that this tag
                iterates over. The
                collection may be a <code>List</code>, <code>array</code>,
                <code>java.sql.ResultSet</code>, <code>java.lang.Iterable</code>, 
                <code>java.util.Map</code>, type for which a suitable 
                <code>javax.faces.model.DataModel</code> has been registered via 
                <code>javax.faces.model.FacesDataModel</code> 
                or an individual java Object. If the
                collection is null, this tag does nothing.</p>

                </div>

            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="var" use="required">
<xs:annotation>
<xs:documentation><![CDATA[
                
                <div class="changed_added_2_0 changed_modified_2_3">
                 <p>
                  Name of the exported scoped variable for the current item of 
                  the iteration. This scoped variable has nested visibility.
                 </p>
                </div>
                
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="varStatus">
<xs:annotation>
<xs:documentation><![CDATA[
                 
                 <div class="changed_added_2_0">
                  <p>
                   Name of the exported request scoped variable for the status 
                   of the iteration. The object the name points to is a POJO 
                   with the following read-only JavaBeans properties. This 
                   scoped variable has nested visibility.
                  </p>
                  <p><code>begin</code> of type Integer</p>
                  <p><code>end</code> of type Integer</p>
                  <p><code>index</code> of type int</p>
                  <p><code>step</code> of type Integer</p>
                  <p><code>even</code> of type boolean</p>
                  <p><code>odd</code> of type boolean</p>
                  <p><code>first</code> of type boolean</p>
                  <p><code>last</code> of type boolean</p>
                 </div>
                
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rendered">
<xs:annotation>
<xs:documentation><![CDATA[
            
                <div class="changed_added_2_3">
                    <p>
                        Controls whether the repeat component is rendered. 
                        Valid values for this attribute are either the strings 
                        "true" or "false" or an EL expression that evaluates to
                         either "true" or "false".
                    </p>
                    <p>
                        If this attribute's value is "false" or the value is an
                        EL expression that evaluates to "false", the repeat 
                        is not rendered in the page.
                    </p>
                </div>
            
            ]]></xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
</xs:element>
<xs:element name="remove">
<xs:annotation>
<xs:documentation><![CDATA[


            <div class="changed_added_2_0">
            <p>Remove content from a page. This tag is often used in
            conjunction with the <code>jsfc</code> feature of
            Facelets,
            to wrap additional markup. When Facelets removes markup from a page
            by substituting markup items that have
            a <code>jsfc</code> attribute with the specified
            component, Facelets also removes anything in the page that
            is contained in a <code>ui:remove</code> tag.</p>
            </div>

        ]]></xs:documentation>
</xs:annotation>
<xs:complexType mixed="true">
<xs:choice minOccurs="0" maxOccurs="unbounded">
<xs:any processContents="lax"/>
</xs:choice>
</xs:complexType>
</xs:element>
</xs:schema>
